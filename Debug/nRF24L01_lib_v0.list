
nRF24L01_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002440  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002578  08002578  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002578  08002578  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002578  08002578  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002578  08002578  00012578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800257c  0800257c  0001257c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  0800258c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  0800258c  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074c4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000186a  00000000  00000000  000274f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  00028d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000768  00000000  00000000  000295b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000133d6  00000000  00000000  00029d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fea  00000000  00000000  0003d0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000667ef  00000000  00000000  000440e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000aa8cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb8  00000000  00000000  000aa94c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002534 	.word	0x08002534

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002534 	.word	0x08002534

0800014c <readRegister>:
/**
 * @Brief	Read register function
 * @Param	addr - address of register to read.
 * @Ratval	return read register content.
 */
uint8_t readRegister(uint8_t addr) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = R_REGISTER | addr;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	737b      	strb	r3, [r7, #13]
	uint8_t reg;
	uint8_t *pCmd = &cmd;
 800015a:	f107 030d 	add.w	r3, r7, #13
 800015e:	61fb      	str	r3, [r7, #28]
	uint8_t *pReg = &reg;
 8000160:	f107 030c 	add.w	r3, r7, #12
 8000164:	61bb      	str	r3, [r7, #24]
	size_t cmdSize = sizeof(cmd);
 8000166:	2301      	movs	r3, #1
 8000168:	617b      	str	r3, [r7, #20]
	size_t regSize = sizeof(reg);
 800016a:	2301      	movs	r3, #1
 800016c:	613b      	str	r3, [r7, #16]

	csnLow();
 800016e:	f000 f8b1 	bl	80002d4 <csnLow>
	HAL_StatusTypeDef statusRead;
	HAL_StatusTypeDef statusCmd;
	statusCmd = HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT);
 8000172:	697b      	ldr	r3, [r7, #20]
 8000174:	b29a      	uxth	r2, r3
 8000176:	230a      	movs	r3, #10
 8000178:	69f9      	ldr	r1, [r7, #28]
 800017a:	480c      	ldr	r0, [pc, #48]	; (80001ac <readRegister+0x60>)
 800017c:	f001 fcf5 	bl	8001b6a <HAL_SPI_Transmit>
 8000180:	4603      	mov	r3, r0
 8000182:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8000184:	2001      	movs	r0, #1
 8000186:	f000 fde1 	bl	8000d4c <HAL_Delay>
	statusRead = HAL_SPI_Receive(&hspi1, pReg, regSize, SPI_TIMEOUT);
 800018a:	693b      	ldr	r3, [r7, #16]
 800018c:	b29a      	uxth	r2, r3
 800018e:	230a      	movs	r3, #10
 8000190:	69b9      	ldr	r1, [r7, #24]
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <readRegister+0x60>)
 8000194:	f001 fe1d 	bl	8001dd2 <HAL_SPI_Receive>
 8000198:	4603      	mov	r3, r0
 800019a:	73bb      	strb	r3, [r7, #14]
#if 0
	if (HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT))
		HAL_SPI_Receive(&hspi1, pReg, regSize, SPI_TIMEOUT);
	 #endif */

	csnHigh();
 800019c:	f000 f8a6 	bl	80002ec <csnHigh>
	return reg;
 80001a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3720      	adds	r7, #32
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	2000002c 	.word	0x2000002c

080001b0 <writeRegister>:
/**
 * @Brief	Write register funtion.
 * @Param	addr - address of register to write
 * @Param	val - value to write into register.
 */
void writeRegister(uint8_t addr, uint8_t val) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	460a      	mov	r2, r1
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	4613      	mov	r3, r2
 80001be:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = W_REGISTER | addr;
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	f043 0320 	orr.w	r3, r3, #32
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	727b      	strb	r3, [r7, #9]
	uint8_t *pCmd = &cmd;
 80001ca:	f107 0309 	add.w	r3, r7, #9
 80001ce:	617b      	str	r3, [r7, #20]
	size_t cmdSize = sizeof(cmd);
 80001d0:	2301      	movs	r3, #1
 80001d2:	613b      	str	r3, [r7, #16]
	size_t valSize = sizeof(val);
 80001d4:	2301      	movs	r3, #1
 80001d6:	60fb      	str	r3, [r7, #12]
	csnLow();
 80001d8:	f000 f87c 	bl	80002d4 <csnLow>


	HAL_StatusTypeDef statusSend;
	HAL_StatusTypeDef statusRead;
	statusSend = HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT);
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	b29a      	uxth	r2, r3
 80001e0:	230a      	movs	r3, #10
 80001e2:	6979      	ldr	r1, [r7, #20]
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <writeRegister+0x64>)
 80001e6:	f001 fcc0 	bl	8001b6a <HAL_SPI_Transmit>
 80001ea:	4603      	mov	r3, r0
 80001ec:	72fb      	strb	r3, [r7, #11]
	HAL_Delay(1);
 80001ee:	2001      	movs	r0, #1
 80001f0:	f000 fdac 	bl	8000d4c <HAL_Delay>
	statusRead = HAL_SPI_Transmit(&hspi1, &val, valSize, SPI_TIMEOUT);
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	1db9      	adds	r1, r7, #6
 80001fa:	230a      	movs	r3, #10
 80001fc:	4805      	ldr	r0, [pc, #20]	; (8000214 <writeRegister+0x64>)
 80001fe:	f001 fcb4 	bl	8001b6a <HAL_SPI_Transmit>
 8000202:	4603      	mov	r3, r0
 8000204:	72bb      	strb	r3, [r7, #10]
	if (HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT)) {
		HAL_SPI_Transmit(&hspi1, &val, valSize, SPI_TIMEOUT);
	}
#endif
	 */
	csnHigh();
 8000206:	f000 f871 	bl	80002ec <csnHigh>
}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	2000002c 	.word	0x2000002c

08000218 <multiRead>:


/* Multi bytes read/write register functions */
void multiRead(uint8_t addr, uint8_t *buf, size_t bufSize) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd = R_REGISTER | addr;
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	757b      	strb	r3, [r7, #21]
	uint8_t *pCmd = &cmd;
 800022a:	f107 0315 	add.w	r3, r7, #21
 800022e:	61fb      	str	r3, [r7, #28]
	size_t cmdSize = sizeof(cmd);
 8000230:	2301      	movs	r3, #1
 8000232:	61bb      	str	r3, [r7, #24]
	csnLow();
 8000234:	f000 f84e 	bl	80002d4 <csnLow>

	HAL_StatusTypeDef statusRead;
	HAL_StatusTypeDef statusCmd;
	statusCmd = HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT);
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	b29a      	uxth	r2, r3
 800023c:	230a      	movs	r3, #10
 800023e:	69f9      	ldr	r1, [r7, #28]
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <multiRead+0x58>)
 8000242:	f001 fc92 	bl	8001b6a <HAL_SPI_Transmit>
 8000246:	4603      	mov	r3, r0
 8000248:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f000 fd7e 	bl	8000d4c <HAL_Delay>
	statusRead = HAL_SPI_Receive(&hspi1, buf, bufSize, SPI_TIMEOUT);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	b29a      	uxth	r2, r3
 8000254:	230a      	movs	r3, #10
 8000256:	68b9      	ldr	r1, [r7, #8]
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <multiRead+0x58>)
 800025a:	f001 fdba 	bl	8001dd2 <HAL_SPI_Receive>
 800025e:	4603      	mov	r3, r0
 8000260:	75bb      	strb	r3, [r7, #22]

	csnHigh();
 8000262:	f000 f843 	bl	80002ec <csnHigh>
}
 8000266:	bf00      	nop
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	2000002c 	.word	0x2000002c

08000274 <multiWrite>:
void multiWrite(uint8_t addr, uint8_t *buf, size_t bufSize) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
 8000280:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd = W_REGISTER | addr;
 8000282:	7bfb      	ldrb	r3, [r7, #15]
 8000284:	f043 0320 	orr.w	r3, r3, #32
 8000288:	b2db      	uxtb	r3, r3
 800028a:	757b      	strb	r3, [r7, #21]
	uint8_t *pCmd = &cmd;
 800028c:	f107 0315 	add.w	r3, r7, #21
 8000290:	61fb      	str	r3, [r7, #28]
	size_t cmdSize = sizeof(cmd);
 8000292:	2301      	movs	r3, #1
 8000294:	61bb      	str	r3, [r7, #24]
	csnLow();
 8000296:	f000 f81d 	bl	80002d4 <csnLow>

	HAL_StatusTypeDef statusSend;
	HAL_StatusTypeDef statusRead;
	statusSend = HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT);
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	b29a      	uxth	r2, r3
 800029e:	230a      	movs	r3, #10
 80002a0:	69f9      	ldr	r1, [r7, #28]
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <multiWrite+0x5c>)
 80002a4:	f001 fc61 	bl	8001b6a <HAL_SPI_Transmit>
 80002a8:	4603      	mov	r3, r0
 80002aa:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 fd4d 	bl	8000d4c <HAL_Delay>
	statusRead = HAL_SPI_Transmit(&hspi1, buf, bufSize, SPI_TIMEOUT);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	230a      	movs	r3, #10
 80002b8:	68b9      	ldr	r1, [r7, #8]
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <multiWrite+0x5c>)
 80002bc:	f001 fc55 	bl	8001b6a <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	75bb      	strb	r3, [r7, #22]

	csnHigh();
 80002c4:	f000 f812 	bl	80002ec <csnHigh>
}
 80002c8:	bf00      	nop
 80002ca:	3720      	adds	r7, #32
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000002c 	.word	0x2000002c

080002d4 <csnLow>:
}

/**
 * @Brief	Set low level on CSN line
 */
void csnLow() {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2140      	movs	r1, #64	; 0x40
 80002dc:	4802      	ldr	r0, [pc, #8]	; (80002e8 <csnLow+0x14>)
 80002de:	f000 ffbf 	bl	8001260 <HAL_GPIO_WritePin>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010c00 	.word	0x40010c00

080002ec <csnHigh>:

/**
 * @Brief	Set high level on CSN line
 */
void csnHigh() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2140      	movs	r1, #64	; 0x40
 80002f4:	4802      	ldr	r0, [pc, #8]	; (8000300 <csnHigh+0x14>)
 80002f6:	f000 ffb3 	bl	8001260 <HAL_GPIO_WritePin>
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010c00 	.word	0x40010c00

08000304 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	4b4c      	ldr	r3, [pc, #304]	; (800044c <MX_GPIO_Init+0x148>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a4b      	ldr	r2, [pc, #300]	; (800044c <MX_GPIO_Init+0x148>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b49      	ldr	r3, [pc, #292]	; (800044c <MX_GPIO_Init+0x148>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000330:	4b46      	ldr	r3, [pc, #280]	; (800044c <MX_GPIO_Init+0x148>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a45      	ldr	r2, [pc, #276]	; (800044c <MX_GPIO_Init+0x148>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b43      	ldr	r3, [pc, #268]	; (800044c <MX_GPIO_Init+0x148>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b40      	ldr	r3, [pc, #256]	; (800044c <MX_GPIO_Init+0x148>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a3f      	ldr	r2, [pc, #252]	; (800044c <MX_GPIO_Init+0x148>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <MX_GPIO_Init+0x148>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000360:	4b3a      	ldr	r3, [pc, #232]	; (800044c <MX_GPIO_Init+0x148>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a39      	ldr	r2, [pc, #228]	; (800044c <MX_GPIO_Init+0x148>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b37      	ldr	r3, [pc, #220]	; (800044c <MX_GPIO_Init+0x148>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0308 	and.w	r3, r3, #8
 8000374:	603b      	str	r3, [r7, #0]
 8000376:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2180      	movs	r1, #128	; 0x80
 800037c:	4834      	ldr	r0, [pc, #208]	; (8000450 <MX_GPIO_Init+0x14c>)
 800037e:	f000 ff6f 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	4833      	ldr	r0, [pc, #204]	; (8000454 <MX_GPIO_Init+0x150>)
 8000388:	f000 ff6a 	bl	8001260 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000392:	4b31      	ldr	r3, [pc, #196]	; (8000458 <MX_GPIO_Init+0x154>)
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	482b      	ldr	r0, [pc, #172]	; (8000450 <MX_GPIO_Init+0x14c>)
 80003a2:	f000 fe03 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80003a6:	f641 737f 	movw	r3, #8063	; 0x1f7f
 80003aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ac:	2303      	movs	r3, #3
 80003ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	4826      	ldr	r0, [pc, #152]	; (8000450 <MX_GPIO_Init+0x14c>)
 80003b8:	f000 fdf8 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80003bc:	f649 731f 	movw	r3, #40735	; 0x9f1f
 80003c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003c2:	2303      	movs	r3, #3
 80003c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	4619      	mov	r1, r3
 80003cc:	4823      	ldr	r0, [pc, #140]	; (800045c <MX_GPIO_Init+0x158>)
 80003ce:	f000 fded 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80003d2:	f64f 73b7 	movw	r3, #65463	; 0xffb7
 80003d6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d8:	2303      	movs	r3, #3
 80003da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4619      	mov	r1, r3
 80003e2:	481c      	ldr	r0, [pc, #112]	; (8000454 <MX_GPIO_Init+0x150>)
 80003e4:	f000 fde2 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2302      	movs	r3, #2
 80003f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	4814      	ldr	r0, [pc, #80]	; (8000450 <MX_GPIO_Init+0x14c>)
 8000400:	f000 fdd4 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000404:	2304      	movs	r3, #4
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000408:	2303      	movs	r3, #3
 800040a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4813      	ldr	r0, [pc, #76]	; (8000460 <MX_GPIO_Init+0x15c>)
 8000414:	f000 fdca 	bl	8000fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000418:	2340      	movs	r3, #64	; 0x40
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2302      	movs	r3, #2
 8000426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4809      	ldr	r0, [pc, #36]	; (8000454 <MX_GPIO_Init+0x150>)
 8000430:	f000 fdbc 	bl	8000fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	2028      	movs	r0, #40	; 0x28
 800043a:	f000 fd80 	bl	8000f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043e:	2028      	movs	r0, #40	; 0x28
 8000440:	f000 fd99 	bl	8000f76 <HAL_NVIC_EnableIRQ>

}
 8000444:	bf00      	nop
 8000446:	3720      	adds	r7, #32
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	40011000 	.word	0x40011000
 8000454:	40010c00 	.word	0x40010c00
 8000458:	10110000 	.word	0x10110000
 800045c:	40010800 	.word	0x40010800
 8000460:	40011400 	.word	0x40011400

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046a:	f000 fc0d 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046e:	f000 f827 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000472:	f7ff ff47 	bl	8000304 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000476:	f000 fac9 	bl	8000a0c <MX_SPI1_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if TEST_0
	writeRegister(CONFIG, 0x02);
 800047a:	2102      	movs	r1, #2
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fe97 	bl	80001b0 <writeRegister>
	regTmp = readRegister(CONFIG);
 8000482:	2000      	movs	r0, #0
 8000484:	f7ff fe62 	bl	800014c <readRegister>
 8000488:	4603      	mov	r3, r0
 800048a:	461a      	mov	r2, r3
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <main+0x58>)
 800048e:	701a      	strb	r2, [r3, #0]
#endif

	while (1) {
#if TEST_LIB
		uint8_t testVal = test_RFchannel();
 8000490:	f000 f85d 	bl	800054e <test_RFchannel>
 8000494:	4603      	mov	r3, r0
 8000496:	71fb      	strb	r3, [r7, #7]
		testVal = test_RFpower();
 8000498:	f000 f8d0 	bl	800063c <test_RFpower>
 800049c:	4603      	mov	r3, r0
 800049e:	71fb      	strb	r3, [r7, #7]
		testVal = test_RFdataRate();
 80004a0:	f000 f8ff 	bl	80006a2 <test_RFdataRate>
 80004a4:	4603      	mov	r3, r0
 80004a6:	71fb      	strb	r3, [r7, #7]
		testVal = test_ReciveAddress();
 80004a8:	f000 f948 	bl	800073c <test_ReciveAddress>
 80004ac:	4603      	mov	r3, r0
 80004ae:	71fb      	strb	r3, [r7, #7]
		testVal = test_TransmitAddress();
 80004b0:	f000 f9d6 	bl	8000860 <test_TransmitAddress>
 80004b4:	4603      	mov	r3, r0
 80004b6:	71fb      	strb	r3, [r7, #7]
	while (1) {
 80004b8:	e7ea      	b.n	8000490 <main+0x2c>
 80004ba:	bf00      	nop
 80004bc:	20000028 	.word	0x20000028

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b090      	sub	sp, #64	; 0x40
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	f107 0318 	add.w	r3, r7, #24
 80004ca:	2228      	movs	r2, #40	; 0x28
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f002 f828 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e6:	2301      	movs	r3, #1
 80004e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ea:	2310      	movs	r3, #16
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ee:	2302      	movs	r3, #2
 80004f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004f2:	2300      	movs	r3, #0
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80004f6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80004fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fc:	f107 0318 	add.w	r3, r7, #24
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fee7 	bl	80012d4 <HAL_RCC_OscConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800050c:	f000 f819 	bl	8000542 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000510:	230f      	movs	r3, #15
 8000512:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000514:	2302      	movs	r3, #2
 8000516:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800051c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2101      	movs	r1, #1
 800052a:	4618      	mov	r0, r3
 800052c:	f001 f952 	bl	80017d4 <HAL_RCC_ClockConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000536:	f000 f804 	bl	8000542 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3740      	adds	r7, #64	; 0x40
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr

0800054e <test_RFchannel>:
 */

#include "nRF24L01_test-lib.h"

bool test_RFchannel(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b084      	sub	sp, #16
 8000552:	af00      	add	r7, sp, #0
	uint8_t inputDataStatus = OK_CODE;
 8000554:	2301      	movs	r3, #1
 8000556:	727b      	strb	r3, [r7, #9]
	uint16_t fallCounter = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	81fb      	strh	r3, [r7, #14]
	// Correct input data
	uint8_t var = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	737b      	strb	r3, [r7, #13]
	uint8_t max = 125;
 8000560:	237d      	movs	r3, #125	; 0x7d
 8000562:	723b      	strb	r3, [r7, #8]
	for (var = 0; var < max; var++) {
 8000564:	2300      	movs	r3, #0
 8000566:	737b      	strb	r3, [r7, #13]
 8000568:	e00e      	b.n	8000588 <test_RFchannel+0x3a>
		inputDataStatus = setChannel(var);
 800056a:	7b7b      	ldrb	r3, [r7, #13]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f9dd 	bl	800092c <setChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	727b      	strb	r3, [r7, #9]
		if (inputDataStatus == FALL)
 8000576:	7a7b      	ldrb	r3, [r7, #9]
 8000578:	2bff      	cmp	r3, #255	; 0xff
 800057a:	d102      	bne.n	8000582 <test_RFchannel+0x34>
			fallCounter++;
 800057c:	89fb      	ldrh	r3, [r7, #14]
 800057e:	3301      	adds	r3, #1
 8000580:	81fb      	strh	r3, [r7, #14]
	for (var = 0; var < max; var++) {
 8000582:	7b7b      	ldrb	r3, [r7, #13]
 8000584:	3301      	adds	r3, #1
 8000586:	737b      	strb	r3, [r7, #13]
 8000588:	7b7a      	ldrb	r2, [r7, #13]
 800058a:	7a3b      	ldrb	r3, [r7, #8]
 800058c:	429a      	cmp	r2, r3
 800058e:	d3ec      	bcc.n	800056a <test_RFchannel+0x1c>
	}
	//check errors
	if (fallCounter > 0)
 8000590:	89fb      	ldrh	r3, [r7, #14]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <test_RFchannel+0x4c>
		return FALL;
 8000596:	2301      	movs	r3, #1
 8000598:	e04c      	b.n	8000634 <test_RFchannel+0xe6>

	//Incorrect input data
	inputDataStatus = OK_CODE;
 800059a:	2301      	movs	r3, #1
 800059c:	727b      	strb	r3, [r7, #9]
	fallCounter = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	81fb      	strh	r3, [r7, #14]
	max = 255;
 80005a2:	23ff      	movs	r3, #255	; 0xff
 80005a4:	723b      	strb	r3, [r7, #8]
	for (uint16_t i = 126; i < max; i++) {
 80005a6:	237e      	movs	r3, #126	; 0x7e
 80005a8:	817b      	strh	r3, [r7, #10]
 80005aa:	e00f      	b.n	80005cc <test_RFchannel+0x7e>
		inputDataStatus = setChannel(i);
 80005ac:	897b      	ldrh	r3, [r7, #10]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f9bb 	bl	800092c <setChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	727b      	strb	r3, [r7, #9]
		if (inputDataStatus == FALL)
 80005ba:	7a7b      	ldrb	r3, [r7, #9]
 80005bc:	2bff      	cmp	r3, #255	; 0xff
 80005be:	d102      	bne.n	80005c6 <test_RFchannel+0x78>
			fallCounter++;
 80005c0:	89fb      	ldrh	r3, [r7, #14]
 80005c2:	3301      	adds	r3, #1
 80005c4:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 126; i < max; i++) {
 80005c6:	897b      	ldrh	r3, [r7, #10]
 80005c8:	3301      	adds	r3, #1
 80005ca:	817b      	strh	r3, [r7, #10]
 80005cc:	7a3b      	ldrb	r3, [r7, #8]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	897a      	ldrh	r2, [r7, #10]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d3ea      	bcc.n	80005ac <test_RFchannel+0x5e>
	}
	//check errors
	if (fallCounter == 0)		//methode didn't detect error data
 80005d6:	89fb      	ldrh	r3, [r7, #14]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d101      	bne.n	80005e0 <test_RFchannel+0x92>
		return FALL;
 80005dc:	2301      	movs	r3, #1
 80005de:	e029      	b.n	8000634 <test_RFchannel+0xe6>

	//check write to register
	inputDataStatus = OK_CODE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	727b      	strb	r3, [r7, #9]
	fallCounter = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	81fb      	strh	r3, [r7, #14]
	max = 125;
 80005e8:	237d      	movs	r3, #125	; 0x7d
 80005ea:	723b      	strb	r3, [r7, #8]
	uint8_t readVal = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	71fb      	strb	r3, [r7, #7]
	for (var = 0; var < max; var++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	737b      	strb	r3, [r7, #13]
 80005f4:	e014      	b.n	8000620 <test_RFchannel+0xd2>
		inputDataStatus = setChannel(var);
 80005f6:	7b7b      	ldrb	r3, [r7, #13]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f997 	bl	800092c <setChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	727b      	strb	r3, [r7, #9]
		readVal = readRegister(RF_CH);
 8000602:	2005      	movs	r0, #5
 8000604:	f7ff fda2 	bl	800014c <readRegister>
 8000608:	4603      	mov	r3, r0
 800060a:	71fb      	strb	r3, [r7, #7]
		if (var != readVal) {
 800060c:	7b7a      	ldrb	r2, [r7, #13]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	429a      	cmp	r2, r3
 8000612:	d002      	beq.n	800061a <test_RFchannel+0xcc>
			fallCounter++;
 8000614:	89fb      	ldrh	r3, [r7, #14]
 8000616:	3301      	adds	r3, #1
 8000618:	81fb      	strh	r3, [r7, #14]
	for (var = 0; var < max; var++) {
 800061a:	7b7b      	ldrb	r3, [r7, #13]
 800061c:	3301      	adds	r3, #1
 800061e:	737b      	strb	r3, [r7, #13]
 8000620:	7b7a      	ldrb	r2, [r7, #13]
 8000622:	7a3b      	ldrb	r3, [r7, #8]
 8000624:	429a      	cmp	r2, r3
 8000626:	d3e6      	bcc.n	80005f6 <test_RFchannel+0xa8>
		}
	}
	//check errors
	if (fallCounter == 0)		//All read values are correct
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d101      	bne.n	8000632 <test_RFchannel+0xe4>
		return PASS;
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <test_RFchannel+0xe6>
	/* If not or something is wrong with test */
	return FALL;
 8000632:	2301      	movs	r3, #1
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <test_RFpower>:

bool test_RFpower(void)
 {		// Correct input data
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	uint16_t fallCounter = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	80fb      	strh	r3, [r7, #6]
	uint8_t tmp = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	713b      	strb	r3, [r7, #4]
	uint8_t var;
	uint8_t max = 3;
 800064a:	2303      	movs	r3, #3
 800064c:	70fb      	strb	r3, [r7, #3]
	for (var = 0; var <= max; var++) {
 800064e:	2300      	movs	r3, #0
 8000650:	717b      	strb	r3, [r7, #5]
 8000652:	e018      	b.n	8000686 <test_RFpower+0x4a>
		setRFpower(var);
 8000654:	797b      	ldrb	r3, [r7, #5]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f97c 	bl	8000954 <setRFpower>
		tmp = readRegister(RF_SETUP);
 800065c:	2006      	movs	r0, #6
 800065e:	f7ff fd75 	bl	800014c <readRegister>
 8000662:	4603      	mov	r3, r0
 8000664:	713b      	strb	r3, [r7, #4]
		tmp = ((tmp >> 1) & 0x03);
 8000666:	793b      	ldrb	r3, [r7, #4]
 8000668:	085b      	lsrs	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	f003 0303 	and.w	r3, r3, #3
 8000670:	713b      	strb	r3, [r7, #4]
		if (tmp != var)
 8000672:	793a      	ldrb	r2, [r7, #4]
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	429a      	cmp	r2, r3
 8000678:	d002      	beq.n	8000680 <test_RFpower+0x44>
			fallCounter++;
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	3301      	adds	r3, #1
 800067e:	80fb      	strh	r3, [r7, #6]
	for (var = 0; var <= max; var++) {
 8000680:	797b      	ldrb	r3, [r7, #5]
 8000682:	3301      	adds	r3, #1
 8000684:	717b      	strb	r3, [r7, #5]
 8000686:	797a      	ldrb	r2, [r7, #5]
 8000688:	78fb      	ldrb	r3, [r7, #3]
 800068a:	429a      	cmp	r2, r3
 800068c:	d9e2      	bls.n	8000654 <test_RFpower+0x18>
	}
	//check errors
	if (fallCounter > 0)
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <test_RFpower+0x5c>
		return FALL;
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <test_RFpower+0x5e>
	return PASS;
 8000698:	2301      	movs	r3, #1
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <test_RFdataRate>:

bool test_RFdataRate(void) {
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
	// Correct input data
	uint16_t fallCounter = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	80fb      	strh	r3, [r7, #6]
	uint8_t tmp = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	717b      	strb	r3, [r7, #5]

	setRFpower(RF_DataRate_250);
 80006b0:	2004      	movs	r0, #4
 80006b2:	f000 f94f 	bl	8000954 <setRFpower>
	tmp = readRegister(RF_SETUP);
 80006b6:	2006      	movs	r0, #6
 80006b8:	f7ff fd48 	bl	800014c <readRegister>
 80006bc:	4603      	mov	r3, r0
 80006be:	717b      	strb	r3, [r7, #5]
	tmp = ((tmp >> 3) & 0x2E); //0000 0101B
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 032e 	and.w	r3, r3, #46	; 0x2e
 80006ca:	717b      	strb	r3, [r7, #5]
	if (tmp != RF_DataRate_250)
 80006cc:	797b      	ldrb	r3, [r7, #5]
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d002      	beq.n	80006d8 <test_RFdataRate+0x36>
		fallCounter++;
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	3301      	adds	r3, #1
 80006d6:	80fb      	strh	r3, [r7, #6]

	setRFpower(RF_DataRate_1M);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f93b 	bl	8000954 <setRFpower>
	tmp = readRegister(RF_SETUP);
 80006de:	2006      	movs	r0, #6
 80006e0:	f7ff fd34 	bl	800014c <readRegister>
 80006e4:	4603      	mov	r3, r0
 80006e6:	717b      	strb	r3, [r7, #5]
	tmp = ((tmp >> 3) & 0x2E); //0000 0101B
 80006e8:	797b      	ldrb	r3, [r7, #5]
 80006ea:	08db      	lsrs	r3, r3, #3
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 032e 	and.w	r3, r3, #46	; 0x2e
 80006f2:	717b      	strb	r3, [r7, #5]
	if (tmp != RF_DataRate_1M)
 80006f4:	797b      	ldrb	r3, [r7, #5]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <test_RFdataRate+0x5e>
		fallCounter++;
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	3301      	adds	r3, #1
 80006fe:	80fb      	strh	r3, [r7, #6]

	setRFpower(RF_DataRate_2M);
 8000700:	2001      	movs	r0, #1
 8000702:	f000 f927 	bl	8000954 <setRFpower>
	tmp = readRegister(RF_SETUP);
 8000706:	2006      	movs	r0, #6
 8000708:	f7ff fd20 	bl	800014c <readRegister>
 800070c:	4603      	mov	r3, r0
 800070e:	717b      	strb	r3, [r7, #5]
	tmp = ((tmp >> 3) & 0x2E); //0000 0101B
 8000710:	797b      	ldrb	r3, [r7, #5]
 8000712:	08db      	lsrs	r3, r3, #3
 8000714:	b2db      	uxtb	r3, r3
 8000716:	f003 032e 	and.w	r3, r3, #46	; 0x2e
 800071a:	717b      	strb	r3, [r7, #5]
	if (tmp != RF_DataRate_2M)
 800071c:	797b      	ldrb	r3, [r7, #5]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d002      	beq.n	8000728 <test_RFdataRate+0x86>
		fallCounter++;
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	3301      	adds	r3, #1
 8000726:	80fb      	strh	r3, [r7, #6]

	//check errors
	if (fallCounter > 0)
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <test_RFdataRate+0x90>
		return FALL;
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <test_RFdataRate+0x92>
	return PASS;
 8000732:	2301      	movs	r3, #1
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <test_ReciveAddress>:

bool test_ReciveAddress(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
	uint8_t buf[] = { 'a', 'b', 'c', 'd', 'e' };
 8000742:	4a46      	ldr	r2, [pc, #280]	; (800085c <test_ReciveAddress+0x120>)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074c:	6018      	str	r0, [r3, #0]
 800074e:	3304      	adds	r3, #4
 8000750:	7019      	strb	r1, [r3, #0]
	uint8_t *addrBuf = buf;
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	61bb      	str	r3, [r7, #24]
	uint8_t addrBufSize = sizeof(buf);
 8000758:	2305      	movs	r3, #5
 800075a:	75fb      	strb	r3, [r7, #23]
	setAddrWidth(longWidth); //set lenght of address as 5 bytes
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f8d7 	bl	8000910 <setAddrWidth>

	uint8_t var;
	uint8_t max = 6;
 8000762:	2306      	movs	r3, #6
 8000764:	75bb      	strb	r3, [r7, #22]
	uint8_t inputDataStatus = OK_CODE;
 8000766:	2301      	movs	r3, #1
 8000768:	757b      	strb	r3, [r7, #21]
	uint16_t fallCounter = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	83bb      	strh	r3, [r7, #28]

	for (var = 0; var < max; var++) {
 800076e:	2300      	movs	r3, #0
 8000770:	77fb      	strb	r3, [r7, #31]
 8000772:	e010      	b.n	8000796 <test_ReciveAddress+0x5a>
		inputDataStatus = setReceivePipeAddress(var, addrBuf, addrBufSize);
 8000774:	7dfa      	ldrb	r2, [r7, #23]
 8000776:	7ffb      	ldrb	r3, [r7, #31]
 8000778:	69b9      	ldr	r1, [r7, #24]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f909 	bl	8000992 <setReceivePipeAddress>
 8000780:	4603      	mov	r3, r0
 8000782:	757b      	strb	r3, [r7, #21]
		if (inputDataStatus == ERR_CODE)
 8000784:	7d7b      	ldrb	r3, [r7, #21]
 8000786:	2bff      	cmp	r3, #255	; 0xff
 8000788:	d102      	bne.n	8000790 <test_ReciveAddress+0x54>
			fallCounter++;
 800078a:	8bbb      	ldrh	r3, [r7, #28]
 800078c:	3301      	adds	r3, #1
 800078e:	83bb      	strh	r3, [r7, #28]
	for (var = 0; var < max; var++) {
 8000790:	7ffb      	ldrb	r3, [r7, #31]
 8000792:	3301      	adds	r3, #1
 8000794:	77fb      	strb	r3, [r7, #31]
 8000796:	7ffa      	ldrb	r2, [r7, #31]
 8000798:	7dbb      	ldrb	r3, [r7, #22]
 800079a:	429a      	cmp	r2, r3
 800079c:	d3ea      	bcc.n	8000774 <test_ReciveAddress+0x38>
	}
	if (fallCounter > 0)
 800079e:	8bbb      	ldrh	r3, [r7, #28]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <test_ReciveAddress+0x6c>
		return FALL;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e054      	b.n	8000852 <test_ReciveAddress+0x116>

	max = 64;
 80007a8:	2340      	movs	r3, #64	; 0x40
 80007aa:	75bb      	strb	r3, [r7, #22]
	inputDataStatus = OK_CODE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	757b      	strb	r3, [r7, #21]
	fallCounter = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	83bb      	strh	r3, [r7, #28]
	for (var = 0; var < max; var++) {
 80007b4:	2300      	movs	r3, #0
 80007b6:	77fb      	strb	r3, [r7, #31]
 80007b8:	e010      	b.n	80007dc <test_ReciveAddress+0xa0>
		inputDataStatus = setReceivePipeAddress(var, addrBuf, addrBufSize);
 80007ba:	7dfa      	ldrb	r2, [r7, #23]
 80007bc:	7ffb      	ldrb	r3, [r7, #31]
 80007be:	69b9      	ldr	r1, [r7, #24]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f8e6 	bl	8000992 <setReceivePipeAddress>
 80007c6:	4603      	mov	r3, r0
 80007c8:	757b      	strb	r3, [r7, #21]
		if (inputDataStatus == ERR_CODE)
 80007ca:	7d7b      	ldrb	r3, [r7, #21]
 80007cc:	2bff      	cmp	r3, #255	; 0xff
 80007ce:	d102      	bne.n	80007d6 <test_ReciveAddress+0x9a>
			fallCounter++;
 80007d0:	8bbb      	ldrh	r3, [r7, #28]
 80007d2:	3301      	adds	r3, #1
 80007d4:	83bb      	strh	r3, [r7, #28]
	for (var = 0; var < max; var++) {
 80007d6:	7ffb      	ldrb	r3, [r7, #31]
 80007d8:	3301      	adds	r3, #1
 80007da:	77fb      	strb	r3, [r7, #31]
 80007dc:	7ffa      	ldrb	r2, [r7, #31]
 80007de:	7dbb      	ldrb	r3, [r7, #22]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3ea      	bcc.n	80007ba <test_ReciveAddress+0x7e>
	}
	if (fallCounter == 0)
 80007e4:	8bbb      	ldrh	r3, [r7, #28]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <test_ReciveAddress+0xb2>
		return FALL;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e031      	b.n	8000852 <test_ReciveAddress+0x116>


	max = 6;
 80007ee:	2306      	movs	r3, #6
 80007f0:	75bb      	strb	r3, [r7, #22]
	inputDataStatus = OK_CODE;
 80007f2:	2301      	movs	r3, #1
 80007f4:	757b      	strb	r3, [r7, #21]
	fallCounter = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	83bb      	strh	r3, [r7, #28]
	uint8_t testBuf[5];

	for (var = 0; var < max; var++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	77fb      	strb	r3, [r7, #31]
 80007fe:	e01e      	b.n	800083e <test_ReciveAddress+0x102>
		inputDataStatus = setReceivePipeAddress(var, addrBuf, addrBufSize);
 8000800:	7dfa      	ldrb	r2, [r7, #23]
 8000802:	7ffb      	ldrb	r3, [r7, #31]
 8000804:	69b9      	ldr	r1, [r7, #24]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f8c3 	bl	8000992 <setReceivePipeAddress>
 800080c:	4603      	mov	r3, r0
 800080e:	757b      	strb	r3, [r7, #21]
		uint8_t addr = 0x0A + var;
 8000810:	7ffb      	ldrb	r3, [r7, #31]
 8000812:	330a      	adds	r3, #10
 8000814:	753b      	strb	r3, [r7, #20]
		multiRead(addr, testBuf, sizeof(testBuf));
 8000816:	1d39      	adds	r1, r7, #4
 8000818:	7d3b      	ldrb	r3, [r7, #20]
 800081a:	2205      	movs	r2, #5
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fcfb 	bl	8000218 <multiRead>
	if(buf[4] != testBuf[4] && buf[3] != testBuf[3])
 8000822:	7c3a      	ldrb	r2, [r7, #16]
 8000824:	7a3b      	ldrb	r3, [r7, #8]
 8000826:	429a      	cmp	r2, r3
 8000828:	d006      	beq.n	8000838 <test_ReciveAddress+0xfc>
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	429a      	cmp	r2, r3
 8000830:	d002      	beq.n	8000838 <test_ReciveAddress+0xfc>
			fallCounter++;
 8000832:	8bbb      	ldrh	r3, [r7, #28]
 8000834:	3301      	adds	r3, #1
 8000836:	83bb      	strh	r3, [r7, #28]
	for (var = 0; var < max; var++) {
 8000838:	7ffb      	ldrb	r3, [r7, #31]
 800083a:	3301      	adds	r3, #1
 800083c:	77fb      	strb	r3, [r7, #31]
 800083e:	7ffa      	ldrb	r2, [r7, #31]
 8000840:	7dbb      	ldrb	r3, [r7, #22]
 8000842:	429a      	cmp	r2, r3
 8000844:	d3dc      	bcc.n	8000800 <test_ReciveAddress+0xc4>
	}
	if (fallCounter == 0) {
 8000846:	8bbb      	ldrh	r3, [r7, #28]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d101      	bne.n	8000850 <test_ReciveAddress+0x114>
		return PASS;
 800084c:	2301      	movs	r3, #1
 800084e:	e000      	b.n	8000852 <test_ReciveAddress+0x116>
	}
	return FALL;
 8000850:	2301      	movs	r3, #1
}
 8000852:	4618      	mov	r0, r3
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	0800254c 	.word	0x0800254c

08000860 <test_TransmitAddress>:

bool test_TransmitAddress(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
	uint8_t buf[] = { 'a', 'b', 'c', 'd', 'e' };
 8000866:	4a21      	ldr	r2, [pc, #132]	; (80008ec <test_TransmitAddress+0x8c>)
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000870:	6018      	str	r0, [r3, #0]
 8000872:	3304      	adds	r3, #4
 8000874:	7019      	strb	r1, [r3, #0]
	uint8_t *addrBuf = buf;
 8000876:	f107 0308 	add.w	r3, r7, #8
 800087a:	613b      	str	r3, [r7, #16]

	uint16_t fallCounter = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	82fb      	strh	r3, [r7, #22]
	uint8_t inputDataStatus = OK_CODE;
 8000880:	2301      	movs	r3, #1
 8000882:	73fb      	strb	r3, [r7, #15]
	uint8_t var;
	uint8_t max = 10;
 8000884:	230a      	movs	r3, #10
 8000886:	73bb      	strb	r3, [r7, #14]

	for (var = 0; var < max; var++) {
 8000888:	2300      	movs	r3, #0
 800088a:	757b      	strb	r3, [r7, #21]
 800088c:	e00f      	b.n	80008ae <test_TransmitAddress+0x4e>
		inputDataStatus = setTransmitPipeAddress(addrBuf, var);
 800088e:	7d7b      	ldrb	r3, [r7, #21]
 8000890:	4619      	mov	r1, r3
 8000892:	6938      	ldr	r0, [r7, #16]
 8000894:	f000 f8a6 	bl	80009e4 <setTransmitPipeAddress>
 8000898:	4603      	mov	r3, r0
 800089a:	73fb      	strb	r3, [r7, #15]
		if (inputDataStatus == ERR_CODE)
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	d102      	bne.n	80008a8 <test_TransmitAddress+0x48>
			fallCounter++;
 80008a2:	8afb      	ldrh	r3, [r7, #22]
 80008a4:	3301      	adds	r3, #1
 80008a6:	82fb      	strh	r3, [r7, #22]
	for (var = 0; var < max; var++) {
 80008a8:	7d7b      	ldrb	r3, [r7, #21]
 80008aa:	3301      	adds	r3, #1
 80008ac:	757b      	strb	r3, [r7, #21]
 80008ae:	7d7a      	ldrb	r2, [r7, #21]
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d3eb      	bcc.n	800088e <test_TransmitAddress+0x2e>
	}
	if (fallCounter < 9) {
 80008b6:	8afb      	ldrh	r3, [r7, #22]
 80008b8:	2b08      	cmp	r3, #8
 80008ba:	d801      	bhi.n	80008c0 <test_TransmitAddress+0x60>
		return FALL;
 80008bc:	2301      	movs	r3, #1
 80008be:	e010      	b.n	80008e2 <test_TransmitAddress+0x82>
	}
	uint8_t testBuf[5];
	multiRead(TX_ADDR, testBuf, sizeof(testBuf));
 80008c0:	463b      	mov	r3, r7
 80008c2:	2205      	movs	r2, #5
 80008c4:	4619      	mov	r1, r3
 80008c6:	2010      	movs	r0, #16
 80008c8:	f7ff fca6 	bl	8000218 <multiRead>
	if (buf[4] != testBuf[4] && buf[3] != testBuf[3]) {
 80008cc:	7b3a      	ldrb	r2, [r7, #12]
 80008ce:	793b      	ldrb	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d005      	beq.n	80008e0 <test_TransmitAddress+0x80>
 80008d4:	7afa      	ldrb	r2, [r7, #11]
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d001      	beq.n	80008e0 <test_TransmitAddress+0x80>
		return FALL;
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <test_TransmitAddress+0x82>
	}
	return PASS;
 80008e0:	2301      	movs	r3, #1
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	0800254c 	.word	0x0800254c

080008f0 <checkPipe>:
	}
}

/* Auto ACK */
uint8_t checkPipe(uint8_t pipe)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]
	if (pipe >= 0 && pipe <= 5) //check correct pipe number
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b05      	cmp	r3, #5
 80008fe:	d801      	bhi.n	8000904 <checkPipe+0x14>
		return 1;
 8000900:	2301      	movs	r3, #1
 8000902:	e000      	b.n	8000906 <checkPipe+0x16>
	return 0;
 8000904:	2300      	movs	r3, #0
}
 8000906:	4618      	mov	r0, r3
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <setAddrWidth>:
	return 0;
}

/* Address Width */
void setAddrWidth(addressWidth_t width)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	writeRegister(SETUP_AW, width);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4619      	mov	r1, r3
 800091e:	2003      	movs	r0, #3
 8000920:	f7ff fc46 	bl	80001b0 <writeRegister>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <setChannel>:
	return ERR_CODE;
}

/* RF channel */
uint8_t setChannel(uint8_t channel)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	if (channel >= 0 && channel <= 125)
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b7d      	cmp	r3, #125	; 0x7d
 800093a:	d806      	bhi.n	800094a <setChannel+0x1e>
	{
		writeRegister(RF_CH, channel); //Maximum channel limited to 125 by hardware
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4619      	mov	r1, r3
 8000940:	2005      	movs	r0, #5
 8000942:	f7ff fc35 	bl	80001b0 <writeRegister>
		return OK_CODE;
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <setChannel+0x20>
	}
	return ERR_CODE;
 800094a:	23ff      	movs	r3, #255	; 0xff
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <setRFpower>:
{
	resetBit(RF_SETUP, bit4);
}

void setRFpower(powerRF_t power)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	/*
	if (power > RF_PWR_0dBm && power < RF_PWR_18dBm)
	 return ERR_CODE;*/
	uint8_t tmp = readRegister(RF_SETUP); //
 800095e:	2006      	movs	r0, #6
 8000960:	f7ff fbf4 	bl	800014c <readRegister>
 8000964:	4603      	mov	r3, r0
 8000966:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0xF8;					  //0xF8 - 1111 1000B reset 3 LSB
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	f023 0307 	bic.w	r3, r3, #7
 800096e:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (power << 1);			  //combining tmp and shifted power
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	b25a      	sxtb	r2, r3
 8000976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800097a:	4313      	orrs	r3, r2
 800097c:	b25b      	sxtb	r3, r3
 800097e:	73fb      	strb	r3, [r7, #15]
	writeRegister(RF_SETUP, tmp);
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	4619      	mov	r1, r3
 8000984:	2006      	movs	r0, #6
 8000986:	f7ff fc13 	bl	80001b0 <writeRegister>
	/* return OK_CODE; */
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <setReceivePipeAddress>:
 * @Note	Remember that addresses registers for pipes from 2 to 5 are 1 byte only.
 * 			Also registers for pipe 0 and 1 can have size of from 3 to 5 bytes.
 */
uint8_t setReceivePipeAddress(uint8_t pipe, uint8_t *addrBuf,
							  size_t addrBufSize)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	73fb      	strb	r3, [r7, #15]
	if (!checkPipe(pipe))
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffa4 	bl	80008f0 <checkPipe>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d101      	bne.n	80009b2 <setReceivePipeAddress+0x20>
	{ //if checkPipe return 0 - end fun. by return 0.
		return ERR_CODE;
 80009ae:	23ff      	movs	r3, #255	; 0xff
 80009b0:	e014      	b.n	80009dc <setReceivePipeAddress+0x4a>
	}
	uint8_t addr = RX_ADDR_P0 + pipe; //if pipe = 0 -> write Receive address pipe 0
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	330a      	adds	r3, #10
 80009b6:	75fb      	strb	r3, [r7, #23]
	if (pipe >= 2 && pipe <= 5)
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d907      	bls.n	80009ce <setReceivePipeAddress+0x3c>
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	2b05      	cmp	r3, #5
 80009c2:	d804      	bhi.n	80009ce <setReceivePipeAddress+0x3c>
	{
		if (addrBufSize != 1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d001      	beq.n	80009ce <setReceivePipeAddress+0x3c>
		{
			return ERR_CODE;
 80009ca:	23ff      	movs	r3, #255	; 0xff
 80009cc:	e006      	b.n	80009dc <setReceivePipeAddress+0x4a>
		}
	}
	multiWrite(addr, addrBuf, addrBufSize);
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fc4d 	bl	8000274 <multiWrite>
	return OK_CODE;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <setTransmitPipeAddress>:

/* Transmit address data pipe */
uint8_t setTransmitPipeAddress(uint8_t *addrBuf, size_t addrBufSize)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	if (addrBufSize != 5)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d001      	beq.n	80009f8 <setTransmitPipeAddress+0x14>
	{
		return ERR_CODE; //if addrBufSize isn't 5 bytes retun 0
 80009f4:	23ff      	movs	r3, #255	; 0xff
 80009f6:	e005      	b.n	8000a04 <setTransmitPipeAddress+0x20>
	}
	multiWrite(TX_ADDR, addrBuf, addrBufSize);
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	2010      	movs	r0, #16
 80009fe:	f7ff fc39 	bl	8000274 <multiWrite>
	return OK_CODE;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000a10:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <MX_SPI1_Init+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a40:	2228      	movs	r2, #40	; 0x28
 8000a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a58:	220a      	movs	r2, #10
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a5c:	4804      	ldr	r0, [pc, #16]	; (8000a70 <MX_SPI1_Init+0x64>)
 8000a5e:	f001 f823 	bl	8001aa8 <HAL_SPI_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a68:	f7ff fd6b 	bl	8000542 <Error_Handler>
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000002c 	.word	0x2000002c
 8000a74:	40013000 	.word	0x40013000

08000a78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <HAL_SPI_MspInit+0x88>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d12f      	bne.n	8000af8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	; (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000a9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ac8:	23a0      	movs	r3, #160	; 0xa0
 8000aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480b      	ldr	r0, [pc, #44]	; (8000b08 <HAL_SPI_MspInit+0x90>)
 8000adc:	f000 fa66 	bl	8000fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_SPI_MspInit+0x90>)
 8000af4:	f000 fa5a 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40013000 	.word	0x40013000
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010800 	.word	0x40010800

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_MspInit+0x5c>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <HAL_MspInit+0x60>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_MspInit+0x60>)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3714      	adds	r7, #20
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <HardFault_Handler+0x4>

08000b82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <MemManage_Handler+0x4>

08000b88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <BusFault_Handler+0x4>

08000b8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8aa 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bcc:	f000 fb60 	bl	8001290 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <SystemInit+0x5c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <SystemInit+0x5c>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <SystemInit+0x5c>)
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	4911      	ldr	r1, [pc, #68]	; (8000c30 <SystemInit+0x5c>)
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <SystemInit+0x60>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <SystemInit+0x5c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <SystemInit+0x5c>)
 8000bf6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <SystemInit+0x5c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SystemInit+0x5c>)
 8000c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <SystemInit+0x5c>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <SystemInit+0x5c>)
 8000c12:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000c16:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SystemInit+0x5c>)
 8000c1a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c1e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <SystemInit+0x64>)
 8000c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c26:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000
 8000c34:	f8ff0000 	.word	0xf8ff0000
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c48:	480a      	ldr	r0, [pc, #40]	; (8000c74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c58:	f842 3b04 	str.w	r3, [r2], #4

08000c5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c62:	f7ff ffb7 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f001 fc39 	bl	80024dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6a:	f7ff fbfb 	bl	8000464 <main>
  bx lr
 8000c6e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c70:	08002580 	.word	0x08002580
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c78:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c7c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c80:	20000088 	.word	0x20000088

08000c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_2_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x28>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x28>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f945 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff ff32 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40022000 	.word	0x40022000

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f95d 	bl	8000f92 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f925 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_IncTick+0x1c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x20>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <HAL_IncTick+0x20>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000084 	.word	0x20000084

08000d38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <HAL_GetTick+0x10>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	20000084 	.word	0x20000084

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff fff0 	bl	8000d38 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_Delay+0x40>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffe0 	bl	8000d38 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000008 	.word	0x20000008

08000d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dac:	4013      	ands	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	0a1b      	lsrs	r3, r3, #8
 8000de2:	f003 0307 	and.w	r3, r3, #7
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db0b      	blt.n	8000e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f003 021f 	and.w	r2, r3, #31
 8000e0c:	4906      	ldr	r1, [pc, #24]	; (8000e28 <__NVIC_EnableIRQ+0x34>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	095b      	lsrs	r3, r3, #5
 8000e14:	2001      	movs	r0, #1
 8000e16:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	; (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	; (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff90 	bl	8000e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff2d 	bl	8000d90 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff42 	bl	8000dd8 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff90 	bl	8000e80 <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5f 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff35 	bl	8000df4 <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b08b      	sub	sp, #44	; 0x2c
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	e127      	b.n	8001210 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	f040 8116 	bne.w	800120a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b12      	cmp	r3, #18
 8000fe4:	d034      	beq.n	8001050 <HAL_GPIO_Init+0xa4>
 8000fe6:	2b12      	cmp	r3, #18
 8000fe8:	d80d      	bhi.n	8001006 <HAL_GPIO_Init+0x5a>
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d02b      	beq.n	8001046 <HAL_GPIO_Init+0x9a>
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d804      	bhi.n	8000ffc <HAL_GPIO_Init+0x50>
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d031      	beq.n	800105a <HAL_GPIO_Init+0xae>
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d01c      	beq.n	8001034 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ffa:	e048      	b.n	800108e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	d043      	beq.n	8001088 <HAL_GPIO_Init+0xdc>
 8001000:	2b11      	cmp	r3, #17
 8001002:	d01b      	beq.n	800103c <HAL_GPIO_Init+0x90>
          break;
 8001004:	e043      	b.n	800108e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001006:	4a89      	ldr	r2, [pc, #548]	; (800122c <HAL_GPIO_Init+0x280>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d026      	beq.n	800105a <HAL_GPIO_Init+0xae>
 800100c:	4a87      	ldr	r2, [pc, #540]	; (800122c <HAL_GPIO_Init+0x280>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d806      	bhi.n	8001020 <HAL_GPIO_Init+0x74>
 8001012:	4a87      	ldr	r2, [pc, #540]	; (8001230 <HAL_GPIO_Init+0x284>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d020      	beq.n	800105a <HAL_GPIO_Init+0xae>
 8001018:	4a86      	ldr	r2, [pc, #536]	; (8001234 <HAL_GPIO_Init+0x288>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01d      	beq.n	800105a <HAL_GPIO_Init+0xae>
          break;
 800101e:	e036      	b.n	800108e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001020:	4a85      	ldr	r2, [pc, #532]	; (8001238 <HAL_GPIO_Init+0x28c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0xae>
 8001026:	4a85      	ldr	r2, [pc, #532]	; (800123c <HAL_GPIO_Init+0x290>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d016      	beq.n	800105a <HAL_GPIO_Init+0xae>
 800102c:	4a84      	ldr	r2, [pc, #528]	; (8001240 <HAL_GPIO_Init+0x294>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0xae>
          break;
 8001032:	e02c      	b.n	800108e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e028      	b.n	800108e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	3304      	adds	r3, #4
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e023      	b.n	800108e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	3308      	adds	r3, #8
 800104c:	623b      	str	r3, [r7, #32]
          break;
 800104e:	e01e      	b.n	800108e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	330c      	adds	r3, #12
 8001056:	623b      	str	r3, [r7, #32]
          break;
 8001058:	e019      	b.n	800108e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001062:	2304      	movs	r3, #4
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e012      	b.n	800108e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d105      	bne.n	800107c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	611a      	str	r2, [r3, #16]
          break;
 800107a:	e008      	b.n	800108e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800107c:	2308      	movs	r3, #8
 800107e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	615a      	str	r2, [r3, #20]
          break;
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2bff      	cmp	r3, #255	; 0xff
 8001092:	d801      	bhi.n	8001098 <HAL_GPIO_Init+0xec>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	e001      	b.n	800109c <HAL_GPIO_Init+0xf0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3304      	adds	r3, #4
 800109c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2bff      	cmp	r3, #255	; 0xff
 80010a2:	d802      	bhi.n	80010aa <HAL_GPIO_Init+0xfe>
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	e002      	b.n	80010b0 <HAL_GPIO_Init+0x104>
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	3b08      	subs	r3, #8
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	210f      	movs	r1, #15
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	401a      	ands	r2, r3
 80010c2:	6a39      	ldr	r1, [r7, #32]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	431a      	orrs	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 8096 	beq.w	800120a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010de:	4b59      	ldr	r3, [pc, #356]	; (8001244 <HAL_GPIO_Init+0x298>)
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	4a58      	ldr	r2, [pc, #352]	; (8001244 <HAL_GPIO_Init+0x298>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6193      	str	r3, [r2, #24]
 80010ea:	4b56      	ldr	r3, [pc, #344]	; (8001244 <HAL_GPIO_Init+0x298>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010f6:	4a54      	ldr	r2, [pc, #336]	; (8001248 <HAL_GPIO_Init+0x29c>)
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	089b      	lsrs	r3, r3, #2
 80010fc:	3302      	adds	r3, #2
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_GPIO_Init+0x2a0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d013      	beq.n	800114a <HAL_GPIO_Init+0x19e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4a      	ldr	r2, [pc, #296]	; (8001250 <HAL_GPIO_Init+0x2a4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d00d      	beq.n	8001146 <HAL_GPIO_Init+0x19a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a49      	ldr	r2, [pc, #292]	; (8001254 <HAL_GPIO_Init+0x2a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d007      	beq.n	8001142 <HAL_GPIO_Init+0x196>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a48      	ldr	r2, [pc, #288]	; (8001258 <HAL_GPIO_Init+0x2ac>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_GPIO_Init+0x192>
 800113a:	2303      	movs	r3, #3
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x1a0>
 800113e:	2304      	movs	r3, #4
 8001140:	e004      	b.n	800114c <HAL_GPIO_Init+0x1a0>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <HAL_GPIO_Init+0x1a0>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_GPIO_Init+0x1a0>
 800114a:	2300      	movs	r3, #0
 800114c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114e:	f002 0203 	and.w	r2, r2, #3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4093      	lsls	r3, r2
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4313      	orrs	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800115c:	493a      	ldr	r1, [pc, #232]	; (8001248 <HAL_GPIO_Init+0x29c>)
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d006      	beq.n	8001184 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001176:	4b39      	ldr	r3, [pc, #228]	; (800125c <HAL_GPIO_Init+0x2b0>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4938      	ldr	r1, [pc, #224]	; (800125c <HAL_GPIO_Init+0x2b0>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
 8001182:	e006      	b.n	8001192 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <HAL_GPIO_Init+0x2b0>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	43db      	mvns	r3, r3
 800118c:	4933      	ldr	r1, [pc, #204]	; (800125c <HAL_GPIO_Init+0x2b0>)
 800118e:	4013      	ands	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	492e      	ldr	r1, [pc, #184]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
 80011aa:	e006      	b.n	80011ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4929      	ldr	r1, [pc, #164]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	4924      	ldr	r1, [pc, #144]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	608b      	str	r3, [r1, #8]
 80011d2:	e006      	b.n	80011e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	43db      	mvns	r3, r3
 80011dc:	491f      	ldr	r1, [pc, #124]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011de:	4013      	ands	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011f0:	68da      	ldr	r2, [r3, #12]
 80011f2:	491a      	ldr	r1, [pc, #104]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	60cb      	str	r3, [r1, #12]
 80011fa:	e006      	b.n	800120a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_GPIO_Init+0x2b0>)
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	43db      	mvns	r3, r3
 8001204:	4915      	ldr	r1, [pc, #84]	; (800125c <HAL_GPIO_Init+0x2b0>)
 8001206:	4013      	ands	r3, r2
 8001208:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	3301      	adds	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	fa22 f303 	lsr.w	r3, r2, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	f47f aed0 	bne.w	8000fc0 <HAL_GPIO_Init+0x14>
  }
}
 8001220:	bf00      	nop
 8001222:	372c      	adds	r7, #44	; 0x2c
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	10210000 	.word	0x10210000
 8001230:	10110000 	.word	0x10110000
 8001234:	10120000 	.word	0x10120000
 8001238:	10310000 	.word	0x10310000
 800123c:	10320000 	.word	0x10320000
 8001240:	10220000 	.word	0x10220000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40011400 	.word	0x40011400
 800125c:	40010400 	.word	0x40010400

08001260 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	807b      	strh	r3, [r7, #2]
 800126c:	4613      	mov	r3, r2
 800126e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001270:	787b      	ldrb	r3, [r7, #1]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001276:	887a      	ldrh	r2, [r7, #2]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800127c:	e003      	b.n	8001286 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	041a      	lsls	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	611a      	str	r2, [r3, #16]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f806 	bl	80012c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e26c      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8087 	beq.w	8001402 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f4:	4b92      	ldr	r3, [pc, #584]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d00c      	beq.n	800131a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001300:	4b8f      	ldr	r3, [pc, #572]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d112      	bne.n	8001332 <HAL_RCC_OscConfig+0x5e>
 800130c:	4b8c      	ldr	r3, [pc, #560]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001318:	d10b      	bne.n	8001332 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131a:	4b89      	ldr	r3, [pc, #548]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d06c      	beq.n	8001400 <HAL_RCC_OscConfig+0x12c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d168      	bne.n	8001400 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e246      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x76>
 800133c:	4b80      	ldr	r3, [pc, #512]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a7f      	ldr	r2, [pc, #508]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e02e      	b.n	80013a8 <HAL_RCC_OscConfig+0xd4>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x98>
 8001352:	4b7b      	ldr	r3, [pc, #492]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a7a      	ldr	r2, [pc, #488]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b78      	ldr	r3, [pc, #480]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a77      	ldr	r2, [pc, #476]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e01d      	b.n	80013a8 <HAL_RCC_OscConfig+0xd4>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0xbc>
 8001376:	4b72      	ldr	r3, [pc, #456]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a71      	ldr	r2, [pc, #452]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b6f      	ldr	r3, [pc, #444]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6e      	ldr	r2, [pc, #440]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0xd4>
 8001390:	4b6b      	ldr	r3, [pc, #428]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b68      	ldr	r3, [pc, #416]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a67      	ldr	r2, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d013      	beq.n	80013d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcc2 	bl	8000d38 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fcbe 	bl	8000d38 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1fa      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b5d      	ldr	r3, [pc, #372]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0xe4>
 80013d6:	e014      	b.n	8001402 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fcae 	bl	8000d38 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fcaa 	bl	8000d38 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e1e6      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	4b53      	ldr	r3, [pc, #332]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1f0      	bne.n	80013e0 <HAL_RCC_OscConfig+0x10c>
 80013fe:	e000      	b.n	8001402 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d063      	beq.n	80014d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140e:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800141a:	4b49      	ldr	r3, [pc, #292]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b08      	cmp	r3, #8
 8001424:	d11c      	bne.n	8001460 <HAL_RCC_OscConfig+0x18c>
 8001426:	4b46      	ldr	r3, [pc, #280]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d116      	bne.n	8001460 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001432:	4b43      	ldr	r3, [pc, #268]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_RCC_OscConfig+0x176>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e1ba      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4939      	ldr	r1, [pc, #228]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800145a:	4313      	orrs	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145e:	e03a      	b.n	80014d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d020      	beq.n	80014aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fc63 	bl	8000d38 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fc5f 	bl	8000d38 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e19b      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001488:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4927      	ldr	r1, [pc, #156]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <HAL_RCC_OscConfig+0x270>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc42 	bl	8000d38 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b8:	f7ff fc3e 	bl	8000d38 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e17a      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0308 	and.w	r3, r3, #8
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d03a      	beq.n	8001558 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d019      	beq.n	800151e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_RCC_OscConfig+0x274>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fc22 	bl	8000d38 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f6:	e008      	b.n	800150a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fc1e 	bl	8000d38 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e15a      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_RCC_OscConfig+0x26c>)
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0f0      	beq.n	80014f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001516:	2001      	movs	r0, #1
 8001518:	f000 faa8 	bl	8001a6c <RCC_Delay>
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_RCC_OscConfig+0x274>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff fc08 	bl	8000d38 <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152a:	e00f      	b.n	800154c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152c:	f7ff fc04 	bl	8000d38 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d908      	bls.n	800154c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e140      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	42420000 	.word	0x42420000
 8001548:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154c:	4b9e      	ldr	r3, [pc, #632]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e9      	bne.n	800152c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80a6 	beq.w	80016b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156a:	4b97      	ldr	r3, [pc, #604]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10d      	bne.n	8001592 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b94      	ldr	r3, [pc, #592]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a93      	ldr	r2, [pc, #588]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]
 8001582:	4b91      	ldr	r3, [pc, #580]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158e:	2301      	movs	r3, #1
 8001590:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b8e      	ldr	r3, [pc, #568]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d118      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159e:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a8a      	ldr	r2, [pc, #552]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fbc5 	bl	8000d38 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b2:	f7ff fbc1 	bl	8000d38 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e0fd      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	4b81      	ldr	r3, [pc, #516]	; (80017cc <HAL_RCC_OscConfig+0x4f8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x312>
 80015d8:	4b7b      	ldr	r3, [pc, #492]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4a7a      	ldr	r2, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6213      	str	r3, [r2, #32]
 80015e4:	e02d      	b.n	8001642 <HAL_RCC_OscConfig+0x36e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x334>
 80015ee:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	4a75      	ldr	r2, [pc, #468]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6213      	str	r3, [r2, #32]
 80015fa:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a72      	ldr	r2, [pc, #456]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	e01c      	b.n	8001642 <HAL_RCC_OscConfig+0x36e>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x356>
 8001610:	4b6d      	ldr	r3, [pc, #436]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a6c      	ldr	r2, [pc, #432]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	4b6a      	ldr	r3, [pc, #424]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a69      	ldr	r2, [pc, #420]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	e00b      	b.n	8001642 <HAL_RCC_OscConfig+0x36e>
 800162a:	4b67      	ldr	r3, [pc, #412]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a66      	ldr	r2, [pc, #408]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d015      	beq.n	8001676 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164a:	f7ff fb75 	bl	8000d38 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001652:	f7ff fb71 	bl	8000d38 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001660:	4293      	cmp	r3, r2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e0ab      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	4b57      	ldr	r3, [pc, #348]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ee      	beq.n	8001652 <HAL_RCC_OscConfig+0x37e>
 8001674:	e014      	b.n	80016a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff fb5f 	bl	8000d38 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	e00a      	b.n	8001694 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7ff fb5b 	bl	8000d38 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e095      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	4b4c      	ldr	r3, [pc, #304]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ee      	bne.n	800167e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d105      	bne.n	80016b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a6:	4b48      	ldr	r3, [pc, #288]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a47      	ldr	r2, [pc, #284]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8081 	beq.w	80017be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d061      	beq.n	800178c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d146      	bne.n	800175e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_OscConfig+0x4fc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb2f 	bl	8000d38 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fb2b 	bl	8000d38 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e067      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d108      	bne.n	8001718 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	492d      	ldr	r1, [pc, #180]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001718:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a19      	ldr	r1, [r3, #32]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	430b      	orrs	r3, r1
 800172a:	4927      	ldr	r1, [pc, #156]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_RCC_OscConfig+0x4fc>)
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff faff 	bl	8000d38 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fafb 	bl	8000d38 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e037      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x46a>
 800175c:	e02f      	b.n	80017be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_RCC_OscConfig+0x4fc>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fae8 	bl	8000d38 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fae4 	bl	8000d38 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e020      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x498>
 800178a:	e018      	b.n	80017be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e013      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_RCC_OscConfig+0x4f4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40007000 	.word	0x40007000
 80017d0:	42420060 	.word	0x42420060

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d0      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4965      	ldr	r1, [pc, #404]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800183a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d040      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e073      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06b      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4936      	ldr	r1, [pc, #216]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff fa38 	bl	8000d38 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff fa34 	bl	8000d38 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e053      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d210      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0207 	bic.w	r2, r3, #7
 800190a:	4922      	ldr	r1, [pc, #136]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4601      	mov	r1, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	5cd3      	ldrb	r3, [r2, r3]
 8001976:	fa21 f303 	lsr.w	r3, r1, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1cc>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f996 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	08002568 	.word	0x08002568
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000004 	.word	0x20000004

080019a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b490      	push	{r4, r7}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019b0:	1d3c      	adds	r4, r7, #4
 80019b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_RCC_GetSysClockFreq+0xb4>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x40>
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x46>
 80019e6:	e02d      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ea:	623b      	str	r3, [r7, #32]
      break;
 80019ec:	e02d      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	0c9b      	lsrs	r3, r3, #18
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019fa:	4413      	add	r3, r2
 80019fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	0c5b      	lsrs	r3, r3, #17
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a26:	fb02 f203 	mul.w	r2, r2, r3
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
 8001a32:	e004      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	623b      	str	r3, [r7, #32]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a46:	623b      	str	r3, [r7, #32]
      break;
 8001a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3728      	adds	r7, #40	; 0x28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc90      	pop	{r4, r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	08002554 	.word	0x08002554
 8001a5c:	08002564 	.word	0x08002564
 8001a60:	40021000 	.word	0x40021000
 8001a64:	007a1200 	.word	0x007a1200
 8001a68:	003d0900 	.word	0x003d0900

08001a6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <RCC_Delay+0x34>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <RCC_Delay+0x38>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0a5b      	lsrs	r3, r3, #9
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a88:	bf00      	nop
  }
  while (Delay --);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e5a      	subs	r2, r3, #1
 8001a8e:	60fa      	str	r2, [r7, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f9      	bne.n	8001a88 <RCC_Delay+0x1c>
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	10624dd3 	.word	0x10624dd3

08001aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e053      	b.n	8001b62 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d106      	bne.n	8001ada <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7fe ffcf 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001af0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	ea42 0103 	orr.w	r1, r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	0c1a      	lsrs	r2, r3, #16
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f002 0204 	and.w	r2, r2, #4
 8001b40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69da      	ldr	r2, [r3, #28]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b088      	sub	sp, #32
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_SPI_Transmit+0x22>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e11e      	b.n	8001dca <HAL_SPI_Transmit+0x260>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b94:	f7ff f8d0 	bl	8000d38 <HAL_GetTick>
 8001b98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d002      	beq.n	8001bb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
 8001bac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bae:	e103      	b.n	8001db8 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d002      	beq.n	8001bbc <HAL_SPI_Transmit+0x52>
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bc0:	e0fa      	b.n	8001db8 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c08:	d107      	bne.n	8001c1a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c24:	2b40      	cmp	r3, #64	; 0x40
 8001c26:	d007      	beq.n	8001c38 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c40:	d14b      	bne.n	8001cda <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <HAL_SPI_Transmit+0xe6>
 8001c4a:	8afb      	ldrh	r3, [r7, #22]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d13e      	bne.n	8001cce <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	881a      	ldrh	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	1c9a      	adds	r2, r3, #2
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c74:	e02b      	b.n	8001cce <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d112      	bne.n	8001caa <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	881a      	ldrh	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	1c9a      	adds	r2, r3, #2
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ca8:	e011      	b.n	8001cce <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001caa:	f7ff f845 	bl	8000d38 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d803      	bhi.n	8001cc2 <HAL_SPI_Transmit+0x158>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d102      	bne.n	8001cc8 <HAL_SPI_Transmit+0x15e>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d102      	bne.n	8001cce <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ccc:	e074      	b.n	8001db8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ce      	bne.n	8001c76 <HAL_SPI_Transmit+0x10c>
 8001cd8:	e04c      	b.n	8001d74 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <HAL_SPI_Transmit+0x17e>
 8001ce2:	8afb      	ldrh	r3, [r7, #22]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d140      	bne.n	8001d6a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	330c      	adds	r3, #12
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d0e:	e02c      	b.n	8001d6a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d113      	bne.n	8001d46 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	330c      	adds	r3, #12
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	1c5a      	adds	r2, r3, #1
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d44:	e011      	b.n	8001d6a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d46:	f7fe fff7 	bl	8000d38 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d803      	bhi.n	8001d5e <HAL_SPI_Transmit+0x1f4>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d102      	bne.n	8001d64 <HAL_SPI_Transmit+0x1fa>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d68:	e026      	b.n	8001db8 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1cd      	bne.n	8001d10 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 fb91 	bl	80024a0 <SPI_EndRxTxTransaction>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	77fb      	strb	r3, [r7, #31]
 8001db4:	e000      	b.n	8001db8 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001db6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b088      	sub	sp, #32
 8001dd6:	af02      	add	r7, sp, #8
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dee:	d112      	bne.n	8001e16 <HAL_SPI_Receive+0x44>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10e      	bne.n	8001e16 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	4613      	mov	r3, r2
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f8e9 	bl	8001fe4 <HAL_SPI_TransmitReceive>
 8001e12:	4603      	mov	r3, r0
 8001e14:	e0e2      	b.n	8001fdc <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_SPI_Receive+0x52>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e0db      	b.n	8001fdc <HAL_SPI_Receive+0x20a>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e2c:	f7fe ff84 	bl	8000d38 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d002      	beq.n	8001e44 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e42:	e0c2      	b.n	8001fca <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_SPI_Receive+0x7e>
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e54:	e0b9      	b.n	8001fca <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	88fa      	ldrh	r2, [r7, #6]
 8001e74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9c:	d107      	bne.n	8001eae <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb8:	2b40      	cmp	r3, #64	; 0x40
 8001eba:	d007      	beq.n	8001ecc <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d162      	bne.n	8001f9a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ed4:	e02e      	b.n	8001f34 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d115      	bne.n	8001f10 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f103 020c 	add.w	r2, r3, #12
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f0e:	e011      	b.n	8001f34 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f10:	f7fe ff12 	bl	8000d38 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d803      	bhi.n	8001f28 <HAL_SPI_Receive+0x156>
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f26:	d102      	bne.n	8001f2e <HAL_SPI_Receive+0x15c>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d102      	bne.n	8001f34 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f32:	e04a      	b.n	8001fca <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1cb      	bne.n	8001ed6 <HAL_SPI_Receive+0x104>
 8001f3e:	e031      	b.n	8001fa4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d113      	bne.n	8001f76 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	b292      	uxth	r2, r2
 8001f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	1c9a      	adds	r2, r3, #2
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f74:	e011      	b.n	8001f9a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f76:	f7fe fedf 	bl	8000d38 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d803      	bhi.n	8001f8e <HAL_SPI_Receive+0x1bc>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d102      	bne.n	8001f94 <HAL_SPI_Receive+0x1c2>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f98:	e017      	b.n	8001fca <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1cd      	bne.n	8001f40 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 fa27 	bl	80023fc <SPI_EndRxTransaction>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	75fb      	strb	r3, [r7, #23]
 8001fc6:	e000      	b.n	8001fca <HAL_SPI_Receive+0x1f8>
  }

error :
 8001fc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_SPI_TransmitReceive+0x26>
 8002006:	2302      	movs	r3, #2
 8002008:	e18a      	b.n	8002320 <HAL_SPI_TransmitReceive+0x33c>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002012:	f7fe fe91 	bl	8000d38 <HAL_GetTick>
 8002016:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800201e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800202c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002030:	2b01      	cmp	r3, #1
 8002032:	d00f      	beq.n	8002054 <HAL_SPI_TransmitReceive+0x70>
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800203a:	d107      	bne.n	800204c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d103      	bne.n	800204c <HAL_SPI_TransmitReceive+0x68>
 8002044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002048:	2b04      	cmp	r3, #4
 800204a:	d003      	beq.n	8002054 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800204c:	2302      	movs	r3, #2
 800204e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002052:	e15b      	b.n	800230c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d005      	beq.n	8002066 <HAL_SPI_TransmitReceive+0x82>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_SPI_TransmitReceive+0x82>
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d103      	bne.n	800206e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800206c:	e14e      	b.n	800230c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b04      	cmp	r3, #4
 8002078:	d003      	beq.n	8002082 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2205      	movs	r2, #5
 800207e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	887a      	ldrh	r2, [r7, #2]
 80020aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b40      	cmp	r3, #64	; 0x40
 80020c4:	d007      	beq.n	80020d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020de:	d178      	bne.n	80021d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_SPI_TransmitReceive+0x10a>
 80020e8:	8b7b      	ldrh	r3, [r7, #26]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d166      	bne.n	80021bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	881a      	ldrh	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	1c9a      	adds	r2, r3, #2
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002112:	e053      	b.n	80021bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b02      	cmp	r3, #2
 8002120:	d11b      	bne.n	800215a <HAL_SPI_TransmitReceive+0x176>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d016      	beq.n	800215a <HAL_SPI_TransmitReceive+0x176>
 800212c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d113      	bne.n	800215a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	881a      	ldrh	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	1c9a      	adds	r2, r3, #2
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d119      	bne.n	800219c <HAL_SPI_TransmitReceive+0x1b8>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d014      	beq.n	800219c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	b292      	uxth	r2, r2
 800217e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	1c9a      	adds	r2, r3, #2
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218e:	b29b      	uxth	r3, r3
 8002190:	3b01      	subs	r3, #1
 8002192:	b29a      	uxth	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002198:	2301      	movs	r3, #1
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800219c:	f7fe fdcc 	bl	8000d38 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d807      	bhi.n	80021bc <HAL_SPI_TransmitReceive+0x1d8>
 80021ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b2:	d003      	beq.n	80021bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021ba:	e0a7      	b.n	800230c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1a6      	bne.n	8002114 <HAL_SPI_TransmitReceive+0x130>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1a1      	bne.n	8002114 <HAL_SPI_TransmitReceive+0x130>
 80021d0:	e07c      	b.n	80022cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_SPI_TransmitReceive+0x1fc>
 80021da:	8b7b      	ldrh	r3, [r7, #26]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d16b      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	7812      	ldrb	r2, [r2, #0]
 80021ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002206:	e057      	b.n	80022b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b02      	cmp	r3, #2
 8002214:	d11c      	bne.n	8002250 <HAL_SPI_TransmitReceive+0x26c>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_SPI_TransmitReceive+0x26c>
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	2b01      	cmp	r3, #1
 8002224:	d114      	bne.n	8002250 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	330c      	adds	r3, #12
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d119      	bne.n	8002292 <HAL_SPI_TransmitReceive+0x2ae>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d014      	beq.n	8002292 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800228e:	2301      	movs	r3, #1
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002292:	f7fe fd51 	bl	8000d38 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800229e:	429a      	cmp	r2, r3
 80022a0:	d803      	bhi.n	80022aa <HAL_SPI_TransmitReceive+0x2c6>
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d102      	bne.n	80022b0 <HAL_SPI_TransmitReceive+0x2cc>
 80022aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022b6:	e029      	b.n	800230c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1a2      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x224>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d19d      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 f8e5 	bl	80024a0 <SPI_EndRxTxTransaction>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80022e8:	e010      	b.n	800230c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	e000      	b.n	800230c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800230a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800231c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002320:	4618      	mov	r0, r3
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002338:	e04c      	b.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d048      	beq.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002342:	f7fe fcf9 	bl	8000d38 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d902      	bls.n	8002358 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d13d      	bne.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002366:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002370:	d111      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237a:	d004      	beq.n	8002386 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002384:	d107      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002394:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239e:	d10f      	bne.n	80023c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e00f      	b.n	80023f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4013      	ands	r3, r2
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d1a3      	bne.n	800233a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002410:	d111      	bne.n	8002436 <SPI_EndRxTransaction+0x3a>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800241a:	d004      	beq.n	8002426 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002424:	d107      	bne.n	8002436 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002434:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800243e:	d117      	bne.n	8002470 <SPI_EndRxTransaction+0x74>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002448:	d112      	bne.n	8002470 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2200      	movs	r2, #0
 8002452:	2101      	movs	r1, #1
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7ff ff67 	bl	8002328 <SPI_WaitFlagStateUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d01a      	beq.n	8002496 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	f043 0220 	orr.w	r2, r3, #32
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e013      	b.n	8002498 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2200      	movs	r2, #0
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff ff54 	bl	8002328 <SPI_WaitFlagStateUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248a:	f043 0220 	orr.w	r2, r3, #32
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e000      	b.n	8002498 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2200      	movs	r2, #0
 80024b4:	2180      	movs	r1, #128	; 0x80
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff ff36 	bl	8002328 <SPI_WaitFlagStateUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e000      	b.n	80024d4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <__libc_init_array>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	2500      	movs	r5, #0
 80024e0:	4e0c      	ldr	r6, [pc, #48]	; (8002514 <__libc_init_array+0x38>)
 80024e2:	4c0d      	ldr	r4, [pc, #52]	; (8002518 <__libc_init_array+0x3c>)
 80024e4:	1ba4      	subs	r4, r4, r6
 80024e6:	10a4      	asrs	r4, r4, #2
 80024e8:	42a5      	cmp	r5, r4
 80024ea:	d109      	bne.n	8002500 <__libc_init_array+0x24>
 80024ec:	f000 f822 	bl	8002534 <_init>
 80024f0:	2500      	movs	r5, #0
 80024f2:	4e0a      	ldr	r6, [pc, #40]	; (800251c <__libc_init_array+0x40>)
 80024f4:	4c0a      	ldr	r4, [pc, #40]	; (8002520 <__libc_init_array+0x44>)
 80024f6:	1ba4      	subs	r4, r4, r6
 80024f8:	10a4      	asrs	r4, r4, #2
 80024fa:	42a5      	cmp	r5, r4
 80024fc:	d105      	bne.n	800250a <__libc_init_array+0x2e>
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002504:	4798      	blx	r3
 8002506:	3501      	adds	r5, #1
 8002508:	e7ee      	b.n	80024e8 <__libc_init_array+0xc>
 800250a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800250e:	4798      	blx	r3
 8002510:	3501      	adds	r5, #1
 8002512:	e7f2      	b.n	80024fa <__libc_init_array+0x1e>
 8002514:	08002578 	.word	0x08002578
 8002518:	08002578 	.word	0x08002578
 800251c:	08002578 	.word	0x08002578
 8002520:	0800257c 	.word	0x0800257c

08002524 <memset>:
 8002524:	4603      	mov	r3, r0
 8002526:	4402      	add	r2, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <_init>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr

08002540 <_fini>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	bf00      	nop
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr
