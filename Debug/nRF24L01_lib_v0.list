
nRF24L01_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003440  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003570  08003570  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08003570  08003570  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003570  08003570  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003574  08003574  00013574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000020  08003598  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003598  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4cf  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d5c  00000000  00000000  0002c518  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc0  00000000  00000000  0002e278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000140ae  00000000  00000000  0002fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009711  00000000  00000000  00043d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e1dd  00000000  00000000  0004d4af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb68c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000bb708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08003534 	.word	0x08003534

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08003534 	.word	0x08003534

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b4c      	ldr	r3, [pc, #304]	; (8000294 <MX_GPIO_Init+0x148>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a4b      	ldr	r2, [pc, #300]	; (8000294 <MX_GPIO_Init+0x148>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b49      	ldr	r3, [pc, #292]	; (8000294 <MX_GPIO_Init+0x148>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b46      	ldr	r3, [pc, #280]	; (8000294 <MX_GPIO_Init+0x148>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a45      	ldr	r2, [pc, #276]	; (8000294 <MX_GPIO_Init+0x148>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b43      	ldr	r3, [pc, #268]	; (8000294 <MX_GPIO_Init+0x148>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b40      	ldr	r3, [pc, #256]	; (8000294 <MX_GPIO_Init+0x148>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a3f      	ldr	r2, [pc, #252]	; (8000294 <MX_GPIO_Init+0x148>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b3d      	ldr	r3, [pc, #244]	; (8000294 <MX_GPIO_Init+0x148>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b3a      	ldr	r3, [pc, #232]	; (8000294 <MX_GPIO_Init+0x148>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a39      	ldr	r2, [pc, #228]	; (8000294 <MX_GPIO_Init+0x148>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b37      	ldr	r3, [pc, #220]	; (8000294 <MX_GPIO_Init+0x148>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2180      	movs	r1, #128	; 0x80
 80001c4:	4834      	ldr	r0, [pc, #208]	; (8000298 <MX_GPIO_Init+0x14c>)
 80001c6:	f001 fe09 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2140      	movs	r1, #64	; 0x40
 80001ce:	4833      	ldr	r0, [pc, #204]	; (800029c <MX_GPIO_Init+0x150>)
 80001d0:	f001 fe04 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001da:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <MX_GPIO_Init+0x154>)
 80001dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001de:	2300      	movs	r3, #0
 80001e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001e2:	f107 0310 	add.w	r3, r7, #16
 80001e6:	4619      	mov	r1, r3
 80001e8:	482b      	ldr	r0, [pc, #172]	; (8000298 <MX_GPIO_Init+0x14c>)
 80001ea:	f001 fc9d 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001ee:	f641 737f 	movw	r3, #8063	; 0x1f7f
 80001f2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001f4:	2303      	movs	r3, #3
 80001f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	4826      	ldr	r0, [pc, #152]	; (8000298 <MX_GPIO_Init+0x14c>)
 8000200:	f001 fc92 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000204:	f649 731f 	movw	r3, #40735	; 0x9f1f
 8000208:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800020a:	2303      	movs	r3, #3
 800020c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	4619      	mov	r1, r3
 8000214:	4823      	ldr	r0, [pc, #140]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000216:	f001 fc87 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800021a:	f64f 73b7 	movw	r3, #65463	; 0xffb7
 800021e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	481c      	ldr	r0, [pc, #112]	; (800029c <MX_GPIO_Init+0x150>)
 800022c:	f001 fc7c 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000230:	2380      	movs	r3, #128	; 0x80
 8000232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000234:	2301      	movs	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000238:	2300      	movs	r3, #0
 800023a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023c:	2302      	movs	r3, #2
 800023e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	4814      	ldr	r0, [pc, #80]	; (8000298 <MX_GPIO_Init+0x14c>)
 8000248:	f001 fc6e 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800024c:	2304      	movs	r3, #4
 800024e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000250:	2303      	movs	r3, #3
 8000252:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000254:	f107 0310 	add.w	r3, r7, #16
 8000258:	4619      	mov	r1, r3
 800025a:	4813      	ldr	r0, [pc, #76]	; (80002a8 <MX_GPIO_Init+0x15c>)
 800025c:	f001 fc64 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000260:	2340      	movs	r3, #64	; 0x40
 8000262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000264:	2301      	movs	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	2302      	movs	r3, #2
 800026e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000270:	f107 0310 	add.w	r3, r7, #16
 8000274:	4619      	mov	r1, r3
 8000276:	4809      	ldr	r0, [pc, #36]	; (800029c <MX_GPIO_Init+0x150>)
 8000278:	f001 fc56 	bl	8001b28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	2100      	movs	r1, #0
 8000280:	2028      	movs	r0, #40	; 0x28
 8000282:	f001 fc1a 	bl	8001aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000286:	2028      	movs	r0, #40	; 0x28
 8000288:	f001 fc33 	bl	8001af2 <HAL_NVIC_EnableIRQ>

}
 800028c:	bf00      	nop
 800028e:	3720      	adds	r7, #32
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	40011000 	.word	0x40011000
 800029c:	40010c00 	.word	0x40010c00
 80002a0:	10110000 	.word	0x10110000
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40011400 	.word	0x40011400

080002ac <statusStrcut_Init>:
static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
		TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
		uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
		uint16_t HAL_GPIO_Pin_CE);

static void statusStrcut_Init(nrfStruct_t *nrfStruct) {
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	nrfStruct->statusStruct.dataReadIrq = 0;
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002ba:	f36f 0300 	bfc	r3, #0, #1
 80002be:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.dataSendIrq = 0;
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002c8:	f36f 0341 	bfc	r3, #1, #1
 80002cc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.maxRetr = 0;
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002d6:	f36f 0382 	bfc	r3, #2, #1
 80002da:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002e4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80002e8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.txFull = 0;
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002f2:	f36f 1386 	bfc	r3, #6, #1
 80002f6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	nrfStruct->statusStruct.packetsLost = 0;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2200      	movs	r2, #0
 80002fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	nrfStruct->statusStruct.packetsRetr = 0;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2200      	movs	r2, #0
 8000306:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <settingStruct_Init>:

static void settingStruct_Init(nrfStruct_t *nrfStruct) {
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	/* Init settigns struct */
	nrfStruct->setStruct.rxMode = 0;			//set as receiver
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	7813      	ldrb	r3, [r2, #0]
 8000320:	f36f 0300 	bfc	r3, #0, #1
 8000324:	7013      	strb	r3, [r2, #0]
	nrfStruct->setStruct.channel = 0x02; 				//set channel np. 0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2202      	movs	r2, #2
 800032a:	705a      	strb	r2, [r3, #1]
	nrfStruct->setStruct.dataRate = RF_DataRate_2M;  //lowest data rate
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2201      	movs	r2, #1
 8000330:	709a      	strb	r2, [r3, #2]
	nrfStruct->setStruct.powerRF = RF_PWR_0dBm;		//-12dBm power
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2203      	movs	r2, #3
 8000336:	70da      	strb	r2, [r3, #3]

	nrfStruct->setStruct.ard = 0;		//auto retr. delay 250us
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2200      	movs	r2, #0
 800033c:	711a      	strb	r2, [r3, #4]
	nrfStruct->setStruct.arc = 3;		//auto retr. counter
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2203      	movs	r2, #3
 8000342:	715a      	strb	r2, [r3, #5]

	nrfStruct->setStruct.enableCRC = 1;
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	7bd3      	ldrb	r3, [r2, #15]
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.codingCRC = 0;
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	7bd3      	ldrb	r3, [r2, #15]
 8000352:	f36f 0341 	bfc	r3, #1, #1
 8000356:	73d3      	strb	r3, [r2, #15]

	nrfStruct->setStruct.enableTxIrq = 0;
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	7bd3      	ldrb	r3, [r2, #15]
 800035c:	f36f 0382 	bfc	r3, #2, #1
 8000360:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableRxIrq = 0;
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	7bd3      	ldrb	r3, [r2, #15]
 8000366:	f36f 03c3 	bfc	r3, #3, #1
 800036a:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableMaxRtIrq = 0;
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7bd3      	ldrb	r3, [r2, #15]
 8000370:	f36f 1304 	bfc	r3, #4, #1
 8000374:	73d3      	strb	r3, [r2, #15]

	/* Pipe Enable - defult pipe 0 enable only */
	nrfStruct->setStruct.pipeEn = DF_RXADDR;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2203      	movs	r2, #3
 800037a:	719a      	strb	r2, [r3, #6]
	nrfStruct->setStruct.pipeACK = DF_EN_AA;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	223f      	movs	r2, #63	; 0x3f
 8000380:	71da      	strb	r2, [r3, #7]
	nrfStruct->setStruct.pipeDPL = DF_DYNPD;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2200      	movs	r2, #0
 8000386:	721a      	strb	r2, [r3, #8]

	/* Pipe RX Payload Lenght  */
	uint8_t i;
	for (i = 0; i < 6; i++) {
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e007      	b.n	800039e <settingStruct_Init+0x8a>
		nrfStruct->setStruct.pipePayLen[i] = DF_RX_PW_P0;
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	4413      	add	r3, r2
 8000394:	2200      	movs	r2, #0
 8000396:	725a      	strb	r2, [r3, #9]
	for (i = 0; i < 6; i++) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b05      	cmp	r3, #5
 80003a2:	d9f4      	bls.n	800038e <settingStruct_Init+0x7a>
	}

	nrfStruct->setStruct.enableDPL = 0;
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	7bd3      	ldrb	r3, [r2, #15]
 80003a8:	f36f 1345 	bfc	r3, #5, #1
 80003ac:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableAckPay = 0;
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	7bd3      	ldrb	r3, [r2, #15]
 80003b2:	f36f 1386 	bfc	r3, #6, #1
 80003b6:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableDynACK = 0;	//enable NO_ACK command
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	7bd3      	ldrb	r3, [r2, #15]
 80003bc:	f36f 13c7 	bfc	r3, #7, #1
 80003c0:	73d3      	strb	r3, [r2, #15]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <addressStruct_Init>:

static void addressStruct_Init(nrfStruct_t *nrfStruct) {
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	/* Init address struct */
	nrfStruct->addrStruct.addrWidth = longWidth;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2203      	movs	r2, #3
 80003d8:	741a      	strb	r2, [r3, #16]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80003da:	2300      	movs	r3, #0
 80003dc:	73fb      	strb	r3, [r7, #15]
 80003de:	e007      	b.n	80003f0 <addressStruct_Init+0x24>
		nrfStruct->addrStruct.txAddr[i] = DF_TX_ADDR_0;
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	22e7      	movs	r2, #231	; 0xe7
 80003e8:	745a      	strb	r2, [r3, #17]
	for (i = 0; i < 5; i++) {
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d9f4      	bls.n	80003e0 <addressStruct_Init+0x14>
	}
	for (i = 0; i < 5; ++i) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	73fb      	strb	r3, [r7, #15]
 80003fa:	e007      	b.n	800040c <addressStruct_Init+0x40>
		nrfStruct->addrStruct.rxAddr0[i] = DF_RX_ADDR_P0_0;
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	22e7      	movs	r2, #231	; 0xe7
 8000404:	759a      	strb	r2, [r3, #22]
	for (i = 0; i < 5; ++i) {
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	3301      	adds	r3, #1
 800040a:	73fb      	strb	r3, [r7, #15]
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d9f4      	bls.n	80003fc <addressStruct_Init+0x30>
	}
	for (i = 0; i < 5; ++i) {
 8000412:	2300      	movs	r3, #0
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e007      	b.n	8000428 <addressStruct_Init+0x5c>
		nrfStruct->addrStruct.rxAddr1[i] = DF_RX_ADDR_P1_0;
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	22c2      	movs	r2, #194	; 0xc2
 8000420:	76da      	strb	r2, [r3, #27]
	for (i = 0; i < 5; ++i) {
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	3301      	adds	r3, #1
 8000426:	73fb      	strb	r3, [r7, #15]
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	2b04      	cmp	r3, #4
 800042c:	d9f4      	bls.n	8000418 <addressStruct_Init+0x4c>
	}
	nrfStruct->addrStruct.rxAddr2 = DF_RX_ADDR_P2;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	22c3      	movs	r2, #195	; 0xc3
 8000432:	f883 2020 	strb.w	r2, [r3, #32]
	nrfStruct->addrStruct.rxAddr3 = DF_RX_ADDR_P3;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	22c4      	movs	r2, #196	; 0xc4
 800043a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	nrfStruct->addrStruct.rxAddr4 = DF_RX_ADDR_P4;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	22c5      	movs	r2, #197	; 0xc5
 8000442:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	nrfStruct->addrStruct.rxAddr5 = DF_RX_ADDR_P5;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	22c6      	movs	r2, #198	; 0xc6
 800044a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <fifoStruct_Init>:

static void fifoStruct_Init(nrfStruct_t *nrfStruct) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	/* Init fifo struct */
	nrfStruct->fifoStruct.txReUse = 0;
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000466:	f36f 0300 	bfc	r3, #0, #1
 800046a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

	nrfStruct->fifoStruct.rxRead = 0;
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000474:	f36f 0341 	bfc	r3, #1, #1
 8000478:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.rxFull = 0;
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000482:	f36f 0382 	bfc	r3, #2, #1
 8000486:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.rxEmpty = 1;
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000490:	f043 0308 	orr.w	r3, r3, #8
 8000494:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

	nrfStruct->fifoStruct.txSend = 0;
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800049e:	f36f 1304 	bfc	r3, #4, #1
 80004a2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.txFull = 0;
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80004ac:	f36f 1345 	bfc	r3, #5, #1
 80004b0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.txEmpty = 1;
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80004ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <hardware_Init>:

static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
		TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
		uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
		uint16_t HAL_GPIO_Pin_CE) {
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
	/* Put pointer of SPI and TIM structures to nRF alias */
	nrfStruct->nRFspi = HAL_SPIx;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	629a      	str	r2, [r3, #40]	; 0x28
	nrfStruct->nRFtim = HAL_TIMx;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Put GPIO port pointer and pin number to structure's alias */
	nrfStruct->nRFportCSN = HAL_GPIO_CSN;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	631a      	str	r2, [r3, #48]	; 0x30
	nrfStruct->nRFpinCSN = HAL_GPIO_Pin_CSN;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	8b3a      	ldrh	r2, [r7, #24]
 80004f0:	869a      	strh	r2, [r3, #52]	; 0x34
	nrfStruct->nRFportCE = HAL_GPIO_CE;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	69fa      	ldr	r2, [r7, #28]
 80004f6:	639a      	str	r2, [r3, #56]	; 0x38
	nrfStruct->nRFpinCE = HAL_GPIO_Pin_CE;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	8c3a      	ldrh	r2, [r7, #32]
 80004fc:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <delayUs>:

/* Micro sencods delay - necessary to SPI transmittion  */
void delayUs(nrfStruct_t *nrfStruct, uint16_t time) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]

	__HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0);	//Set star value as 0
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) < time)
 800051e:	bf00      	nop
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000528:	887b      	ldrh	r3, [r7, #2]
 800052a:	429a      	cmp	r2, r3
 800052c:	d3f8      	bcc.n	8000520 <delayUs+0x18>
		;
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <csnLow>:

/* CE snd CSN control funtions's */
void csnLow(nrfStruct_t *nrfStruct) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	f001 fc46 	bl	8001ddc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <csnHigh>:
void csnHigh(nrfStruct_t *nrfStruct) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	f001 fc36 	bl	8001ddc <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <ceHigh>:
void ceLow(nrfStruct_t *nrfStruct) {
	HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
			GPIO_PIN_RESET);
}
void ceHigh(nrfStruct_t *nrfStruct) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000588:	2201      	movs	r2, #1
 800058a:	4619      	mov	r1, r3
 800058c:	f001 fc26 	bl	8001ddc <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <readReg>:

/* Elementary functions base on nRf24L01+ SPI commands */
/* Read and write registers funtions's */
uint8_t readReg(nrfStruct_t *nrfStruct, uint8_t addr) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_REGISTER | addr;
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	uint8_t *pCmd = &cmd;
 80005a8:	f107 030f 	add.w	r3, r7, #15
 80005ac:	617b      	str	r3, [r7, #20]
	uint8_t *pReg = &reg;
 80005ae:	f107 030e 	add.w	r3, r7, #14
 80005b2:	613b      	str	r3, [r7, #16]

	csnLow(nrfStruct);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ffbf 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005be:	230a      	movs	r3, #10
 80005c0:	2201      	movs	r2, #1
 80005c2:	6979      	ldr	r1, [r7, #20]
 80005c4:	f002 f88f 	bl	80026e6 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 80005c8:	2132      	movs	r1, #50	; 0x32
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ff9c 	bl	8000508 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), pReg, sizeof(reg), SPI_TIMEOUT);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005d4:	230a      	movs	r3, #10
 80005d6:	2201      	movs	r2, #1
 80005d8:	6939      	ldr	r1, [r7, #16]
 80005da:	f002 f9b8 	bl	800294e <HAL_SPI_Receive>

	csnHigh(nrfStruct);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ffba 	bl	8000558 <csnHigh>
	return reg;
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <writeReg>:

void writeReg(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t val) {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b084      	sub	sp, #16
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	4613      	mov	r3, r2
 80005fc:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd = W_REGISTER | addr;
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	f043 0320 	orr.w	r3, r3, #32
 8000604:	b2db      	uxtb	r3, r3
 8000606:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000608:	f107 030b 	add.w	r3, r7, #11
 800060c:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ff92 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000618:	230a      	movs	r3, #10
 800061a:	2201      	movs	r2, #1
 800061c:	68f9      	ldr	r1, [r7, #12]
 800061e:	f002 f862 	bl	80026e6 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000622:	2132      	movs	r1, #50	; 0x32
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ff6f 	bl	8000508 <delayUs>
	HAL_SPI_Transmit((nrfStruct->nRFspi), &val, sizeof(val), SPI_TIMEOUT);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800062e:	1cb9      	adds	r1, r7, #2
 8000630:	230a      	movs	r3, #10
 8000632:	2201      	movs	r2, #1
 8000634:	f002 f857 	bl	80026e6 <HAL_SPI_Transmit>

	csnHigh(nrfStruct);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ff8d 	bl	8000558 <csnHigh>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <writeRegExt>:

	csnHigh(nrfStruct);
}

void writeRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
		size_t bufSize) {
 8000646:	b580      	push	{r7, lr}
 8000648:	b086      	sub	sp, #24
 800064a:	af00      	add	r7, sp, #0
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = W_REGISTER | addr;
 8000656:	7afb      	ldrb	r3, [r7, #11]
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	b2db      	uxtb	r3, r3
 800065e:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 8000660:	f107 0313 	add.w	r3, r7, #19
 8000664:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f7ff ff66 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000670:	230a      	movs	r3, #10
 8000672:	2201      	movs	r2, #1
 8000674:	6979      	ldr	r1, [r7, #20]
 8000676:	f002 f836 	bl	80026e6 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 800067a:	2132      	movs	r1, #50	; 0x32
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f7ff ff43 	bl	8000508 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b29a      	uxth	r2, r3
 800068a:	230a      	movs	r3, #10
 800068c:	6879      	ldr	r1, [r7, #4]
 800068e:	f002 f95e 	bl	800294e <HAL_SPI_Receive>
	SPI_TIMEOUT);

	csnHigh(nrfStruct);
 8000692:	68f8      	ldr	r0, [r7, #12]
 8000694:	f7ff ff60 	bl	8000558 <csnHigh>
}
 8000698:	bf00      	nop
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <readRxPayload>:

/* Payload's functions */
uint8_t readRxPayload(nrfStruct_t *nrfStruct, uint8_t *buf, size_t bufSize) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
	if (bufSize < 1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <readRxPayload+0x16>
		return ERR_CODE;
 80006b2:	23ff      	movs	r3, #255	; 0xff
 80006b4:	e023      	b.n	80006fe <readRxPayload+0x5e>
	if (bufSize > 32)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b20      	cmp	r3, #32
 80006ba:	d901      	bls.n	80006c0 <readRxPayload+0x20>
		bufSize = 32;
 80006bc:	2320      	movs	r3, #32
 80006be:	607b      	str	r3, [r7, #4]

	uint8_t cmd = R_RX_PAYLOAD;	//set command mask
 80006c0:	2361      	movs	r3, #97	; 0x61
 80006c2:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 80006c4:	f107 0313 	add.w	r3, r7, #19
 80006c8:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 80006ca:	68f8      	ldr	r0, [r7, #12]
 80006cc:	f7ff ff34 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80006d4:	230a      	movs	r3, #10
 80006d6:	2201      	movs	r2, #1
 80006d8:	6979      	ldr	r1, [r7, #20]
 80006da:	f002 f804 	bl	80026e6 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 80006de:	2132      	movs	r1, #50	; 0x32
 80006e0:	68f8      	ldr	r0, [r7, #12]
 80006e2:	f7ff ff11 	bl	8000508 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize, SPI_TIMEOUT);//read payload
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	230a      	movs	r3, #10
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	f002 f92c 	bl	800294e <HAL_SPI_Receive>

	csnHigh(nrfStruct);
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff ff2e 	bl	8000558 <csnHigh>
	return OK_CODE;
 80006fc:	2301      	movs	r3, #1
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <writeTxPayloadAck>:

	csnHigh(nrfStruct);
	return width;
}

uint8_t writeTxPayloadAck(nrfStruct_t *nrfStruct, uint8_t *buf, size_t bufSize) {
 8000706:	b580      	push	{r7, lr}
 8000708:	b086      	sub	sp, #24
 800070a:	af00      	add	r7, sp, #0
 800070c:	60f8      	str	r0, [r7, #12]
 800070e:	60b9      	str	r1, [r7, #8]
 8000710:	607a      	str	r2, [r7, #4]
	if (bufSize < 1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d101      	bne.n	800071c <writeTxPayloadAck+0x16>
		return ERR_CODE;
 8000718:	23ff      	movs	r3, #255	; 0xff
 800071a:	e023      	b.n	8000764 <writeTxPayloadAck+0x5e>
	if (bufSize > 32)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b20      	cmp	r3, #32
 8000720:	d901      	bls.n	8000726 <writeTxPayloadAck+0x20>
		bufSize = 32;
 8000722:	2320      	movs	r3, #32
 8000724:	607b      	str	r3, [r7, #4]

	uint8_t cmd = W_ACK_PAYLOAD;	//set command mask
 8000726:	23a8      	movs	r3, #168	; 0xa8
 8000728:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 800072a:	f107 0313 	add.w	r3, r7, #19
 800072e:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ff01 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800073a:	230a      	movs	r3, #10
 800073c:	2201      	movs	r2, #1
 800073e:	6979      	ldr	r1, [r7, #20]
 8000740:	f001 ffd1 	bl	80026e6 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000744:	2132      	movs	r1, #50	; 0x32
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f7ff fede 	bl	8000508 <delayUs>
	HAL_SPI_Transmit((nrfStruct->nRFspi), buf, bufSize, SPI_TIMEOUT);//read payload
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b29a      	uxth	r2, r3
 8000754:	230a      	movs	r3, #10
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	f001 ffc5 	bl	80026e6 <HAL_SPI_Transmit>

	csnHigh(nrfStruct);
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	f7ff fefb 	bl	8000558 <csnHigh>
	return OK_CODE;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <flushTx>:

	csnHigh(nrfStruct);
	return OK_CODE;
}
/* Flush functions */
uint8_t flushTx(nrfStruct_t *nrfStruct) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FLUSH_TX;	//set command mask
 8000774:	23e1      	movs	r3, #225	; 0xe1
 8000776:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000778:	f107 030b 	add.w	r3, r7, #11
 800077c:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff feda 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000788:	230a      	movs	r3, #10
 800078a:	2201      	movs	r2, #1
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	f001 ffaa 	bl	80026e6 <HAL_SPI_Transmit>
	csnHigh(nrfStruct);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fee0 	bl	8000558 <csnHigh>

	if (!readBit(nrfStruct, FIFO_STATUS, bit4)) {	//check FIFO status
 8000798:	2204      	movs	r2, #4
 800079a:	2117      	movs	r1, #23
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 f863 	bl	8000868 <readBit>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d108      	bne.n	80007ba <flushTx+0x4e>
		nrfStruct->fifoStruct.txEmpty = 0;
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80007ae:	f36f 1386 	bfc	r3, #6, #1
 80007b2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return ERR_CODE;
 80007b6:	23ff      	movs	r3, #255	; 0xff
 80007b8:	e007      	b.n	80007ca <flushTx+0x5e>
	}

	nrfStruct->fifoStruct.txEmpty = 1;
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80007c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return OK_CODE;
 80007c8:	2301      	movs	r3, #1
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <flushRx>:
uint8_t flushRx(nrfStruct_t *nrfStruct) {
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b084      	sub	sp, #16
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FLUSH_RX;	//set command mask
 80007da:	23e0      	movs	r3, #224	; 0xe0
 80007dc:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 80007de:	f107 030b 	add.w	r3, r7, #11
 80007e2:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff fea7 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007ee:	230a      	movs	r3, #10
 80007f0:	2201      	movs	r2, #1
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	f001 ff77 	bl	80026e6 <HAL_SPI_Transmit>
	csnHigh(nrfStruct);
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff fead 	bl	8000558 <csnHigh>

	if (!readBit(nrfStruct, FIFO_STATUS, bit0)) {	//check FIFO status
 80007fe:	2200      	movs	r2, #0
 8000800:	2117      	movs	r1, #23
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f830 	bl	8000868 <readBit>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d108      	bne.n	8000820 <flushRx+0x4e>
		nrfStruct->fifoStruct.rxEmpty = 0;
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000814:	f36f 03c3 	bfc	r3, #3, #1
 8000818:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return ERR_CODE;
 800081c:	23ff      	movs	r3, #255	; 0xff
 800081e:	e007      	b.n	8000830 <flushRx+0x5e>
	}

	nrfStruct->fifoStruct.rxEmpty = 1;
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000826:	f043 0308 	orr.w	r3, r3, #8
 800082a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return OK_CODE;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <pwrUp>:

}


/* Power control */
void pwrUp(nrfStruct_t *nrfStruct) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = readReg(nrfStruct, CONFIG);
 8000840:	2100      	movs	r1, #0
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff fea8 	bl	8000598 <readReg>
 8000848:	4603      	mov	r3, r0
 800084a:	73fb      	strb	r3, [r7, #15]
	tmp |= (1 << 1);
 800084c:	7bfb      	ldrb	r3, [r7, #15]
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, CONFIG, tmp);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	461a      	mov	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff fec7 	bl	80005ee <writeReg>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <readBit>:
	uint8_t tmp = readReg(nrfStruct, CONFIG);
	tmp &= (0 << 1);		//zmieniono OR na AND
	writeReg(nrfStruct, CONFIG, tmp);
}

uint8_t readBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
 8000874:	4613      	mov	r3, r2
 8000876:	70bb      	strb	r3, [r7, #2]
	uint8_t reg = readReg(nrfStruct, addr);
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	4619      	mov	r1, r3
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff fe8b 	bl	8000598 <readReg>
 8000882:	4603      	mov	r3, r0
 8000884:	73fb      	strb	r3, [r7, #15]
	return ((reg >> bit) & 0x01);
 8000886:	7bfa      	ldrb	r2, [r7, #15]
 8000888:	78bb      	ldrb	r3, [r7, #2]
 800088a:	fa42 f303 	asr.w	r3, r2, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	f003 0301 	and.w	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <resetBit>:

void resetBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	460b      	mov	r3, r1
 80008a8:	70fb      	strb	r3, [r7, #3]
 80008aa:	4613      	mov	r3, r2
 80008ac:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = readReg(nrfStruct, addr);
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	4619      	mov	r1, r3
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f7ff fe70 	bl	8000598 <readReg>
 80008b8:	4603      	mov	r3, r0
 80008ba:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1 << bit);		//zmieniono OR na AND
 80008bc:	78bb      	ldrb	r3, [r7, #2]
 80008be:	2201      	movs	r2, #1
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ce:	4013      	ands	r3, r2
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, addr, tmp);
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	4619      	mov	r1, r3
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff fe87 	bl	80005ee <writeReg>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <setBit>:

void setBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
 80008f4:	4613      	mov	r3, r2
 80008f6:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = readReg(nrfStruct, addr);
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	4619      	mov	r1, r3
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fe4b 	bl	8000598 <readReg>
 8000902:	4603      	mov	r3, r0
 8000904:	73fb      	strb	r3, [r7, #15]
	tmp |= (1 << bit);
 8000906:	78bb      	ldrb	r3, [r7, #2]
 8000908:	2201      	movs	r2, #1
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	b25a      	sxtb	r2, r3
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000914:	4313      	orrs	r3, r2
 8000916:	b25b      	sxtb	r3, r3
 8000918:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, addr, tmp);
 800091a:	7bfa      	ldrb	r2, [r7, #15]
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	4619      	mov	r1, r3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fe64 	bl	80005ee <writeReg>
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <nRF_Init>:


/* Main init function */
nrfStruct_t* nRF_Init(SPI_HandleTypeDef *HAL_SPIx, TIM_HandleTypeDef *HAL_TIMx,
		GPIO_TypeDef *HAL_GPIO_CSN, uint16_t HAL_GPIO_Pin_CSN,
		GPIO_TypeDef *HAL_GPIO_CE, uint16_t HAL_GPIO_Pin_CE) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	; 0x28
 8000934:	af04      	add	r7, sp, #16
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	807b      	strh	r3, [r7, #2]
	/* Create main nRF structure	 */
	static nrfStruct_t nRFMainStruct;
	static nrfStruct_t *pnRFMainStruct = &nRFMainStruct;

	/* Init settigns struct */
	statusStrcut_Init(pnRFMainStruct);
 800093e:	4b6a      	ldr	r3, [pc, #424]	; (8000ae8 <nRF_Init+0x1b8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fcb2 	bl	80002ac <statusStrcut_Init>
	settingStruct_Init(pnRFMainStruct);
 8000948:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <nRF_Init+0x1b8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fce1 	bl	8000314 <settingStruct_Init>
	addressStruct_Init(pnRFMainStruct);
 8000952:	4b65      	ldr	r3, [pc, #404]	; (8000ae8 <nRF_Init+0x1b8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fd38 	bl	80003cc <addressStruct_Init>
	fifoStruct_Init(pnRFMainStruct);
 800095c:	4b62      	ldr	r3, [pc, #392]	; (8000ae8 <nRF_Init+0x1b8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fd79 	bl	8000458 <fifoStruct_Init>
	hardware_Init(pnRFMainStruct, HAL_SPIx, HAL_TIMx, HAL_GPIO_CSN,
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <nRF_Init+0x1b8>)
 8000968:	6818      	ldr	r0, [r3, #0]
 800096a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800096c:	9302      	str	r3, [sp, #8]
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	68f9      	ldr	r1, [r7, #12]
 800097c:	f7ff fda6 	bl	80004cc <hardware_Init>
			HAL_GPIO_Pin_CSN, HAL_GPIO_CE, HAL_GPIO_Pin_CE);

//	pwrDown(pnRFMainStruct);
	/* Turn on modul */
	pwrUp(pnRFMainStruct);
 8000980:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <nRF_Init+0x1b8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff57 	bl	8000838 <pwrUp>

	/* Set default settings */
	setBit(pnRFMainStruct, CONFIG, PRIM_RX);
 800098a:	4b57      	ldr	r3, [pc, #348]	; (8000ae8 <nRF_Init+0x1b8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ffa8 	bl	80008e8 <setBit>
	writeReg(pnRFMainStruct, EN_AA, (pnRFMainStruct->setStruct.pipeACK));
 8000998:	4b53      	ldr	r3, [pc, #332]	; (8000ae8 <nRF_Init+0x1b8>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	4b52      	ldr	r3, [pc, #328]	; (8000ae8 <nRF_Init+0x1b8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	79db      	ldrb	r3, [r3, #7]
 80009a2:	461a      	mov	r2, r3
 80009a4:	2101      	movs	r1, #1
 80009a6:	f7ff fe22 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, EN_RXADDR, (pnRFMainStruct->setStruct.pipeEn));
 80009aa:	4b4f      	ldr	r3, [pc, #316]	; (8000ae8 <nRF_Init+0x1b8>)
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <nRF_Init+0x1b8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	799b      	ldrb	r3, [r3, #6]
 80009b4:	461a      	mov	r2, r3
 80009b6:	2102      	movs	r1, #2
 80009b8:	f7ff fe19 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, SETUP_AW, DF_SETUP_AW);
 80009bc:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <nRF_Init+0x1b8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2203      	movs	r2, #3
 80009c2:	2103      	movs	r1, #3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe12 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, SETUP_RETR, DF_SETUP_RETR);
 80009ca:	4b47      	ldr	r3, [pc, #284]	; (8000ae8 <nRF_Init+0x1b8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2203      	movs	r2, #3
 80009d0:	2104      	movs	r1, #4
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fe0b 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RF_CH, DF_RF_CH);
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <nRF_Init+0x1b8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2202      	movs	r2, #2
 80009de:	2105      	movs	r1, #5
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fe04 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RF_SETUP, DF_RF_SETUP);
 80009e6:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <nRF_Init+0x1b8>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	220e      	movs	r2, #14
 80009ec:	2106      	movs	r1, #6
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fdfd 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, STATUS, DF_STATUS);
 80009f4:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <nRF_Init+0x1b8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	220e      	movs	r2, #14
 80009fa:	2107      	movs	r1, #7
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fdf6 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, DYNPD, (pnRFMainStruct->setStruct.pipeDPL));
 8000a02:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	7a1b      	ldrb	r3, [r3, #8]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	211c      	movs	r1, #28
 8000a10:	f7ff fded 	bl	80005ee <writeReg>

	uint8_t i;
	for (i = 0; i < 6; i++) {
 8000a14:	2300      	movs	r3, #0
 8000a16:	75fb      	strb	r3, [r7, #23]
 8000a18:	e00f      	b.n	8000a3a <nRF_Init+0x10a>
		writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	3311      	adds	r3, #17
 8000a22:	b2d9      	uxtb	r1, r3
				(pnRFMainStruct->setStruct.pipePayLen[i]));
 8000a24:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a26:	681a      	ldr	r2, [r3, #0]
		writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	7a5b      	ldrb	r3, [r3, #9]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f7ff fddd 	bl	80005ee <writeReg>
	for (i = 0; i < 6; i++) {
 8000a34:	7dfb      	ldrb	r3, [r7, #23]
 8000a36:	3301      	adds	r3, #1
 8000a38:	75fb      	strb	r3, [r7, #23]
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	2b05      	cmp	r3, #5
 8000a3e:	d9ec      	bls.n	8000a1a <nRF_Init+0xea>
	}
	writeReg(pnRFMainStruct, FEATURE, DF_FEATURE);
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	211d      	movs	r1, #29
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fdd0 	bl	80005ee <writeReg>

	/* Set default address */
	writeRegExt(pnRFMainStruct, TX_ADDR, (pnRFMainStruct->addrStruct.txAddr),
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f103 0211 	add.w	r2, r3, #17
 8000a5a:	2305      	movs	r3, #5
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	f7ff fdf2 	bl	8000646 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.txAddr));
	writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a62:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a64:	6818      	ldr	r0, [r3, #0]
			(pnRFMainStruct->addrStruct.rxAddr0),
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f103 0216 	add.w	r2, r3, #22
	writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 8000a6e:	2305      	movs	r3, #5
 8000a70:	210a      	movs	r1, #10
 8000a72:	f7ff fde8 	bl	8000646 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.rxAddr0));
	writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a78:	6818      	ldr	r0, [r3, #0]
			(pnRFMainStruct->addrStruct.rxAddr1),
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f103 021b 	add.w	r2, r3, #27
	writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a82:	2305      	movs	r3, #5
 8000a84:	210b      	movs	r1, #11
 8000a86:	f7ff fdde 	bl	8000646 <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.rxAddr1));
	writeReg(pnRFMainStruct, RX_ADDR_P2, (pnRFMainStruct->addrStruct.rxAddr2));
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <nRF_Init+0x1b8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a96:	461a      	mov	r2, r3
 8000a98:	210c      	movs	r1, #12
 8000a9a:	f7ff fda8 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P3, (pnRFMainStruct->addrStruct.rxAddr3));
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <nRF_Init+0x1b8>)
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <nRF_Init+0x1b8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aaa:	461a      	mov	r2, r3
 8000aac:	210d      	movs	r1, #13
 8000aae:	f7ff fd9e 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P4, (pnRFMainStruct->addrStruct.rxAddr4));
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <nRF_Init+0x1b8>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <nRF_Init+0x1b8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000abe:	461a      	mov	r2, r3
 8000ac0:	210e      	movs	r1, #14
 8000ac2:	f7ff fd94 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P5, (pnRFMainStruct->addrStruct.rxAddr5));
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <nRF_Init+0x1b8>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <nRF_Init+0x1b8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f7ff fd8a 	bl	80005ee <writeReg>

	return pnRFMainStruct;
 8000ada:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <nRF_Init+0x1b8>)
 8000adc:	681b      	ldr	r3, [r3, #0]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000000 	.word	0x20000000

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t j;
	for (j = 0; j < BUF_SIZE; j++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e008      	b.n	8000b0a <main+0x1e>
		TransmitData[j] = ('A' + j);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	79fa      	ldrb	r2, [r7, #7]
 8000afc:	3241      	adds	r2, #65	; 0x41
 8000afe:	b2d1      	uxtb	r1, r2
 8000b00:	4a4b      	ldr	r2, [pc, #300]	; (8000c30 <main+0x144>)
 8000b02:	54d1      	strb	r1, [r2, r3]
	for (j = 0; j < BUF_SIZE; j++) {
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	3301      	adds	r3, #1
 8000b08:	71fb      	strb	r3, [r7, #7]
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b1f      	cmp	r3, #31
 8000b0e:	d9f3      	bls.n	8000af8 <main+0xc>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b10:	f000 fe78 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b14:	f000 f8a0 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b18:	f7ff fb18 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b1c:	f000 fcc6 	bl	80014ac <MX_SPI1_Init>
  MX_TIM1_Init();
 8000b20:	f000 fddc 	bl	80016dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000b24:	4843      	ldr	r0, [pc, #268]	; (8000c34 <main+0x148>)
 8000b26:	f002 fac2 	bl	80030ae <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if  TEST_CONFIG
	/* 0. Create pointer and init structure. */
	nrfStruct_t *testStruct;						// create pointer to struct
	testStruct = nRF_Init(&hspi1, &htim1, CSN_GPIO_Port, CSN_Pin, CE_GPIO_Port,
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	4b42      	ldr	r3, [pc, #264]	; (8000c38 <main+0x14c>)
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2340      	movs	r3, #64	; 0x40
 8000b34:	4a41      	ldr	r2, [pc, #260]	; (8000c3c <main+0x150>)
 8000b36:	493f      	ldr	r1, [pc, #252]	; (8000c34 <main+0x148>)
 8000b38:	4841      	ldr	r0, [pc, #260]	; (8000c40 <main+0x154>)
 8000b3a:	f7ff fef9 	bl	8000930 <nRF_Init>
 8000b3e:	6038      	str	r0, [r7, #0]
	CE_Pin);	// create struct
	regTmp = readReg(testStruct, CONFIG); 		// read value of CONFIG register
 8000b40:	2100      	movs	r1, #0
 8000b42:	6838      	ldr	r0, [r7, #0]
 8000b44:	f7ff fd28 	bl	8000598 <readReg>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	; (8000c44 <main+0x158>)
 8000b4e:	601a      	str	r2, [r3, #0]

	/* 1.1  Set role as RX */
	modeRX(testStruct);
 8000b50:	6838      	ldr	r0, [r7, #0]
 8000b52:	f000 f8dd 	bl	8000d10 <modeRX>
	/* 1.2 Enable CRC and set coding */
	enableCRC(testStruct);
 8000b56:	6838      	ldr	r0, [r7, #0]
 8000b58:	f000 f969 	bl	8000e2e <enableCRC>
	setCRC(testStruct, CRC_16_bits);
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	6838      	ldr	r0, [r7, #0]
 8000b60:	f000 f977 	bl	8000e52 <setCRC>
	/* 1.3 Enable/disable interrupts */
	enableRXinterrupt(testStruct);
 8000b64:	6838      	ldr	r0, [r7, #0]
 8000b66:	f000 f902 	bl	8000d6e <enableRXinterrupt>
	enableTXinterrupt(testStruct);
 8000b6a:	6838      	ldr	r0, [r7, #0]
 8000b6c:	f000 f911 	bl	8000d92 <enableTXinterrupt>

	/* 2. Set ACK for RX pipe  */
	enableAutoAckPipe(testStruct, 0);
 8000b70:	2100      	movs	r1, #0
 8000b72:	6838      	ldr	r0, [r7, #0]
 8000b74:	f000 f99f 	bl	8000eb6 <enableAutoAckPipe>
	/* 3. Set RX pipe */
	enableRxAddr(testStruct, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	6838      	ldr	r0, [r7, #0]
 8000b7c:	f000 f9c2 	bl	8000f04 <enableRxAddr>
	/* 4. Set RX/TX address width */
	setAddrWidth(testStruct, longWidth);
 8000b80:	2103      	movs	r1, #3
 8000b82:	6838      	ldr	r0, [r7, #0]
 8000b84:	f000 f9e5 	bl	8000f52 <setAddrWidth>
	/* 5. Set ARD and ARC */
	setAutoRetrCount(testStruct, 4);
 8000b88:	2104      	movs	r1, #4
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 f9f4 	bl	8000f78 <setAutoRetrCount>
	setAutoRetrDelay(testStruct, 3); //500us
 8000b90:	2103      	movs	r1, #3
 8000b92:	6838      	ldr	r0, [r7, #0]
 8000b94:	f000 fa17 	bl	8000fc6 <setAutoRetrDelay>
	/* 6. Set RF channel */
	setChannel(testStruct, 2);
 8000b98:	2102      	movs	r1, #2
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 fa44 	bl	8001028 <setChannel>
	/* 7. Set RF power and Data Rate */
	setRFpower(testStruct, RF_PWR_6dBm);
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f000 fa59 	bl	800105a <setRFpower>
	setDataRate(testStruct, RF_DataRate_250);
 8000ba8:	2104      	movs	r1, #4
 8000baa:	6838      	ldr	r0, [r7, #0]
 8000bac:	f000 fa7a 	bl	80010a4 <setDataRate>
	/* 8 Set RX address */
	setReceivePipeAddress(testStruct, 0, ReceiveAddress,
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	4a25      	ldr	r2, [pc, #148]	; (8000c48 <main+0x15c>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	6838      	ldr	r0, [r7, #0]
 8000bb8:	f000 fadc 	bl	8001174 <setReceivePipeAddress>
			sizeof(ReceiveAddress));
	/* 9. Set TX address */
	setTransmitPipeAddress(testStruct, TransmitAddress,
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	4923      	ldr	r1, [pc, #140]	; (8000c4c <main+0x160>)
 8000bc0:	6838      	ldr	r0, [r7, #0]
 8000bc2:	f000 fb6b 	bl	800129c <setTransmitPipeAddress>
			sizeof(TransmitAddress));
#if TEST_STATIC_LENGTH
	setRxPayloadWidth(testStruct, 0, 32);
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	2100      	movs	r1, #0
 8000bca:	6838      	ldr	r0, [r7, #0]
 8000bcc:	f000 fb93 	bl	80012f6 <setRxPayloadWidth>
#endif
#if TEST_DYNAMIC_LENGTH
	enableDynamicPayloadLength(testStruct);
 8000bd0:	6838      	ldr	r0, [r7, #0]
 8000bd2:	f000 fc46 	bl	8001462 <enableDynamicPayloadLength>
	enableDynamicPayloadLengthPipe(testStruct, 0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	6838      	ldr	r0, [r7, #0]
 8000bda:	f000 fc1b 	bl	8001414 <enableDynamicPayloadLengthPipe>
#endif
#if TESTS_ACK_PAYLOAD
	enableAckPayload(testStruct);
 8000bde:	6838      	ldr	r0, [r7, #0]
 8000be0:	f000 fc51 	bl	8001486 <enableAckPayload>
	writeTxPayloadAck(testStruct, TransmitData, sizeof(TransmitData));
 8000be4:	2220      	movs	r2, #32
 8000be6:	4912      	ldr	r1, [pc, #72]	; (8000c30 <main+0x144>)
 8000be8:	6838      	ldr	r0, [r7, #0]
 8000bea:	f7ff fd8c 	bl	8000706 <writeTxPayloadAck>
#endif
#endif

	while (1) {
		rxFifoStatus = getRxStatusFIFO(testStruct);
 8000bee:	6838      	ldr	r0, [r7, #0]
 8000bf0:	f000 fbad 	bl	800134e <getRxStatusFIFO>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <main+0x164>)
 8000bfa:	701a      	strb	r2, [r3, #0]
		HAL_Delay(5);
 8000bfc:	2005      	movs	r0, #5
 8000bfe:	f000 fe63 	bl	80018c8 <HAL_Delay>
		if (checkReceivedPayload(testStruct)) {
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f000 f873 	bl	8000cee <checkReceivedPayload>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0ef      	beq.n	8000bee <main+0x102>
			readRxPayload(testStruct, ReceiveData, sizeof(ReceiveData));
 8000c0e:	2220      	movs	r2, #32
 8000c10:	4910      	ldr	r1, [pc, #64]	; (8000c54 <main+0x168>)
 8000c12:	6838      	ldr	r0, [r7, #0]
 8000c14:	f7ff fd44 	bl	80006a0 <readRxPayload>
			rxFifoStatus = getRxStatusFIFO(testStruct);
 8000c18:	6838      	ldr	r0, [r7, #0]
 8000c1a:	f000 fb98 	bl	800134e <getRxStatusFIFO>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <main+0x164>)
 8000c24:	701a      	strb	r2, [r3, #0]
			HAL_Delay(5);
 8000c26:	2005      	movs	r0, #5
 8000c28:	f000 fe4e 	bl	80018c8 <HAL_Delay>
		rxFifoStatus = getRxStatusFIFO(testStruct);
 8000c2c:	e7df      	b.n	8000bee <main+0x102>
 8000c2e:	bf00      	nop
 8000c30:	20000084 	.word	0x20000084
 8000c34:	20000144 	.word	0x20000144
 8000c38:	40011000 	.word	0x40011000
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	200000ec 	.word	0x200000ec
 8000c44:	2000007c 	.word	0x2000007c
 8000c48:	2000000c 	.word	0x2000000c
 8000c4c:	20000004 	.word	0x20000004
 8000c50:	20000080 	.word	0x20000080
 8000c54:	200000a4 	.word	0x200000a4

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b090      	sub	sp, #64	; 0x40
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0318 	add.w	r3, r7, #24
 8000c62:	2228      	movs	r2, #40	; 0x28
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 fc5c 	bl	8003524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c7e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c96:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0318 	add.w	r3, r7, #24
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 f8d5 	bl	8001e50 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cac:	f000 f819 	bl	8000ce2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2102      	movs	r1, #2
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fb40 	bl	8002350 <HAL_RCC_ClockConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cd6:	f000 f804 	bl	8000ce2 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3740      	adds	r7, #64	; 0x40
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr

08000cee <checkReceivedPayload>:
#include "settingModule.h"
#include "highLevelModule.h"

extern uint8_t regTmp;

uint8_t checkReceivedPayload(nrfStruct_t *nrfStruct) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	if (getPipeStatusRxFIFO(nrfStruct) == RX_FIFO_MASK_DATA)
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f9f9 	bl	80010ee <getPipeStatusRxFIFO>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <checkReceivedPayload+0x18>
		return 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <checkReceivedPayload+0x1a>
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <modeRX>:
/* To turn off RX/TX state of module use mode Standby */
/**
 * @Brief	Switch radio module to Receiver (PRX) mode
 * @Retval	None
 */
void modeRX(nrfStruct_t *nrfStruct) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	if (!readBit(nrfStruct, CONFIG, bit1)) {	//Check state of module
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fda3 	bl	8000868 <readBit>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d107      	bne.n	8000d38 <modeRX+0x28>
		pwrUp(nrfStruct);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fd85 	bl	8000838 <pwrUp>
		delayUs(nrfStruct, 1500);	//wait 1.5ms fo nRF24L01+ stand up
 8000d2e:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff fbe8 	bl	8000508 <delayUs>
	}
	flushRx(nrfStruct);			//clear (flush) RX FIFO buffer
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fd4a 	bl	80007d2 <flushRx>
	flushTx(nrfStruct);		//clear (flush) TX FIFO buffer
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff fd14 	bl	800076c <flushTx>

	clearRX_DR(nrfStruct);	//clear interrupts flags
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 f836 	bl	8000db6 <clearRX_DR>
	clearTX_DS(nrfStruct);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f847 	bl	8000dde <clearTX_DS>
	clearMAX_RT(nrfStruct);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f858 	bl	8000e06 <clearMAX_RT>
	//nRF in Standby-I
	ceHigh(nrfStruct); //set high on CE line
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fc0e 	bl	8000578 <ceHigh>
	setBit(nrfStruct, CONFIG, bit0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff fdc1 	bl	80008e8 <setBit>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <enableRXinterrupt>:
	resetBit(nrfStruct, CONFIG, bit4);
	nrfStruct->setStruct.enableMaxRtIrq = 0;
}

void enableRXinterrupt(nrfStruct_t *nrfStruct)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit6);
 8000d76:	2206      	movs	r2, #6
 8000d78:	2100      	movs	r1, #0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fdb4 	bl	80008e8 <setBit>
	nrfStruct->setStruct.enableRxIrq = 1;
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	7bd3      	ldrb	r3, [r2, #15]
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	73d3      	strb	r3, [r2, #15]
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <enableTXinterrupt>:
void enableTXinterrupt(nrfStruct_t *nrfStruct)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit5);
 8000d9a:	2205      	movs	r2, #5
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fda2 	bl	80008e8 <setBit>
	nrfStruct->setStruct.enableTxIrq = 1;
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	7bd3      	ldrb	r3, [r2, #15]
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	73d3      	strb	r3, [r2, #15]
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <clearRX_DR>:
	setBit(nrfStruct, CONFIG, bit4);
	nrfStruct->setStruct.enableMaxRtIrq = 1;
}

void clearRX_DR(nrfStruct_t *nrfStruct)
{ //clear irt bits in Status Register
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit6);
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	2107      	movs	r1, #7
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fd90 	bl	80008e8 <setBit>
	nrfStruct->statusStruct.dataReadIrq = 0;
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000dce:	f36f 0300 	bfc	r3, #0, #1
 8000dd2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <clearTX_DS>:
void clearTX_DS(nrfStruct_t *nrfStruct)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit5);
 8000de6:	2205      	movs	r2, #5
 8000de8:	2107      	movs	r1, #7
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fd7c 	bl	80008e8 <setBit>
	nrfStruct->statusStruct.dataSendIrq = 0;
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000df6:	f36f 0341 	bfc	r3, #1, #1
 8000dfa:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <clearMAX_RT>:
void clearMAX_RT(nrfStruct_t *nrfStruct)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit4);
 8000e0e:	2204      	movs	r2, #4
 8000e10:	2107      	movs	r1, #7
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fd68 	bl	80008e8 <setBit>
	nrfStruct->statusStruct.maxRetr = 0;
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000e1e:	f36f 0382 	bfc	r3, #2, #1
 8000e22:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <enableCRC>:

/* CRC functions */
void enableCRC(nrfStruct_t *nrfStruct)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit3);
 8000e36:	2203      	movs	r2, #3
 8000e38:	2100      	movs	r1, #0
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fd54 	bl	80008e8 <setBit>
	nrfStruct->setStruct.enableCRC = 1;
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	7bd3      	ldrb	r3, [r2, #15]
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	73d3      	strb	r3, [r2, #15]
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <setCRC>:
	resetBit(nrfStruct, CONFIG, bit3);
	nrfStruct->setStruct.enableCRC = 0;
}

void setCRC(nrfStruct_t *nrfStruct, widthCRC_t w)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	70fb      	strb	r3, [r7, #3]
	if (w)
 8000e5e:	78fb      	ldrb	r3, [r7, #3]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00a      	beq.n	8000e7a <setCRC+0x28>
	{
		setBit(nrfStruct, CONFIG, bit2);
 8000e64:	2202      	movs	r2, #2
 8000e66:	2100      	movs	r1, #0
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fd3d 	bl	80008e8 <setBit>
		nrfStruct->setStruct.codingCRC = 1;
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	7bd3      	ldrb	r3, [r2, #15]
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	73d3      	strb	r3, [r2, #15]
	else
	{
		resetBit(nrfStruct, CONFIG, bit2);
		nrfStruct->setStruct.codingCRC = 0;
	}
}
 8000e78:	e009      	b.n	8000e8e <setCRC+0x3c>
		resetBit(nrfStruct, CONFIG, bit2);
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff fd0d 	bl	800089e <resetBit>
		nrfStruct->setStruct.codingCRC = 0;
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	7bd3      	ldrb	r3, [r2, #15]
 8000e88:	f36f 0341 	bfc	r3, #1, #1
 8000e8c:	73d3      	strb	r3, [r2, #15]
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <checkPipe>:

/* Auto ACK */
uint8_t checkPipe(uint8_t pipe)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
	if (pipe >= 0 && pipe <= 5) //check correct pipe number
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	d801      	bhi.n	8000eaa <checkPipe+0x14>
		return 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <checkPipe+0x16>
	return 0;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <enableAutoAckPipe>:
uint8_t enableAutoAckPipe(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	70fb      	strb	r3, [r7, #3]
	if (checkPipe(pipe))
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ffe6 	bl	8000e96 <checkPipe>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d014      	beq.n	8000efa <enableAutoAckPipe+0x44>
	{
		setBit(nrfStruct, EN_AA, pipe);
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff fd06 	bl	80008e8 <setBit>
		nrfStruct->setStruct.pipeACK |= (1 << pipe);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	79db      	ldrb	r3, [r3, #7]
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b25b      	sxtb	r3, r3
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	71da      	strb	r2, [r3, #7]
		return 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <enableAutoAckPipe+0x46>
	}
	return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <enableRxAddr>:
	return 0;
}

/* RX addresses */
uint8_t enableRxAddr(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	70fb      	strb	r3, [r7, #3]
	if (checkPipe(pipe))
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ffbf 	bl	8000e96 <checkPipe>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d014      	beq.n	8000f48 <enableRxAddr+0x44>
	{
		setBit(nrfStruct, EN_RXADDR, pipe);
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	461a      	mov	r2, r3
 8000f22:	2102      	movs	r1, #2
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fcdf 	bl	80008e8 <setBit>
		nrfStruct->setStruct.pipeEn |= (1 << pipe);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	799b      	ldrb	r3, [r3, #6]
 8000f2e:	b25a      	sxtb	r2, r3
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2101      	movs	r1, #1
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b25b      	sxtb	r3, r3
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	719a      	strb	r2, [r3, #6]
		return 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <enableRxAddr+0x46>
	}
	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <setAddrWidth>:
	return 0;
}

/* Address Width */
void setAddrWidth(nrfStruct_t *nrfStruct, addressWidth_t width)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	70fb      	strb	r3, [r7, #3]
	writeReg(nrfStruct, SETUP_AW, width);
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	461a      	mov	r2, r3
 8000f62:	2103      	movs	r1, #3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fb42 	bl	80005ee <writeReg>
	nrfStruct->addrStruct.addrWidth = width;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	78fa      	ldrb	r2, [r7, #3]
 8000f6e:	741a      	strb	r2, [r3, #16]
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <setAutoRetrCount>:

/* Setup retransmission */
uint8_t setAutoRetrCount(nrfStruct_t *nrfStruct, uint8_t count)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
	if (count >= 0x00 && count <= 0x0F)
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	d818      	bhi.n	8000fbc <setAutoRetrCount+0x44>
	{					//check count val
		uint8_t tmp = readReg(nrfStruct, SETUP_RETR); 	//read reg. val
 8000f8a:	2104      	movs	r1, #4
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fb03 	bl	8000598 <readReg>
 8000f92:	4603      	mov	r3, r0
 8000f94:	73fb      	strb	r3, [r7, #15]
		tmp = tmp & 0xF0;							// reset LSB and save MSB
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	73fb      	strb	r3, [r7, #15]
		tmp |= count;									//add tmp and count
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, SETUP_RETR, tmp);			//write to SETUP_RETR
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	2104      	movs	r1, #4
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff fb1e 	bl	80005ee <writeReg>
		nrfStruct->setStruct.arc = count;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	78fa      	ldrb	r2, [r7, #3]
 8000fb6:	715a      	strb	r2, [r3, #5]
		return OK_CODE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <setAutoRetrCount+0x46>
	}
	return ERR_CODE;
 8000fbc:	23ff      	movs	r3, #255	; 0xff
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <setAutoRetrDelay>:

uint8_t setAutoRetrDelay(nrfStruct_t *nrfStruct, uint8_t delay)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b084      	sub	sp, #16
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	if (delay > 0x0F)
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d902      	bls.n	8000fde <setAutoRetrDelay+0x18>
	{						//if delay in MSB format
		delay = delay >> 4; //shift to LSB format
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	70fb      	strb	r3, [r7, #3]
	}
	if (delay >= 0x00 && delay <= 0x0F)
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d81c      	bhi.n	800101e <setAutoRetrDelay+0x58>
	{
		uint8_t tmp = readReg(nrfStruct, SETUP_RETR);
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fad6 	bl	8000598 <readReg>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
		tmp = tmp & 0x0F;	//save LSB, reset MSB
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	73fb      	strb	r3, [r7, #15]
		tmp |= (delay << 4); //add tmp and delay
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	011b      	lsls	r3, r3, #4
 8000ffc:	b25a      	sxtb	r2, r3
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4313      	orrs	r3, r2
 8001004:	b25b      	sxtb	r3, r3
 8001006:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, SETUP_RETR, tmp);
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	461a      	mov	r2, r3
 800100c:	2104      	movs	r1, #4
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff faed 	bl	80005ee <writeReg>
		nrfStruct->setStruct.ard = delay;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	711a      	strb	r2, [r3, #4]
		return OK_CODE;
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <setAutoRetrDelay+0x5a>
	}
	return ERR_CODE;
 800101e:	23ff      	movs	r3, #255	; 0xff
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <setChannel>:

/* RF channel */
uint8_t setChannel(nrfStruct_t *nrfStruct, uint8_t channel)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
	if (channel >= 0 && channel <= 125)
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	2b7d      	cmp	r3, #125	; 0x7d
 8001038:	d80a      	bhi.n	8001050 <setChannel+0x28>
	{
		writeReg(nrfStruct, RF_CH, channel); //Maximum channel limited to 125 by hardware
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	461a      	mov	r2, r3
 800103e:	2105      	movs	r1, #5
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fad4 	bl	80005ee <writeReg>
		nrfStruct->setStruct.channel = channel;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	78fa      	ldrb	r2, [r7, #3]
 800104a:	705a      	strb	r2, [r3, #1]
		return OK_CODE;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <setChannel+0x2a>
	}
	return ERR_CODE;
 8001050:	23ff      	movs	r3, #255	; 0xff
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <setRFpower>:
		return 0;
}


void setRFpower(nrfStruct_t *nrfStruct, powerRF_t power)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	70fb      	strb	r3, [r7, #3]
	/*
	if (power > RF_PWR_0dBm && power < RF_PWR_18dBm)
	 return ERR_CODE;*/
	uint8_t tmp = readReg(nrfStruct, RF_SETUP); //
 8001066:	2106      	movs	r1, #6
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fa95 	bl	8000598 <readReg>
 800106e:	4603      	mov	r3, r0
 8001070:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0xF8;					  //0xF8 - 1111 1000B reset 3 LSB
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	f023 0307 	bic.w	r3, r3, #7
 8001078:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (power << 1);			  //combining tmp and shifted power
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	b25a      	sxtb	r2, r3
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4313      	orrs	r3, r2
 8001086:	b25b      	sxtb	r3, r3
 8001088:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, RF_SETUP, tmp);
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	461a      	mov	r2, r3
 800108e:	2106      	movs	r1, #6
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff faac 	bl	80005ee <writeReg>
	nrfStruct->setStruct.powerRF = power;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	70da      	strb	r2, [r3, #3]

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <setDataRate>:

void setDataRate(nrfStruct_t *nrfStruct, dataRate_t rate)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = readReg(nrfStruct, RF_SETUP); 	//
 80010b0:	2106      	movs	r1, #6
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fa70 	bl	8000598 <readReg>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0x06;//0x06 = 0000 0110B - reset data rate's bits - Also this line reset PLL_LOCK and CONT_WAVE bits
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f003 0306 	and.w	r3, r3, #6
 80010c2:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (rate << 3);			  //combining tmp and shifted data rate
 80010c4:	78fb      	ldrb	r3, [r7, #3]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, RF_SETUP, tmp);
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2106      	movs	r1, #6
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fa87 	bl	80005ee <writeReg>
	nrfStruct->setStruct.dataRate = rate;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	78fa      	ldrb	r2, [r7, #3]
 80010e4:	709a      	strb	r2, [r3, #2]
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <getPipeStatusRxFIFO>:
}
/**
 * @Brief	Check pipe number with data to read 
 * */
uint8_t getPipeStatusRxFIFO(nrfStruct_t *nrfStruct)
{ //Zmieniono na kody bledow
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
	uint8_t tmp = readReg(nrfStruct, STATUS);
 80010f6:	2107      	movs	r1, #7
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff fa4d 	bl	8000598 <readReg>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
	tmp &= 0x0E; //save only pipe number bits
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	f003 030e 	and.w	r3, r3, #14
 8001108:	73fb      	strb	r3, [r7, #15]
	tmp = tmp >> 1;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
	if (checkPipe(tmp)) {
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff febf 	bl	8000e96 <checkPipe>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00c      	beq.n	8001138 <getPipeStatusRxFIFO+0x4a>
		nrfStruct->statusStruct.pipeNumber = tmp;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	b2d9      	uxtb	r1, r3
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800112c:	f361 03c5 	bfi	r3, r1, #3, #3
 8001130:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
		return tmp;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	e019      	b.n	800116c <getPipeStatusRxFIFO+0x7e>
	}
	if (tmp == 0x07) { //RX FIFO empty
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	2b07      	cmp	r3, #7
 800113c:	d108      	bne.n	8001150 <getPipeStatusRxFIFO+0x62>
		nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8001144:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001148:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
		return RX_FIFO_EMPTY;
 800114c:	2307      	movs	r3, #7
 800114e:	e00d      	b.n	800116c <getPipeStatusRxFIFO+0x7e>
	}

	if (tmp == 0x06) { //110B - mean not used
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b06      	cmp	r3, #6
 8001154:	d109      	bne.n	800116a <getPipeStatusRxFIFO+0x7c>
		nrfStruct->statusStruct.pipeNumber = RX_FIFO_UNUSED;
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800115c:	2106      	movs	r1, #6
 800115e:	f361 03c5 	bfi	r3, r1, #3, #3
 8001162:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
		return RX_FIFO_UNUSED; //return ERR
 8001166:	2306      	movs	r3, #6
 8001168:	e000      	b.n	800116c <getPipeStatusRxFIFO+0x7e>
	}
	return ERR_CODE;
 800116a:	23ff      	movs	r3, #255	; 0xff
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <setReceivePipeAddress>:
 * @Note	Remember that addresses registers for pipes from 2 to 5 are 1 byte only.
 * 			Also registers for pipe 0 and 1 can have size of from 3 to 5 bytes.
 */
uint8_t setReceivePipeAddress(nrfStruct_t *nrfStruct, uint8_t pipe,
		uint8_t *addrBuf, size_t addrBufSize)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	460b      	mov	r3, r1
 8001182:	72fb      	strb	r3, [r7, #11]
	if (!checkPipe(pipe)) { //if checkPipe return 0 - end fun. by return 0.
 8001184:	7afb      	ldrb	r3, [r7, #11]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fe85 	bl	8000e96 <checkPipe>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <setReceivePipeAddress+0x22>
		return ERR_CODE;
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	e07e      	b.n	8001294 <setReceivePipeAddress+0x120>
	}
	size_t bufSize = 0x05;
 8001196:	2305      	movs	r3, #5
 8001198:	617b      	str	r3, [r7, #20]
	if (pipe == 0 || pipe == 1) {	//if pipe 0 or 1 check bufer width
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <setReceivePipeAddress+0x32>
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d13e      	bne.n	8001224 <setReceivePipeAddress+0xb0>
		switch (addrBufSize) {	//check addrBufSize
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d006      	beq.n	80011ba <setReceivePipeAddress+0x46>
 80011ac:	2b05      	cmp	r3, #5
 80011ae:	d007      	beq.n	80011c0 <setReceivePipeAddress+0x4c>
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d108      	bne.n	80011c6 <setReceivePipeAddress+0x52>
		case 3:
			bufSize = 0x03;
 80011b4:	2303      	movs	r3, #3
 80011b6:	617b      	str	r3, [r7, #20]
			break;
 80011b8:	e007      	b.n	80011ca <setReceivePipeAddress+0x56>
		case 4:
			bufSize = 0x04;
 80011ba:	2304      	movs	r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
			break;
 80011be:	e004      	b.n	80011ca <setReceivePipeAddress+0x56>
		case 5:
			bufSize = 0x05;
 80011c0:	2305      	movs	r3, #5
 80011c2:	617b      	str	r3, [r7, #20]
			break;
 80011c4:	e001      	b.n	80011ca <setReceivePipeAddress+0x56>
		default:
			return ERR_CODE;
 80011c6:	23ff      	movs	r3, #255	; 0xff
 80011c8:	e064      	b.n	8001294 <setReceivePipeAddress+0x120>
			break;
		}
		if (pipe == 0) {	//check pipe and write addr to struct
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d112      	bne.n	80011f6 <setReceivePipeAddress+0x82>
			uint8_t i;
			for (i = 0; i < addrBufSize; i++) {
 80011d0:	2300      	movs	r3, #0
 80011d2:	74fb      	strb	r3, [r7, #19]
 80011d4:	e00b      	b.n	80011ee <setReceivePipeAddress+0x7a>
				nrfStruct->addrStruct.rxAddr0[i] = addrBuf[i];
 80011d6:	7cfb      	ldrb	r3, [r7, #19]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	441a      	add	r2, r3
 80011dc:	7cfb      	ldrb	r3, [r7, #19]
 80011de:	7811      	ldrb	r1, [r2, #0]
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	4413      	add	r3, r2
 80011e4:	460a      	mov	r2, r1
 80011e6:	759a      	strb	r2, [r3, #22]
			for (i = 0; i < addrBufSize; i++) {
 80011e8:	7cfb      	ldrb	r3, [r7, #19]
 80011ea:	3301      	adds	r3, #1
 80011ec:	74fb      	strb	r3, [r7, #19]
 80011ee:	7cfb      	ldrb	r3, [r7, #19]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d8ef      	bhi.n	80011d6 <setReceivePipeAddress+0x62>
			}
		}
		if (pipe == 1) {
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d141      	bne.n	8001280 <setReceivePipeAddress+0x10c>
			uint8_t i;
			for (i = 0; i < addrBufSize; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	74bb      	strb	r3, [r7, #18]
 8001200:	e00b      	b.n	800121a <setReceivePipeAddress+0xa6>
				nrfStruct->addrStruct.rxAddr1[i] = addrBuf[i];
 8001202:	7cbb      	ldrb	r3, [r7, #18]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	441a      	add	r2, r3
 8001208:	7cbb      	ldrb	r3, [r7, #18]
 800120a:	7811      	ldrb	r1, [r2, #0]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	460a      	mov	r2, r1
 8001212:	76da      	strb	r2, [r3, #27]
			for (i = 0; i < addrBufSize; i++) {
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	3301      	adds	r3, #1
 8001218:	74bb      	strb	r3, [r7, #18]
 800121a:	7cbb      	ldrb	r3, [r7, #18]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d8ef      	bhi.n	8001202 <setReceivePipeAddress+0x8e>
		if (pipe == 1) {
 8001222:	e02d      	b.n	8001280 <setReceivePipeAddress+0x10c>
			}
		}
	} else {
		if (addrBufSize == 1)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <setReceivePipeAddress+0xba>
			bufSize = 0x01;
 800122a:	2301      	movs	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
		switch (pipe) {	//check pipe and write addr to struct
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	3b02      	subs	r3, #2
 8001232:	2b03      	cmp	r3, #3
 8001234:	d822      	bhi.n	800127c <setReceivePipeAddress+0x108>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <setReceivePipeAddress+0xc8>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	0800124d 	.word	0x0800124d
 8001240:	08001259 	.word	0x08001259
 8001244:	08001265 	.word	0x08001265
 8001248:	08001271 	.word	0x08001271
		case 2:
			nrfStruct->addrStruct.rxAddr2 = *addrBuf;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 8001256:	e013      	b.n	8001280 <setReceivePipeAddress+0x10c>
		case 3:
			nrfStruct->addrStruct.rxAddr3 = *addrBuf;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 8001262:	e00d      	b.n	8001280 <setReceivePipeAddress+0x10c>
		case 4:
			nrfStruct->addrStruct.rxAddr4 = *addrBuf;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			break;
 800126e:	e007      	b.n	8001280 <setReceivePipeAddress+0x10c>
		case 5:
			nrfStruct->addrStruct.rxAddr5 = *addrBuf;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			break;
 800127a:	e001      	b.n	8001280 <setReceivePipeAddress+0x10c>
		default:
			return ERR_CODE;
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	e009      	b.n	8001294 <setReceivePipeAddress+0x120>
			break;
		}
	}
	uint8_t addr = RX_ADDR_P0 + pipe; //if pipe = 0 -> write Receive address pipe 0
 8001280:	7afb      	ldrb	r3, [r7, #11]
 8001282:	330a      	adds	r3, #10
 8001284:	747b      	strb	r3, [r7, #17]
	writeRegExt(nrfStruct, addr, addrBuf, bufSize);
 8001286:	7c79      	ldrb	r1, [r7, #17]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff f9da 	bl	8000646 <writeRegExt>

	return OK_CODE;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <setTransmitPipeAddress>:

/* Transmit address data pipe */
uint8_t setTransmitPipeAddress(nrfStruct_t *nrfStruct, uint8_t *addrBuf,
		size_t addrBufSize)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
	if (((nrfStruct->addrStruct.addrWidth) + 2) != addrBufSize) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	7c1b      	ldrb	r3, [r3, #16]
 80012ac:	3302      	adds	r3, #2
 80012ae:	461a      	mov	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d001      	beq.n	80012ba <setTransmitPipeAddress+0x1e>
		return ERR_CODE;
 80012b6:	23ff      	movs	r3, #255	; 0xff
 80012b8:	e019      	b.n	80012ee <setTransmitPipeAddress+0x52>
	}

	uint8_t i;
	for (i = 0; i < addrBufSize; i++) {	//write to struct
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
 80012be:	e00b      	b.n	80012d8 <setTransmitPipeAddress+0x3c>
		nrfStruct->addrStruct.txAddr[i] = addrBuf[i];
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	441a      	add	r2, r3
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	7811      	ldrb	r1, [r2, #0]
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	745a      	strb	r2, [r3, #17]
	for (i = 0; i < addrBufSize; i++) {	//write to struct
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	3301      	adds	r3, #1
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8ef      	bhi.n	80012c0 <setTransmitPipeAddress+0x24>
	}
	writeRegExt(nrfStruct, TX_ADDR, addrBuf, addrBufSize);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	2110      	movs	r1, #16
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f7ff f9ad 	bl	8000646 <writeRegExt>
	return OK_CODE;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <setRxPayloadWidth>:
	}
	return ERR_CODE;
}

uint8_t setRxPayloadWidth(nrfStruct_t *nrfStruct, uint8_t pipe, uint8_t width)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
 8001302:	4613      	mov	r3, r2
 8001304:	70bb      	strb	r3, [r7, #2]
	if (checkPipe(pipe))
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fdc4 	bl	8000e96 <checkPipe>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <setRxPayloadWidth+0x4e>
	{
		if (width < 1 && width > 32) { //check width correct value
 8001314:	78bb      	ldrb	r3, [r7, #2]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d104      	bne.n	8001324 <setRxPayloadWidth+0x2e>
 800131a:	78bb      	ldrb	r3, [r7, #2]
 800131c:	2b20      	cmp	r3, #32
 800131e:	d901      	bls.n	8001324 <setRxPayloadWidth+0x2e>
			return ERR_CODE;
 8001320:	23ff      	movs	r3, #255	; 0xff
 8001322:	e010      	b.n	8001346 <setRxPayloadWidth+0x50>
		}
		uint8_t addr = RX_PW_P0 + pipe;
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	3311      	adds	r3, #17
 8001328:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, addr, width);
 800132a:	78ba      	ldrb	r2, [r7, #2]
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	4619      	mov	r1, r3
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff f95c 	bl	80005ee <writeReg>
		nrfStruct->setStruct.pipePayLen[pipe] = width;
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	78ba      	ldrb	r2, [r7, #2]
 800133e:	725a      	strb	r2, [r3, #9]
		return OK_CODE;
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <setRxPayloadWidth+0x50>
	}
	return ERR_CODE;
 8001344:	23ff      	movs	r3, #255	; 0xff
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <getRxStatusFIFO>:
/* FIFO status */
/**
 * @Brief	Return status of RX FIFO buffer by check bits in FIFO Status Register 
 * */
uint8_t getRxStatusFIFO(nrfStruct_t *nrfStruct)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	uint8_t tmp = readReg(nrfStruct, FIFO_STATUS);
 8001356:	2117      	movs	r1, #23
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff f91d 	bl	8000598 <readReg>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
	if ((tmp & 0x03) == RX_FIFO_MASK_EMPTY)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b01      	cmp	r3, #1
 800136a:	d116      	bne.n	800139a <getRxStatusFIFO+0x4c>
	{
		nrfStruct->fifoStruct.rxEmpty = 1;
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxFull = 0;
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001380:	f36f 0382 	bfc	r3, #2, #1
 8001384:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxRead = 0;
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800138e:	f36f 0341 	bfc	r3, #1, #1
 8001392:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return RX_FIFO_MASK_EMPTY; //RX FIFO register buffer is empty
 8001396:	2301      	movs	r3, #1
 8001398:	e038      	b.n	800140c <getRxStatusFIFO+0xbe>
	}
	if ((tmp & 0x03) == RX_FIFO_MASK_FULL)
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d116      	bne.n	80013d2 <getRxStatusFIFO+0x84>
	{
		nrfStruct->fifoStruct.rxEmpty = 0;
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013aa:	f36f 03c3 	bfc	r3, #3, #1
 80013ae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxFull = 1;
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxRead = 1;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return RX_FIFO_MASK_FULL; ////RX FIFO register buffer is full
 80013ce:	2302      	movs	r3, #2
 80013d0:	e01c      	b.n	800140c <getRxStatusFIFO+0xbe>
	}
	if ((tmp & 0x03) == RX_FIFO_MASK_DATA)
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d116      	bne.n	800140a <getRxStatusFIFO+0xbc>
	{
		nrfStruct->fifoStruct.rxEmpty = 0;
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013e2:	f36f 03c3 	bfc	r3, #3, #1
 80013e6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxFull = 0;
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013f0:	f36f 0382 	bfc	r3, #2, #1
 80013f4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxRead = 1;
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80013fe:	f043 0302 	orr.w	r3, r3, #2
 8001402:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return RX_FIFO_MASK_DATA; //RX FIFO register buffer has some data but isn't full
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <getRxStatusFIFO+0xbe>
	}
	return ERR_CODE;
 800140a:	23ff      	movs	r3, #255	; 0xff
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <enableDynamicPayloadLengthPipe>:
	return TX_REUSE_UNUSED;
}

/* Dynamic Payload Lenggth */
uint8_t enableDynamicPayloadLengthPipe(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
	if (!checkPipe(pipe))
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd37 	bl	8000e96 <checkPipe>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <enableDynamicPayloadLengthPipe+0x1e>
	{
		return ERR_CODE;
 800142e:	23ff      	movs	r3, #255	; 0xff
 8001430:	e013      	b.n	800145a <enableDynamicPayloadLengthPipe+0x46>
	}
	setBit(nrfStruct, DYNPD, pipe);
 8001432:	78fb      	ldrb	r3, [r7, #3]
 8001434:	461a      	mov	r2, r3
 8001436:	211c      	movs	r1, #28
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fa55 	bl	80008e8 <setBit>
	nrfStruct->setStruct.pipeDPL |= (1 << pipe);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7a1b      	ldrb	r3, [r3, #8]
 8001442:	b25a      	sxtb	r2, r3
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	b25b      	sxtb	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	b25b      	sxtb	r3, r3
 8001452:	b2da      	uxtb	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	721a      	strb	r2, [r3, #8]
	return OK_CODE;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <enableDynamicPayloadLength>:
	nrfStruct->setStruct.pipeDPL |= (0 << pipe);
	return OK_CODE;
}
/* Feature */
void enableDynamicPayloadLength(nrfStruct_t *nrfStruct)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, FEATURE, EN_DPL);
 800146a:	2202      	movs	r2, #2
 800146c:	211d      	movs	r1, #29
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fa3a 	bl	80008e8 <setBit>
	nrfStruct->setStruct.enableDPL = 1;
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	7bd3      	ldrb	r3, [r2, #15]
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	73d3      	strb	r3, [r2, #15]
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <enableAckPayload>:
	resetBit(nrfStruct, FEATURE, EN_DPL);
	nrfStruct->setStruct.enableDPL = 0;
}

void enableAckPayload(nrfStruct_t *nrfStruct)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, FEATURE, EN_ACK_PAY);
 800148e:	2201      	movs	r2, #1
 8001490:	211d      	movs	r1, #29
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fa28 	bl	80008e8 <setBit>
	nrfStruct->setStruct.enableAckPay = 1;
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	7bd3      	ldrb	r3, [r2, #15]
 800149c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a0:	73d3      	strb	r3, [r2, #15]

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <MX_SPI1_Init+0x64>)
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <MX_SPI1_Init+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_SPI1_Init+0x64>)
 80014b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014be:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_SPI1_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_SPI1_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_SPI1_Init+0x64>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_SPI1_Init+0x64>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_SPI1_Init+0x64>)
 80014d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_SPI1_Init+0x64>)
 80014e0:	2218      	movs	r2, #24
 80014e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_SPI1_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_SPI1_Init+0x64>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_SPI1_Init+0x64>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_SPI1_Init+0x64>)
 80014f8:	220a      	movs	r2, #10
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_SPI1_Init+0x64>)
 80014fe:	f001 f891 	bl	8002624 <HAL_SPI_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001508:	f7ff fbeb 	bl	8000ce2 <Error_Handler>
  }

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200000ec 	.word	0x200000ec
 8001514:	40013000 	.word	0x40013000

08001518 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_SPI_MspInit+0x88>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d12f      	bne.n	8001598 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_SPI_MspInit+0x8c>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_SPI_MspInit+0x8c>)
 800153e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_SPI_MspInit+0x8c>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_SPI_MspInit+0x8c>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <HAL_SPI_MspInit+0x8c>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_SPI_MspInit+0x8c>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0310 	add.w	r3, r7, #16
 8001578:	4619      	mov	r1, r3
 800157a:	480b      	ldr	r0, [pc, #44]	; (80015a8 <HAL_SPI_MspInit+0x90>)
 800157c:	f000 fad4 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_SPI_MspInit+0x90>)
 8001594:	f000 fac8 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40013000 	.word	0x40013000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010800 	.word	0x40010800

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_MspInit+0x5c>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_MspInit+0x5c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_MspInit+0x5c>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x5c>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_MspInit+0x5c>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x5c>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	; (800160c <HAL_MspInit+0x60>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <HAL_MspInit+0x60>)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <HardFault_Handler+0x4>

08001622 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <MemManage_Handler+0x4>

08001628 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <BusFault_Handler+0x4>

0800162e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <UsageFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f918 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001668:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800166c:	f000 fbce 	bl	8001e0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <SystemInit+0x5c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <SystemInit+0x5c>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <SystemInit+0x5c>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	4911      	ldr	r1, [pc, #68]	; (80016d0 <SystemInit+0x5c>)
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <SystemInit+0x60>)
 800168c:	4013      	ands	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <SystemInit+0x5c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <SystemInit+0x5c>)
 8001696:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800169a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <SystemInit+0x5c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <SystemInit+0x5c>)
 80016a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <SystemInit+0x5c>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <SystemInit+0x5c>)
 80016b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SystemInit+0x5c>)
 80016ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SystemInit+0x64>)
 80016c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40021000 	.word	0x40021000
 80016d4:	f8ff0000 	.word	0xf8ff0000
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <MX_TIM1_Init+0x98>)
 80016fa:	4a1f      	ldr	r2, [pc, #124]	; (8001778 <MX_TIM1_Init+0x9c>)
 80016fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <MX_TIM1_Init+0x98>)
 8001700:	2247      	movs	r2, #71	; 0x47
 8001702:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <MX_TIM1_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_TIM1_Init+0x98>)
 800170c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001710:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_TIM1_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <MX_TIM1_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_TIM1_Init+0x98>)
 8001720:	2280      	movs	r2, #128	; 0x80
 8001722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <MX_TIM1_Init+0x98>)
 8001726:	f001 fc97 	bl	8003058 <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001730:	f7ff fad7 	bl	8000ce2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001738:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM1_Init+0x98>)
 8001742:	f001 fcd7 	bl	80030f4 <HAL_TIM_ConfigClockSource>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800174c:	f7ff fac9 	bl	8000ce2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_TIM1_Init+0x98>)
 800175e:	f001 fe79 	bl	8003454 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001768:	f7ff fabb 	bl	8000ce2 <Error_Handler>
  }

}
 800176c:	bf00      	nop
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000144 	.word	0x20000144
 8001778:	40012c00 	.word	0x40012c00

0800177c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <HAL_TIM_Base_MspInit+0x34>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10b      	bne.n	80017a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_TIM_Base_MspInit+0x38>)
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_TIM_Base_MspInit+0x38>)
 8001794:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001798:	6193      	str	r3, [r2, #24]
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_TIM_Base_MspInit+0x38>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017a6:	bf00      	nop
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	40012c00 	.word	0x40012c00
 80017b4:	40021000 	.word	0x40021000

080017b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017b8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017ba:	e003      	b.n	80017c4 <LoopCopyDataInit>

080017bc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017be:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017c0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017c2:	3104      	adds	r1, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017c4:	480a      	ldr	r0, [pc, #40]	; (80017f0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017c8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017ca:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017cc:	d3f6      	bcc.n	80017bc <CopyDataInit>
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017d0:	e002      	b.n	80017d8 <LoopFillZerobss>

080017d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017d4:	f842 3b04 	str.w	r3, [r2], #4

080017d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017da:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017dc:	d3f9      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017de:	f7ff ff49 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f001 fe7b 	bl	80034dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e6:	f7ff f981 	bl	8000aec <main>
  bx lr
 80017ea:	4770      	bx	lr
  ldr r3, =_sidata
 80017ec:	08003578 	.word	0x08003578
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017f4:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 80017f8:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 80017fc:	20000188 	.word	0x20000188

08001800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_2_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_Init+0x28>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_Init+0x28>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 f945 	bl	8001aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f000 f808 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fec4 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f95d 	bl	8001b0e <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 f925 	bl	8001aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_InitTick+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000014 	.word	0x20000014
 8001888:	2000001c 	.word	0x2000001c
 800188c:	20000018 	.word	0x20000018

08001890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x1c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x20>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_IncTick+0x20>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	2000001c 	.word	0x2000001c
 80018b0:	20000184 	.word	0x20000184

080018b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <HAL_GetTick+0x10>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	20000184 	.word	0x20000184

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_Delay+0x40>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffe0 	bl	80018b4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000001c 	.word	0x2000001c

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4906      	ldr	r1, [pc, #24]	; (80019a4 <__NVIC_EnableIRQ+0x34>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	; (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	; (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
         );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a70:	d301      	bcc.n	8001a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a72:	2301      	movs	r3, #1
 8001a74:	e00f      	b.n	8001a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a76:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <SysTick_Config+0x40>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7e:	210f      	movs	r1, #15
 8001a80:	f04f 30ff 	mov.w	r0, #4294967295
 8001a84:	f7ff ff90 	bl	80019a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <SysTick_Config+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <SysTick_Config+0x40>)
 8001a90:	2207      	movs	r2, #7
 8001a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000e010 	.word	0xe000e010

08001aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff2d 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b086      	sub	sp, #24
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001acc:	f7ff ff42 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	6978      	ldr	r0, [r7, #20]
 8001ad8:	f7ff ff90 	bl	80019fc <NVIC_EncodePriority>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff5f 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff35 	bl	8001970 <__NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffa2 	bl	8001a60 <SysTick_Config>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b08b      	sub	sp, #44	; 0x2c
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3a:	e127      	b.n	8001d8c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	f040 8116 	bne.w	8001d86 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d034      	beq.n	8001bcc <HAL_GPIO_Init+0xa4>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d80d      	bhi.n	8001b82 <HAL_GPIO_Init+0x5a>
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d02b      	beq.n	8001bc2 <HAL_GPIO_Init+0x9a>
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d804      	bhi.n	8001b78 <HAL_GPIO_Init+0x50>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d031      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d01c      	beq.n	8001bb0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b76:	e048      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d043      	beq.n	8001c04 <HAL_GPIO_Init+0xdc>
 8001b7c:	2b11      	cmp	r3, #17
 8001b7e:	d01b      	beq.n	8001bb8 <HAL_GPIO_Init+0x90>
          break;
 8001b80:	e043      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b82:	4a89      	ldr	r2, [pc, #548]	; (8001da8 <HAL_GPIO_Init+0x280>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d026      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001b88:	4a87      	ldr	r2, [pc, #540]	; (8001da8 <HAL_GPIO_Init+0x280>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d806      	bhi.n	8001b9c <HAL_GPIO_Init+0x74>
 8001b8e:	4a87      	ldr	r2, [pc, #540]	; (8001dac <HAL_GPIO_Init+0x284>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d020      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001b94:	4a86      	ldr	r2, [pc, #536]	; (8001db0 <HAL_GPIO_Init+0x288>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01d      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
          break;
 8001b9a:	e036      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b9c:	4a85      	ldr	r2, [pc, #532]	; (8001db4 <HAL_GPIO_Init+0x28c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001ba2:	4a85      	ldr	r2, [pc, #532]	; (8001db8 <HAL_GPIO_Init+0x290>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d016      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
 8001ba8:	4a84      	ldr	r2, [pc, #528]	; (8001dbc <HAL_GPIO_Init+0x294>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0xae>
          break;
 8001bae:	e02c      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e028      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e023      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e01e      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	623b      	str	r3, [r7, #32]
          break;
 8001bd4:	e019      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bde:	2304      	movs	r3, #4
 8001be0:	623b      	str	r3, [r7, #32]
          break;
 8001be2:	e012      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bec:	2308      	movs	r3, #8
 8001bee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	611a      	str	r2, [r3, #16]
          break;
 8001bf6:	e008      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	615a      	str	r2, [r3, #20]
          break;
 8001c02:	e002      	b.n	8001c0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2bff      	cmp	r3, #255	; 0xff
 8001c0e:	d801      	bhi.n	8001c14 <HAL_GPIO_Init+0xec>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	e001      	b.n	8001c18 <HAL_GPIO_Init+0xf0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3304      	adds	r3, #4
 8001c18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2bff      	cmp	r3, #255	; 0xff
 8001c1e:	d802      	bhi.n	8001c26 <HAL_GPIO_Init+0xfe>
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x104>
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	3b08      	subs	r3, #8
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	210f      	movs	r1, #15
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	6a39      	ldr	r1, [r7, #32]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	431a      	orrs	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8096 	beq.w	8001d86 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5a:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_GPIO_Init+0x298>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_GPIO_Init+0x298>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6193      	str	r3, [r2, #24]
 8001c66:	4b56      	ldr	r3, [pc, #344]	; (8001dc0 <HAL_GPIO_Init+0x298>)
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c72:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <HAL_GPIO_Init+0x29c>)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	220f      	movs	r2, #15
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_GPIO_Init+0x2a0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_GPIO_Init+0x19e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4a      	ldr	r2, [pc, #296]	; (8001dcc <HAL_GPIO_Init+0x2a4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00d      	beq.n	8001cc2 <HAL_GPIO_Init+0x19a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <HAL_GPIO_Init+0x2a8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d007      	beq.n	8001cbe <HAL_GPIO_Init+0x196>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_GPIO_Init+0x2ac>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_GPIO_Init+0x192>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x1a0>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x1a0>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x1a0>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x1a0>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cd8:	493a      	ldr	r1, [pc, #232]	; (8001dc4 <HAL_GPIO_Init+0x29c>)
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4938      	ldr	r1, [pc, #224]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	600b      	str	r3, [r1, #0]
 8001cfe:	e006      	b.n	8001d0e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	4933      	ldr	r1, [pc, #204]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	492e      	ldr	r1, [pc, #184]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	4929      	ldr	r1, [pc, #164]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	4924      	ldr	r1, [pc, #144]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
 8001d4e:	e006      	b.n	8001d5e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	491f      	ldr	r1, [pc, #124]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d006      	beq.n	8001d78 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	491a      	ldr	r1, [pc, #104]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60cb      	str	r3, [r1, #12]
 8001d76:	e006      	b.n	8001d86 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	4915      	ldr	r1, [pc, #84]	; (8001dd8 <HAL_GPIO_Init+0x2b0>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	3301      	adds	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f47f aed0 	bne.w	8001b3c <HAL_GPIO_Init+0x14>
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	372c      	adds	r7, #44	; 0x2c
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	10210000 	.word	0x10210000
 8001dac:	10110000 	.word	0x10110000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10310000 	.word	0x10310000
 8001db8:	10320000 	.word	0x10320000
 8001dbc:	10220000 	.word	0x10220000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40011400 	.word	0x40011400
 8001dd8:	40010400 	.word	0x40010400

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	611a      	str	r2, [r3, #16]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f806 	bl	8001e3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40010400 	.word	0x40010400

08001e3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e26c      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e70:	4b92      	ldr	r3, [pc, #584]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d00c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7c:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d112      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d10b      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d06c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x12c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d168      	bne.n	8001f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e246      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x76>
 8001eb8:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a7f      	ldr	r2, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e02e      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0xbc>
 8001ef2:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a71      	ldr	r2, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a67      	ldr	r2, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fcc2 	bl	80018b4 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fcbe 	bl	80018b4 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1fa      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe4>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fcae 	bl	80018b4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fcaa 	bl	80018b4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1e6      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x10c>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1ba      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4939      	ldr	r1, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fc63 	bl	80018b4 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fc5f 	bl	80018b4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e19b      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4927      	ldr	r1, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fc42 	bl	80018b4 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7ff fc3e 	bl	80018b4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e17a      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03a      	beq.n	80020d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff fc22 	bl	80018b4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fc1e 	bl	80018b4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e15a      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002092:	2001      	movs	r0, #1
 8002094:	f000 faa8 	bl	80025e8 <RCC_Delay>
 8002098:	e01c      	b.n	80020d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7ff fc08 	bl	80018b4 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff fc04 	bl	80018b4 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d908      	bls.n	80020c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e140      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	42420000 	.word	0x42420000
 80020c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e9      	bne.n	80020a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a6 	beq.w	800222e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b97      	ldr	r3, [pc, #604]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a93      	ldr	r2, [pc, #588]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b8e      	ldr	r3, [pc, #568]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a8a      	ldr	r2, [pc, #552]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff fbc5 	bl	80018b4 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff fbc1 	bl	80018b4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0fd      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b81      	ldr	r3, [pc, #516]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x312>
 8002154:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e02d      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x334>
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a75      	ldr	r2, [pc, #468]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a72      	ldr	r2, [pc, #456]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	e01c      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x356>
 800218c:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a6c      	ldr	r2, [pc, #432]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a66      	ldr	r2, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b64      	ldr	r3, [pc, #400]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a63      	ldr	r2, [pc, #396]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff fb75 	bl	80018b4 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff fb71 	bl	80018b4 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0ab      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCC_OscConfig+0x37e>
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7ff fb5f 	bl	80018b4 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff fb5b 	bl	80018b4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e095      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ee      	bne.n	80021fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8081 	beq.w	800233a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d061      	beq.n	8002308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d146      	bne.n	80022da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fb2f 	bl	80018b4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff fb2b 	bl	80018b4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e067      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	492d      	ldr	r1, [pc, #180]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a19      	ldr	r1, [r3, #32]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	430b      	orrs	r3, r1
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff faff 	bl	80018b4 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff fafb 	bl	80018b4 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e037      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x46a>
 80022d8:	e02f      	b.n	800233a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fae8 	bl	80018b4 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff fae4 	bl	80018b4 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e020      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x498>
 8002306:	e018      	b.n	800233a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e013      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	42420060 	.word	0x42420060

08002350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d0      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e073      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4936      	ldr	r1, [pc, #216]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7ff fa38 	bl	80018b4 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7ff fa34 	bl	80018b4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e053      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4601      	mov	r1, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	fa21 f303 	lsr.w	r3, r1, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f996 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
 8002518:	08003560 	.word	0x08003560
 800251c:	20000014 	.word	0x20000014
 8002520:	20000018 	.word	0x20000018

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b490      	push	{r4, r7}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800252c:	1d3c      	adds	r4, r7, #4
 800252e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002530:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254e:	4b23      	ldr	r3, [pc, #140]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b04      	cmp	r3, #4
 800255c:	d002      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x40>
 800255e:	2b08      	cmp	r3, #8
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0x46>
 8002562:	e02d      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002566:	623b      	str	r3, [r7, #32]
      break;
 8002568:	e02d      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	0c9b      	lsrs	r3, r3, #18
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002576:	4413      	add	r3, r2
 8002578:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800257c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c5b      	lsrs	r3, r3, #17
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002596:	4413      	add	r3, r2
 8002598:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800259c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a2:	fb02 f203 	mul.w	r2, r2, r3
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
 80025ae:	e004      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	623b      	str	r3, [r7, #32]
      break;
 80025be:	e002      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025c2:	623b      	str	r3, [r7, #32]
      break;
 80025c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c6:	6a3b      	ldr	r3, [r7, #32]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc90      	pop	{r4, r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	0800354c 	.word	0x0800354c
 80025d8:	0800355c 	.word	0x0800355c
 80025dc:	40021000 	.word	0x40021000
 80025e0:	007a1200 	.word	0x007a1200
 80025e4:	003d0900 	.word	0x003d0900

080025e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <RCC_Delay+0x34>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <RCC_Delay+0x38>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0a5b      	lsrs	r3, r3, #9
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
 8002602:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002604:	bf00      	nop
  }
  while (Delay --);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	60fa      	str	r2, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f9      	bne.n	8002604 <RCC_Delay+0x1c>
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000014 	.word	0x20000014
 8002620:	10624dd3 	.word	0x10624dd3

08002624 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e053      	b.n	80026de <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7fe ff61 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2202      	movs	r2, #2
 800265a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	ea42 0103 	orr.w	r1, r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	0c1a      	lsrs	r2, r3, #16
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f002 0204 	and.w	r2, r2, #4
 80026bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69da      	ldr	r2, [r3, #28]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b088      	sub	sp, #32
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	4613      	mov	r3, r2
 80026f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_SPI_Transmit+0x22>
 8002704:	2302      	movs	r3, #2
 8002706:	e11e      	b.n	8002946 <HAL_SPI_Transmit+0x260>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002710:	f7ff f8d0 	bl	80018b4 <HAL_GetTick>
 8002714:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d002      	beq.n	800272c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	77fb      	strb	r3, [r7, #31]
    goto error;
 800272a:	e103      	b.n	8002934 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_SPI_Transmit+0x52>
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800273c:	e0fa      	b.n	8002934 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	88fa      	ldrh	r2, [r7, #6]
 8002756:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	88fa      	ldrh	r2, [r7, #6]
 800275c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002784:	d107      	bne.n	8002796 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002794:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a0:	2b40      	cmp	r3, #64	; 0x40
 80027a2:	d007      	beq.n	80027b4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027bc:	d14b      	bne.n	8002856 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_SPI_Transmit+0xe6>
 80027c6:	8afb      	ldrh	r3, [r7, #22]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d13e      	bne.n	800284a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d0:	881a      	ldrh	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	1c9a      	adds	r2, r3, #2
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80027f0:	e02b      	b.n	800284a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d112      	bne.n	8002826 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	1c9a      	adds	r2, r3, #2
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	86da      	strh	r2, [r3, #54]	; 0x36
 8002824:	e011      	b.n	800284a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002826:	f7ff f845 	bl	80018b4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d803      	bhi.n	800283e <HAL_SPI_Transmit+0x158>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d102      	bne.n	8002844 <HAL_SPI_Transmit+0x15e>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002848:	e074      	b.n	8002934 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ce      	bne.n	80027f2 <HAL_SPI_Transmit+0x10c>
 8002854:	e04c      	b.n	80028f0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_SPI_Transmit+0x17e>
 800285e:	8afb      	ldrh	r3, [r7, #22]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d140      	bne.n	80028e6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	7812      	ldrb	r2, [r2, #0]
 8002870:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800288a:	e02c      	b.n	80028e6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b02      	cmp	r3, #2
 8002898:	d113      	bne.n	80028c2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	330c      	adds	r3, #12
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	86da      	strh	r2, [r3, #54]	; 0x36
 80028c0:	e011      	b.n	80028e6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c2:	f7fe fff7 	bl	80018b4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d803      	bhi.n	80028da <HAL_SPI_Transmit+0x1f4>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_Transmit+0x1fa>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028e4:	e026      	b.n	8002934 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1cd      	bne.n	800288c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	6839      	ldr	r1, [r7, #0]
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 fb91 	bl	800301c <SPI_EndRxTxTransaction>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	77fb      	strb	r3, [r7, #31]
 8002930:	e000      	b.n	8002934 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002932:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002944:	7ffb      	ldrb	r3, [r7, #31]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b088      	sub	sp, #32
 8002952:	af02      	add	r7, sp, #8
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800296a:	d112      	bne.n	8002992 <HAL_SPI_Receive+0x44>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10e      	bne.n	8002992 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2204      	movs	r2, #4
 8002978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f8e9 	bl	8002b60 <HAL_SPI_TransmitReceive>
 800298e:	4603      	mov	r3, r0
 8002990:	e0e2      	b.n	8002b58 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_SPI_Receive+0x52>
 800299c:	2302      	movs	r3, #2
 800299e:	e0db      	b.n	8002b58 <HAL_SPI_Receive+0x20a>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a8:	f7fe ff84 	bl	80018b4 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
 80029bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029be:	e0c2      	b.n	8002b46 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_SPI_Receive+0x7e>
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80029d0:	e0b9      	b.n	8002b46 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2204      	movs	r2, #4
 80029d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	88fa      	ldrh	r2, [r7, #6]
 80029f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a18:	d107      	bne.n	8002a2a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d007      	beq.n	8002a48 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d162      	bne.n	8002b16 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a50:	e02e      	b.n	8002ab0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d115      	bne.n	8002a8c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f103 020c 	add.w	r2, r3, #12
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a8a:	e011      	b.n	8002ab0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a8c:	f7fe ff12 	bl	80018b4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d803      	bhi.n	8002aa4 <HAL_SPI_Receive+0x156>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa2:	d102      	bne.n	8002aaa <HAL_SPI_Receive+0x15c>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d102      	bne.n	8002ab0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002aae:	e04a      	b.n	8002b46 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1cb      	bne.n	8002a52 <HAL_SPI_Receive+0x104>
 8002aba:	e031      	b.n	8002b20 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d113      	bne.n	8002af2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	b292      	uxth	r2, r2
 8002ad6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	1c9a      	adds	r2, r3, #2
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002af0:	e011      	b.n	8002b16 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af2:	f7fe fedf 	bl	80018b4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d803      	bhi.n	8002b0a <HAL_SPI_Receive+0x1bc>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d102      	bne.n	8002b10 <HAL_SPI_Receive+0x1c2>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b14:	e017      	b.n	8002b46 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1cd      	bne.n	8002abc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 fa27 	bl	8002f78 <SPI_EndRxTransaction>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
 8002b42:	e000      	b.n	8002b46 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002b44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_SPI_TransmitReceive+0x26>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e18a      	b.n	8002e9c <HAL_SPI_TransmitReceive+0x33c>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b8e:	f7fe fe91 	bl	80018b4 <HAL_GetTick>
 8002b92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d00f      	beq.n	8002bd0 <HAL_SPI_TransmitReceive+0x70>
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bb6:	d107      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d103      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x68>
 8002bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d003      	beq.n	8002bd0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002bce:	e15b      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_SPI_TransmitReceive+0x82>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_SPI_TransmitReceive+0x82>
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002be8:	e14e      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d003      	beq.n	8002bfe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	887a      	ldrh	r2, [r7, #2]
 8002c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	887a      	ldrh	r2, [r7, #2]
 8002c26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d007      	beq.n	8002c52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5a:	d178      	bne.n	8002d4e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_SPI_TransmitReceive+0x10a>
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d166      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	881a      	ldrh	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	1c9a      	adds	r2, r3, #2
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c8e:	e053      	b.n	8002d38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d11b      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x176>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d016      	beq.n	8002cd6 <HAL_SPI_TransmitReceive+0x176>
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d113      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	1c9a      	adds	r2, r3, #2
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d119      	bne.n	8002d18 <HAL_SPI_TransmitReceive+0x1b8>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d014      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	1c9a      	adds	r2, r3, #2
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d14:	2301      	movs	r3, #1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d18:	f7fe fdcc 	bl	80018b4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d807      	bhi.n	8002d38 <HAL_SPI_TransmitReceive+0x1d8>
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2e:	d003      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d36:	e0a7      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1a6      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x130>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1a1      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x130>
 8002d4c:	e07c      	b.n	8002e48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x1fc>
 8002d56:	8b7b      	ldrh	r3, [r7, #26]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d16b      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	330c      	adds	r3, #12
 8002d66:	7812      	ldrb	r2, [r2, #0]
 8002d68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d82:	e057      	b.n	8002e34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d11c      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x26c>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d017      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x26c>
 8002d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d114      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	7812      	ldrb	r2, [r2, #0]
 8002dae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d119      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x2ae>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d014      	beq.n	8002e0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e0e:	f7fe fd51 	bl	80018b4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d803      	bhi.n	8002e26 <HAL_SPI_TransmitReceive+0x2c6>
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d102      	bne.n	8002e2c <HAL_SPI_TransmitReceive+0x2cc>
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e32:	e029      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1a2      	bne.n	8002d84 <HAL_SPI_TransmitReceive+0x224>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d19d      	bne.n	8002d84 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f8e5 	bl	800301c <SPI_EndRxTxTransaction>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002e64:	e010      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10b      	bne.n	8002e86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	e000      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002e86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3730      	adds	r7, #48	; 0x30
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eb4:	e04c      	b.n	8002f50 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d048      	beq.n	8002f50 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ebe:	f7fe fcf9 	bl	80018b4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d902      	bls.n	8002ed4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d13d      	bne.n	8002f50 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ee2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eec:	d111      	bne.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef6:	d004      	beq.n	8002f02 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f00:	d107      	bne.n	8002f12 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1a:	d10f      	bne.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e00f      	b.n	8002f70 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d1a3      	bne.n	8002eb6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f8c:	d111      	bne.n	8002fb2 <SPI_EndRxTransaction+0x3a>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f96:	d004      	beq.n	8002fa2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa0:	d107      	bne.n	8002fb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fba:	d117      	bne.n	8002fec <SPI_EndRxTransaction+0x74>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc4:	d112      	bne.n	8002fec <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2101      	movs	r1, #1
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ff67 	bl	8002ea4 <SPI_WaitFlagStateUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01a      	beq.n	8003012 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e013      	b.n	8003014 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ff54 	bl	8002ea4 <SPI_WaitFlagStateUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e000      	b.n	8003014 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff ff36 	bl	8002ea4 <SPI_WaitFlagStateUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f043 0220 	orr.w	r2, r3, #32
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e000      	b.n	8003050 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e01d      	b.n	80030a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe fb7c 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 f8e4 	bl	8003264 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_TIM_ConfigClockSource+0x18>
 8003108:	2302      	movs	r3, #2
 800310a:	e0a6      	b.n	800325a <HAL_TIM_ConfigClockSource+0x166>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800312a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003132:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b40      	cmp	r3, #64	; 0x40
 8003142:	d067      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0x120>
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d80b      	bhi.n	8003160 <HAL_TIM_ConfigClockSource+0x6c>
 8003148:	2b10      	cmp	r3, #16
 800314a:	d073      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x140>
 800314c:	2b10      	cmp	r3, #16
 800314e:	d802      	bhi.n	8003156 <HAL_TIM_ConfigClockSource+0x62>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d06f      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003154:	e078      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003156:	2b20      	cmp	r3, #32
 8003158:	d06c      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x140>
 800315a:	2b30      	cmp	r3, #48	; 0x30
 800315c:	d06a      	beq.n	8003234 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800315e:	e073      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003160:	2b70      	cmp	r3, #112	; 0x70
 8003162:	d00d      	beq.n	8003180 <HAL_TIM_ConfigClockSource+0x8c>
 8003164:	2b70      	cmp	r3, #112	; 0x70
 8003166:	d804      	bhi.n	8003172 <HAL_TIM_ConfigClockSource+0x7e>
 8003168:	2b50      	cmp	r3, #80	; 0x50
 800316a:	d033      	beq.n	80031d4 <HAL_TIM_ConfigClockSource+0xe0>
 800316c:	2b60      	cmp	r3, #96	; 0x60
 800316e:	d041      	beq.n	80031f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003170:	e06a      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003176:	d066      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x152>
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317c:	d017      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800317e:	e063      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6899      	ldr	r1, [r3, #8]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f000 f941 	bl	8003416 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]
      break;
 80031ac:	e04c      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f000 f92a 	bl	8003416 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d0:	609a      	str	r2, [r3, #8]
      break;
 80031d2:	e039      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f000 f8a1 	bl	8003328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2150      	movs	r1, #80	; 0x50
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f8f8 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 80031f2:	e029      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	461a      	mov	r2, r3
 8003202:	f000 f8bf 	bl	8003384 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2160      	movs	r1, #96	; 0x60
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f8e8 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 8003212:	e019      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	461a      	mov	r2, r3
 8003222:	f000 f881 	bl	8003328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2140      	movs	r1, #64	; 0x40
 800322c:	4618      	mov	r0, r3
 800322e:	f000 f8d8 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 8003232:	e009      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f000 f8cf 	bl	80033e2 <TIM_ITRx_SetConfig>
      break;
 8003244:	e000      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003246:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a29      	ldr	r2, [pc, #164]	; (800331c <TIM_Base_SetConfig+0xb8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00b      	beq.n	8003294 <TIM_Base_SetConfig+0x30>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003282:	d007      	beq.n	8003294 <TIM_Base_SetConfig+0x30>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a26      	ldr	r2, [pc, #152]	; (8003320 <TIM_Base_SetConfig+0xbc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <TIM_Base_SetConfig+0x30>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a25      	ldr	r2, [pc, #148]	; (8003324 <TIM_Base_SetConfig+0xc0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <TIM_Base_SetConfig+0xb8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <TIM_Base_SetConfig+0x62>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b4:	d007      	beq.n	80032c6 <TIM_Base_SetConfig+0x62>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a19      	ldr	r2, [pc, #100]	; (8003320 <TIM_Base_SetConfig+0xbc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d003      	beq.n	80032c6 <TIM_Base_SetConfig+0x62>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <TIM_Base_SetConfig+0xc0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d108      	bne.n	80032d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a07      	ldr	r2, [pc, #28]	; (800331c <TIM_Base_SetConfig+0xb8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d103      	bne.n	800330c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	615a      	str	r2, [r3, #20]
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40000400 	.word	0x40000400
 8003324:	40000800 	.word	0x40000800

08003328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f023 0201 	bic.w	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f023 030a 	bic.w	r3, r3, #10
 8003364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	621a      	str	r2, [r3, #32]
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	f023 0210 	bic.w	r2, r3, #16
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	031b      	lsls	r3, r3, #12
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	621a      	str	r2, [r3, #32]
}
 80033d8:	bf00      	nop
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	f043 0307 	orr.w	r3, r3, #7
 8003404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	609a      	str	r2, [r3, #8]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003416:	b480      	push	{r7}
 8003418:	b087      	sub	sp, #28
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003430:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	021a      	lsls	r2, r3, #8
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	431a      	orrs	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4313      	orrs	r3, r2
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	609a      	str	r2, [r3, #8]
}
 800344a:	bf00      	nop
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003468:	2302      	movs	r3, #2
 800346a:	e032      	b.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <__libc_init_array>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	2500      	movs	r5, #0
 80034e0:	4e0c      	ldr	r6, [pc, #48]	; (8003514 <__libc_init_array+0x38>)
 80034e2:	4c0d      	ldr	r4, [pc, #52]	; (8003518 <__libc_init_array+0x3c>)
 80034e4:	1ba4      	subs	r4, r4, r6
 80034e6:	10a4      	asrs	r4, r4, #2
 80034e8:	42a5      	cmp	r5, r4
 80034ea:	d109      	bne.n	8003500 <__libc_init_array+0x24>
 80034ec:	f000 f822 	bl	8003534 <_init>
 80034f0:	2500      	movs	r5, #0
 80034f2:	4e0a      	ldr	r6, [pc, #40]	; (800351c <__libc_init_array+0x40>)
 80034f4:	4c0a      	ldr	r4, [pc, #40]	; (8003520 <__libc_init_array+0x44>)
 80034f6:	1ba4      	subs	r4, r4, r6
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	42a5      	cmp	r5, r4
 80034fc:	d105      	bne.n	800350a <__libc_init_array+0x2e>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003504:	4798      	blx	r3
 8003506:	3501      	adds	r5, #1
 8003508:	e7ee      	b.n	80034e8 <__libc_init_array+0xc>
 800350a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800350e:	4798      	blx	r3
 8003510:	3501      	adds	r5, #1
 8003512:	e7f2      	b.n	80034fa <__libc_init_array+0x1e>
 8003514:	08003570 	.word	0x08003570
 8003518:	08003570 	.word	0x08003570
 800351c:	08003570 	.word	0x08003570
 8003520:	08003574 	.word	0x08003574

08003524 <memset>:
 8003524:	4603      	mov	r3, r0
 8003526:	4402      	add	r2, r0
 8003528:	4293      	cmp	r3, r2
 800352a:	d100      	bne.n	800352e <memset+0xa>
 800352c:	4770      	bx	lr
 800352e:	f803 1b01 	strb.w	r1, [r3], #1
 8003532:	e7f9      	b.n	8003528 <memset+0x4>

08003534 <_init>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr

08003540 <_fini>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr
