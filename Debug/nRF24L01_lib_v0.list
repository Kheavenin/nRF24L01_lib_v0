
nRF24L01_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080020a0  080020a0  000120a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c4  080020c4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080020c4  080020c4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c4  080020c4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c4  080020c4  000120c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020c8  080020c8  000120c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080020cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000001c  080020e8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080020e8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f46  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001453  00000000  00000000  00025f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000678  00000000  00000000  000273e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  00027a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012fb2  00000000  00000000  00028008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005e65  00000000  00000000  0003afba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000661c8  00000000  00000000  00040e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a6fe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017dc  00000000  00000000  000a7064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002088 	.word	0x08002088

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002088 	.word	0x08002088

0800014c <readRegister>:
/**
 * @Brief	Read register function
 * @Param	addr - address of register to read.
 * @Ratval	return read register content.
 */
uint8_t readRegister(uint8_t addr) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = R_REGISTER | addr;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	737b      	strb	r3, [r7, #13]
	uint8_t reg;
	uint8_t *pCmd = &cmd;
 800015a:	f107 030d 	add.w	r3, r7, #13
 800015e:	61fb      	str	r3, [r7, #28]
	uint8_t *pReg = &reg;
 8000160:	f107 030c 	add.w	r3, r7, #12
 8000164:	61bb      	str	r3, [r7, #24]
	size_t cmdSize = sizeof(cmd);
 8000166:	2301      	movs	r3, #1
 8000168:	617b      	str	r3, [r7, #20]
	size_t regSize = sizeof(reg);
 800016a:	2301      	movs	r3, #1
 800016c:	613b      	str	r3, [r7, #16]

	csnLow();
 800016e:	f000 f8b1 	bl	80002d4 <csnLow>
	HAL_StatusTypeDef statusRead;
	HAL_StatusTypeDef statusCmd;
	statusCmd = HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT);
 8000172:	697b      	ldr	r3, [r7, #20]
 8000174:	b29a      	uxth	r2, r3
 8000176:	230a      	movs	r3, #10
 8000178:	69f9      	ldr	r1, [r7, #28]
 800017a:	480c      	ldr	r0, [pc, #48]	; (80001ac <readRegister+0x60>)
 800017c:	f001 fa9f 	bl	80016be <HAL_SPI_Transmit>
 8000180:	4603      	mov	r3, r0
 8000182:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(1);
 8000184:	2001      	movs	r0, #1
 8000186:	f000 fb8b 	bl	80008a0 <HAL_Delay>
	statusRead = HAL_SPI_Receive(&hspi1, pReg, regSize, SPI_TIMEOUT);
 800018a:	693b      	ldr	r3, [r7, #16]
 800018c:	b29a      	uxth	r2, r3
 800018e:	230a      	movs	r3, #10
 8000190:	69b9      	ldr	r1, [r7, #24]
 8000192:	4806      	ldr	r0, [pc, #24]	; (80001ac <readRegister+0x60>)
 8000194:	f001 fbc7 	bl	8001926 <HAL_SPI_Receive>
 8000198:	4603      	mov	r3, r0
 800019a:	73bb      	strb	r3, [r7, #14]
#if 0
	if (HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT))
		HAL_SPI_Receive(&hspi1, pReg, regSize, SPI_TIMEOUT);
	 #endif */

	csnHigh();
 800019c:	f000 f8a6 	bl	80002ec <csnHigh>
	return reg;
 80001a0:	7b3b      	ldrb	r3, [r7, #12]
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	3720      	adds	r7, #32
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000044 	.word	0x20000044

080001b0 <writeRegister>:
/**
 * @Brief	Write register funtion.
 * @Param	addr - address of register to write
 * @Param	val - value to write into register.
 */
void writeRegister(uint8_t addr, uint8_t val) {
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b086      	sub	sp, #24
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	460a      	mov	r2, r1
 80001ba:	71fb      	strb	r3, [r7, #7]
 80001bc:	4613      	mov	r3, r2
 80001be:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = W_REGISTER | addr;
 80001c0:	79fb      	ldrb	r3, [r7, #7]
 80001c2:	f043 0320 	orr.w	r3, r3, #32
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	727b      	strb	r3, [r7, #9]
	uint8_t *pCmd = &cmd;
 80001ca:	f107 0309 	add.w	r3, r7, #9
 80001ce:	617b      	str	r3, [r7, #20]
	size_t cmdSize = sizeof(cmd);
 80001d0:	2301      	movs	r3, #1
 80001d2:	613b      	str	r3, [r7, #16]
	size_t valSize = sizeof(val);
 80001d4:	2301      	movs	r3, #1
 80001d6:	60fb      	str	r3, [r7, #12]
	csnLow();
 80001d8:	f000 f87c 	bl	80002d4 <csnLow>


	HAL_StatusTypeDef statusSend;
	HAL_StatusTypeDef statusRead;
	statusSend = HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT);
 80001dc:	693b      	ldr	r3, [r7, #16]
 80001de:	b29a      	uxth	r2, r3
 80001e0:	230a      	movs	r3, #10
 80001e2:	6979      	ldr	r1, [r7, #20]
 80001e4:	480b      	ldr	r0, [pc, #44]	; (8000214 <writeRegister+0x64>)
 80001e6:	f001 fa6a 	bl	80016be <HAL_SPI_Transmit>
 80001ea:	4603      	mov	r3, r0
 80001ec:	72fb      	strb	r3, [r7, #11]
	HAL_Delay(1);
 80001ee:	2001      	movs	r0, #1
 80001f0:	f000 fb56 	bl	80008a0 <HAL_Delay>
	statusRead = HAL_SPI_Transmit(&hspi1, &val, valSize, SPI_TIMEOUT);
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	b29a      	uxth	r2, r3
 80001f8:	1db9      	adds	r1, r7, #6
 80001fa:	230a      	movs	r3, #10
 80001fc:	4805      	ldr	r0, [pc, #20]	; (8000214 <writeRegister+0x64>)
 80001fe:	f001 fa5e 	bl	80016be <HAL_SPI_Transmit>
 8000202:	4603      	mov	r3, r0
 8000204:	72bb      	strb	r3, [r7, #10]
	if (HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT)) {
		HAL_SPI_Transmit(&hspi1, &val, valSize, SPI_TIMEOUT);
	}
#endif
	 */
	csnHigh();
 8000206:	f000 f871 	bl	80002ec <csnHigh>
}
 800020a:	bf00      	nop
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000044 	.word	0x20000044

08000218 <multiRead>:


/* Multi bytes read/write register functions */
void multiRead(uint8_t addr, uint8_t *buf, size_t bufSize) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd = R_REGISTER | addr;
 8000226:	7bfb      	ldrb	r3, [r7, #15]
 8000228:	757b      	strb	r3, [r7, #21]
	uint8_t *pCmd = &cmd;
 800022a:	f107 0315 	add.w	r3, r7, #21
 800022e:	61fb      	str	r3, [r7, #28]
	size_t cmdSize = sizeof(cmd);
 8000230:	2301      	movs	r3, #1
 8000232:	61bb      	str	r3, [r7, #24]
	csnLow();
 8000234:	f000 f84e 	bl	80002d4 <csnLow>

	HAL_StatusTypeDef statusRead;
	HAL_StatusTypeDef statusCmd;
	statusCmd = HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT);
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	b29a      	uxth	r2, r3
 800023c:	230a      	movs	r3, #10
 800023e:	69f9      	ldr	r1, [r7, #28]
 8000240:	480b      	ldr	r0, [pc, #44]	; (8000270 <multiRead+0x58>)
 8000242:	f001 fa3c 	bl	80016be <HAL_SPI_Transmit>
 8000246:	4603      	mov	r3, r0
 8000248:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f000 fb28 	bl	80008a0 <HAL_Delay>
	statusRead = HAL_SPI_Receive(&hspi1, buf, bufSize, SPI_TIMEOUT);
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	b29a      	uxth	r2, r3
 8000254:	230a      	movs	r3, #10
 8000256:	68b9      	ldr	r1, [r7, #8]
 8000258:	4805      	ldr	r0, [pc, #20]	; (8000270 <multiRead+0x58>)
 800025a:	f001 fb64 	bl	8001926 <HAL_SPI_Receive>
 800025e:	4603      	mov	r3, r0
 8000260:	75bb      	strb	r3, [r7, #22]

	csnHigh();
 8000262:	f000 f843 	bl	80002ec <csnHigh>
}
 8000266:	bf00      	nop
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000044 	.word	0x20000044

08000274 <multiWrite>:
void multiWrite(uint8_t addr, uint8_t *buf, size_t bufSize) {
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
 8000280:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd = W_REGISTER | addr;
 8000282:	7bfb      	ldrb	r3, [r7, #15]
 8000284:	f043 0320 	orr.w	r3, r3, #32
 8000288:	b2db      	uxtb	r3, r3
 800028a:	757b      	strb	r3, [r7, #21]
	uint8_t *pCmd = &cmd;
 800028c:	f107 0315 	add.w	r3, r7, #21
 8000290:	61fb      	str	r3, [r7, #28]
	size_t cmdSize = sizeof(cmd);
 8000292:	2301      	movs	r3, #1
 8000294:	61bb      	str	r3, [r7, #24]
	csnLow();
 8000296:	f000 f81d 	bl	80002d4 <csnLow>

	HAL_StatusTypeDef statusSend;
	HAL_StatusTypeDef statusRead;
	statusSend = HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT);
 800029a:	69bb      	ldr	r3, [r7, #24]
 800029c:	b29a      	uxth	r2, r3
 800029e:	230a      	movs	r3, #10
 80002a0:	69f9      	ldr	r1, [r7, #28]
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <multiWrite+0x5c>)
 80002a4:	f001 fa0b 	bl	80016be <HAL_SPI_Transmit>
 80002a8:	4603      	mov	r3, r0
 80002aa:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(1);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 faf7 	bl	80008a0 <HAL_Delay>
	statusRead = HAL_SPI_Transmit(&hspi1, buf, bufSize, SPI_TIMEOUT);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	230a      	movs	r3, #10
 80002b8:	68b9      	ldr	r1, [r7, #8]
 80002ba:	4805      	ldr	r0, [pc, #20]	; (80002d0 <multiWrite+0x5c>)
 80002bc:	f001 f9ff 	bl	80016be <HAL_SPI_Transmit>
 80002c0:	4603      	mov	r3, r0
 80002c2:	75bb      	strb	r3, [r7, #22]

	csnHigh();
 80002c4:	f000 f812 	bl	80002ec <csnHigh>
}
 80002c8:	bf00      	nop
 80002ca:	3720      	adds	r7, #32
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000044 	.word	0x20000044

080002d4 <csnLow>:
}

/**
 * @Brief	Set low level on CSN line
 */
void csnLow() {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2140      	movs	r1, #64	; 0x40
 80002dc:	4802      	ldr	r0, [pc, #8]	; (80002e8 <csnLow+0x14>)
 80002de:	f000 fd69 	bl	8000db4 <HAL_GPIO_WritePin>
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010c00 	.word	0x40010c00

080002ec <csnHigh>:

/**
 * @Brief	Set high level on CSN line
 */
void csnHigh() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2140      	movs	r1, #64	; 0x40
 80002f4:	4802      	ldr	r0, [pc, #8]	; (8000300 <csnHigh+0x14>)
 80002f6:	f000 fd5d 	bl	8000db4 <HAL_GPIO_WritePin>
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010c00 	.word	0x40010c00

08000304 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000318:	4b4c      	ldr	r3, [pc, #304]	; (800044c <MX_GPIO_Init+0x148>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a4b      	ldr	r2, [pc, #300]	; (800044c <MX_GPIO_Init+0x148>)
 800031e:	f043 0310 	orr.w	r3, r3, #16
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b49      	ldr	r3, [pc, #292]	; (800044c <MX_GPIO_Init+0x148>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0310 	and.w	r3, r3, #16
 800032c:	60fb      	str	r3, [r7, #12]
 800032e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000330:	4b46      	ldr	r3, [pc, #280]	; (800044c <MX_GPIO_Init+0x148>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a45      	ldr	r2, [pc, #276]	; (800044c <MX_GPIO_Init+0x148>)
 8000336:	f043 0320 	orr.w	r3, r3, #32
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b43      	ldr	r3, [pc, #268]	; (800044c <MX_GPIO_Init+0x148>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0320 	and.w	r3, r3, #32
 8000344:	60bb      	str	r3, [r7, #8]
 8000346:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000348:	4b40      	ldr	r3, [pc, #256]	; (800044c <MX_GPIO_Init+0x148>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a3f      	ldr	r2, [pc, #252]	; (800044c <MX_GPIO_Init+0x148>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b3d      	ldr	r3, [pc, #244]	; (800044c <MX_GPIO_Init+0x148>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0304 	and.w	r3, r3, #4
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000360:	4b3a      	ldr	r3, [pc, #232]	; (800044c <MX_GPIO_Init+0x148>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a39      	ldr	r2, [pc, #228]	; (800044c <MX_GPIO_Init+0x148>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b37      	ldr	r3, [pc, #220]	; (800044c <MX_GPIO_Init+0x148>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0308 	and.w	r3, r3, #8
 8000374:	603b      	str	r3, [r7, #0]
 8000376:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2180      	movs	r1, #128	; 0x80
 800037c:	4834      	ldr	r0, [pc, #208]	; (8000450 <MX_GPIO_Init+0x14c>)
 800037e:	f000 fd19 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	4833      	ldr	r0, [pc, #204]	; (8000454 <MX_GPIO_Init+0x150>)
 8000388:	f000 fd14 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000392:	4b31      	ldr	r3, [pc, #196]	; (8000458 <MX_GPIO_Init+0x154>)
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	4619      	mov	r1, r3
 80003a0:	482b      	ldr	r0, [pc, #172]	; (8000450 <MX_GPIO_Init+0x14c>)
 80003a2:	f000 fbad 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80003a6:	f641 737f 	movw	r3, #8063	; 0x1f7f
 80003aa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003ac:	2303      	movs	r3, #3
 80003ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	4826      	ldr	r0, [pc, #152]	; (8000450 <MX_GPIO_Init+0x14c>)
 80003b8:	f000 fba2 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80003bc:	f649 731f 	movw	r3, #40735	; 0x9f1f
 80003c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003c2:	2303      	movs	r3, #3
 80003c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	4619      	mov	r1, r3
 80003cc:	4823      	ldr	r0, [pc, #140]	; (800045c <MX_GPIO_Init+0x158>)
 80003ce:	f000 fb97 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 80003d2:	f64f 73b7 	movw	r3, #65463	; 0xffb7
 80003d6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80003d8:	2303      	movs	r3, #3
 80003da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4619      	mov	r1, r3
 80003e2:	481c      	ldr	r0, [pc, #112]	; (8000454 <MX_GPIO_Init+0x150>)
 80003e4:	f000 fb8c 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2302      	movs	r3, #2
 80003f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	4814      	ldr	r0, [pc, #80]	; (8000450 <MX_GPIO_Init+0x14c>)
 8000400:	f000 fb7e 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000404:	2304      	movs	r3, #4
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000408:	2303      	movs	r3, #3
 800040a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	4619      	mov	r1, r3
 8000412:	4813      	ldr	r0, [pc, #76]	; (8000460 <MX_GPIO_Init+0x15c>)
 8000414:	f000 fb74 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000418:	2340      	movs	r3, #64	; 0x40
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	2301      	movs	r3, #1
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	2302      	movs	r3, #2
 8000426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4809      	ldr	r0, [pc, #36]	; (8000454 <MX_GPIO_Init+0x150>)
 8000430:	f000 fb66 	bl	8000b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	2028      	movs	r0, #40	; 0x28
 800043a:	f000 fb2a 	bl	8000a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043e:	2028      	movs	r0, #40	; 0x28
 8000440:	f000 fb43 	bl	8000aca <HAL_NVIC_EnableIRQ>

}
 8000444:	bf00      	nop
 8000446:	3720      	adds	r7, #32
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	40011000 	.word	0x40011000
 8000454:	40010c00 	.word	0x40010c00
 8000458:	10110000 	.word	0x10110000
 800045c:	40010800 	.word	0x40010800
 8000460:	40011400 	.word	0x40011400

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 f9b8 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f830 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000470:	f7ff ff48 	bl	8000304 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000474:	f000 f874 	bl	8000560 <MX_SPI1_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if TEST_0
	writeRegister(CONFIG, 0x02);
 8000478:	2102      	movs	r1, #2
 800047a:	2000      	movs	r0, #0
 800047c:	f7ff fe98 	bl	80001b0 <writeRegister>
	regTmp = readRegister(CONFIG);
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff fe63 	bl	800014c <readRegister>
 8000486:	4603      	mov	r3, r0
 8000488:	461a      	mov	r2, r3
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <main+0x60>)
 800048c:	701a      	strb	r2, [r3, #0]

#if TEST_2
		/*
		 * test of multi register write read
		 */
		readRegister(CONFIG);
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff fe5c 	bl	800014c <readRegister>
		HAL_Delay(100);
 8000494:	2064      	movs	r0, #100	; 0x64
 8000496:	f000 fa03 	bl	80008a0 <HAL_Delay>
		multiRead(RX_ADDR_P0, pAddrRead, sizeof(addrRead));
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <main+0x64>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2205      	movs	r2, #5
 80004a0:	4619      	mov	r1, r3
 80004a2:	200a      	movs	r0, #10
 80004a4:	f7ff feb8 	bl	8000218 <multiRead>
		HAL_Delay(100);
 80004a8:	2064      	movs	r0, #100	; 0x64
 80004aa:	f000 f9f9 	bl	80008a0 <HAL_Delay>
		multiWrite(RX_ADDR_P0, pAddrWrite, sizeof(addrWrite));
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <main+0x68>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2205      	movs	r2, #5
 80004b4:	4619      	mov	r1, r3
 80004b6:	200a      	movs	r0, #10
 80004b8:	f7ff fedc 	bl	8000274 <multiWrite>
		HAL_Delay(100);
 80004bc:	2064      	movs	r0, #100	; 0x64
 80004be:	f000 f9ef 	bl	80008a0 <HAL_Delay>
		readRegister(CONFIG);
 80004c2:	e7e4      	b.n	800048e <main+0x2a>
 80004c4:	20000038 	.word	0x20000038
 80004c8:	20000008 	.word	0x20000008
 80004cc:	2000000c 	.word	0x2000000c

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b090      	sub	sp, #64	; 0x40
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0318 	add.w	r3, r7, #24
 80004da:	2228      	movs	r2, #40	; 0x28
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 fdca 	bl	8002078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f6:	2301      	movs	r3, #1
 80004f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fa:	2310      	movs	r3, #16
 80004fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fe:	2302      	movs	r3, #2
 8000500:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000502:	2300      	movs	r3, #0
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000506:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800050a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4618      	mov	r0, r3
 8000512:	f000 fc89 	bl	8000e28 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800051c:	f000 f819 	bl	8000552 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	2302      	movs	r3, #2
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800052c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2101      	movs	r1, #1
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fef4 	bl	8001328 <HAL_RCC_ClockConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000546:	f000 f804 	bl	8000552 <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	3740      	adds	r7, #64	; 0x40
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
	...

08000560 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000564:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000566:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <MX_SPI1_Init+0x68>)
 8000568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_SPI1_Init+0x64>)
 800056c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_SPI1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000586:	2200      	movs	r2, #0
 8000588:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_SPI1_Init+0x64>)
 800058c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000590:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000594:	2228      	movs	r2, #40	; 0x28
 8000596:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <MX_SPI1_Init+0x64>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_SPI1_Init+0x64>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <MX_SPI1_Init+0x64>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_SPI1_Init+0x64>)
 80005ac:	220a      	movs	r2, #10
 80005ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005b0:	4804      	ldr	r0, [pc, #16]	; (80005c4 <MX_SPI1_Init+0x64>)
 80005b2:	f001 f823 	bl	80015fc <HAL_SPI_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80005bc:	f7ff ffc9 	bl	8000552 <Error_Handler>
  }

}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000044 	.word	0x20000044
 80005c8:	40013000 	.word	0x40013000

080005cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <HAL_SPI_MspInit+0x88>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d12f      	bne.n	800064c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ec:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <HAL_SPI_MspInit+0x8c>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a19      	ldr	r2, [pc, #100]	; (8000658 <HAL_SPI_MspInit+0x8c>)
 80005f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_SPI_MspInit+0x8c>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_SPI_MspInit+0x8c>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <HAL_SPI_MspInit+0x8c>)
 800060a:	f043 0304 	orr.w	r3, r3, #4
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <HAL_SPI_MspInit+0x8c>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800061c:	23a0      	movs	r3, #160	; 0xa0
 800061e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000624:	2303      	movs	r3, #3
 8000626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <HAL_SPI_MspInit+0x90>)
 8000630:	f000 fa66 	bl	8000b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000634:	2340      	movs	r3, #64	; 0x40
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <HAL_SPI_MspInit+0x90>)
 8000648:	f000 fa5a 	bl	8000b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40013000 	.word	0x40013000
 8000658:	40021000 	.word	0x40021000
 800065c:	40010800 	.word	0x40010800

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_MspInit+0x5c>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <HAL_MspInit+0x5c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6193      	str	r3, [r2, #24]
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <HAL_MspInit+0x5c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x5c>)
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_MspInit+0x5c>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	61d3      	str	r3, [r2, #28]
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x5c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_MspInit+0x60>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <HAL_MspInit+0x60>)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010000 	.word	0x40010000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <HardFault_Handler+0x4>

080006d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <MemManage_Handler+0x4>

080006dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <BusFault_Handler+0x4>

080006e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <UsageFault_Handler+0x4>

080006e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000710:	f000 f8aa 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800071c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000720:	f000 fb60 	bl	8000de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <SystemInit+0x5c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a14      	ldr	r2, [pc, #80]	; (8000784 <SystemInit+0x5c>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <SystemInit+0x5c>)
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	4911      	ldr	r1, [pc, #68]	; (8000784 <SystemInit+0x5c>)
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x60>)
 8000740:	4013      	ands	r3, r2
 8000742:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <SystemInit+0x5c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <SystemInit+0x5c>)
 800074a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800074e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <SystemInit+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <SystemInit+0x5c>)
 800075a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800075e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <SystemInit+0x5c>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	4a07      	ldr	r2, [pc, #28]	; (8000784 <SystemInit+0x5c>)
 8000766:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800076a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SystemInit+0x5c>)
 800076e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000772:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <SystemInit+0x64>)
 8000776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800077a:	609a      	str	r2, [r3, #8]
#endif 
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40021000 	.word	0x40021000
 8000788:	f8ff0000 	.word	0xf8ff0000
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000790:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000792:	e003      	b.n	800079c <LoopCopyDataInit>

08000794 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000796:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000798:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800079a:	3104      	adds	r1, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007a0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007a2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007a4:	d3f6      	bcc.n	8000794 <CopyDataInit>
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007a8:	e002      	b.n	80007b0 <LoopFillZerobss>

080007aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007ac:	f842 3b04 	str.w	r3, [r2], #4

080007b0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007b2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007b4:	d3f9      	bcc.n	80007aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b6:	f7ff ffb7 	bl	8000728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ba:	f001 fc39 	bl	8002030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007be:	f7ff fe51 	bl	8000464 <main>
  bx lr
 80007c2:	4770      	bx	lr
  ldr r3, =_sidata
 80007c4:	080020cc 	.word	0x080020cc
  ldr r0, =_sdata
 80007c8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007cc:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 80007d0:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 80007d4:	200000a0 	.word	0x200000a0

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>
	...

080007dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_Init+0x28>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_Init+0x28>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 f945 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f808 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f7ff ff32 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x54>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x58>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000822:	fbb2 f3f3 	udiv	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f95d 	bl	8000ae6 <HAL_SYSTICK_Config>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e00e      	b.n	8000854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d80a      	bhi.n	8000852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f000 f925 	bl	8000a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_InitTick+0x5c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000010 	.word	0x20000010
 8000860:	20000018 	.word	0x20000018
 8000864:	20000014 	.word	0x20000014

08000868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x1c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x20>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_IncTick+0x20>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	20000018 	.word	0x20000018
 8000888:	2000009c 	.word	0x2000009c

0800088c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b02      	ldr	r3, [pc, #8]	; (800089c <HAL_GetTick+0x10>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	2000009c 	.word	0x2000009c

080008a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a8:	f7ff fff0 	bl	800088c <HAL_GetTick>
 80008ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d005      	beq.n	80008c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_Delay+0x40>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c6:	bf00      	nop
 80008c8:	f7ff ffe0 	bl	800088c <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d8f7      	bhi.n	80008c8 <HAL_Delay+0x28>
  {
  }
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000018 	.word	0x20000018

080008e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000900:	4013      	ands	r3, r2
 8000902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800090c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <__NVIC_SetPriorityGrouping+0x44>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	60d3      	str	r3, [r2, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <__NVIC_GetPriorityGrouping+0x18>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	0a1b      	lsrs	r3, r3, #8
 8000936:	f003 0307 	and.w	r3, r3, #7
}
 800093a:	4618      	mov	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	2b00      	cmp	r3, #0
 8000958:	db0b      	blt.n	8000972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	f003 021f 	and.w	r2, r3, #31
 8000960:	4906      	ldr	r1, [pc, #24]	; (800097c <__NVIC_EnableIRQ+0x34>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	2001      	movs	r0, #1
 800096a:	fa00 f202 	lsl.w	r2, r0, r2
 800096e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	e000e100 	.word	0xe000e100

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db0a      	blt.n	80009aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	490c      	ldr	r1, [pc, #48]	; (80009cc <__NVIC_SetPriority+0x4c>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	440b      	add	r3, r1
 80009a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a8:	e00a      	b.n	80009c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	; (80009d0 <__NVIC_SetPriority+0x50>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	3b04      	subs	r3, #4
 80009b8:	0112      	lsls	r2, r2, #4
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	440b      	add	r3, r1
 80009be:	761a      	strb	r2, [r3, #24]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f1c3 0307 	rsb	r3, r3, #7
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	bf28      	it	cs
 80009f2:	2304      	movcs	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d902      	bls.n	8000a04 <NVIC_EncodePriority+0x30>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3b03      	subs	r3, #3
 8000a02:	e000      	b.n	8000a06 <NVIC_EncodePriority+0x32>
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43d9      	mvns	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	4313      	orrs	r3, r2
         );
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	; 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a48:	d301      	bcc.n	8000a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00f      	b.n	8000a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <SysTick_Config+0x40>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a56:	210f      	movs	r1, #15
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f7ff ff90 	bl	8000980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Config+0x40>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x40>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff2d 	bl	80008e4 <__NVIC_SetPriorityGrouping>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff42 	bl	800092c <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ff90 	bl	80009d4 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5f 	bl	8000980 <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff35 	bl	8000948 <__NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ffa2 	bl	8000a38 <SysTick_Config>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b08b      	sub	sp, #44	; 0x2c
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b12:	e127      	b.n	8000d64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b14:	2201      	movs	r2, #1
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	4013      	ands	r3, r2
 8000b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	f040 8116 	bne.w	8000d5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b12      	cmp	r3, #18
 8000b38:	d034      	beq.n	8000ba4 <HAL_GPIO_Init+0xa4>
 8000b3a:	2b12      	cmp	r3, #18
 8000b3c:	d80d      	bhi.n	8000b5a <HAL_GPIO_Init+0x5a>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d02b      	beq.n	8000b9a <HAL_GPIO_Init+0x9a>
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d804      	bhi.n	8000b50 <HAL_GPIO_Init+0x50>
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d031      	beq.n	8000bae <HAL_GPIO_Init+0xae>
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d01c      	beq.n	8000b88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b4e:	e048      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d043      	beq.n	8000bdc <HAL_GPIO_Init+0xdc>
 8000b54:	2b11      	cmp	r3, #17
 8000b56:	d01b      	beq.n	8000b90 <HAL_GPIO_Init+0x90>
          break;
 8000b58:	e043      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b5a:	4a89      	ldr	r2, [pc, #548]	; (8000d80 <HAL_GPIO_Init+0x280>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d026      	beq.n	8000bae <HAL_GPIO_Init+0xae>
 8000b60:	4a87      	ldr	r2, [pc, #540]	; (8000d80 <HAL_GPIO_Init+0x280>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d806      	bhi.n	8000b74 <HAL_GPIO_Init+0x74>
 8000b66:	4a87      	ldr	r2, [pc, #540]	; (8000d84 <HAL_GPIO_Init+0x284>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d020      	beq.n	8000bae <HAL_GPIO_Init+0xae>
 8000b6c:	4a86      	ldr	r2, [pc, #536]	; (8000d88 <HAL_GPIO_Init+0x288>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d01d      	beq.n	8000bae <HAL_GPIO_Init+0xae>
          break;
 8000b72:	e036      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b74:	4a85      	ldr	r2, [pc, #532]	; (8000d8c <HAL_GPIO_Init+0x28c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d019      	beq.n	8000bae <HAL_GPIO_Init+0xae>
 8000b7a:	4a85      	ldr	r2, [pc, #532]	; (8000d90 <HAL_GPIO_Init+0x290>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d016      	beq.n	8000bae <HAL_GPIO_Init+0xae>
 8000b80:	4a84      	ldr	r2, [pc, #528]	; (8000d94 <HAL_GPIO_Init+0x294>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d013      	beq.n	8000bae <HAL_GPIO_Init+0xae>
          break;
 8000b86:	e02c      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	623b      	str	r3, [r7, #32]
          break;
 8000b8e:	e028      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	623b      	str	r3, [r7, #32]
          break;
 8000b98:	e023      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	3308      	adds	r3, #8
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e01e      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	330c      	adds	r3, #12
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	e019      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d102      	bne.n	8000bbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e012      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d105      	bne.n	8000bd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	69fa      	ldr	r2, [r7, #28]
 8000bcc:	611a      	str	r2, [r3, #16]
          break;
 8000bce:	e008      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	615a      	str	r2, [r3, #20]
          break;
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	2bff      	cmp	r3, #255	; 0xff
 8000be6:	d801      	bhi.n	8000bec <HAL_GPIO_Init+0xec>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	e001      	b.n	8000bf0 <HAL_GPIO_Init+0xf0>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	2bff      	cmp	r3, #255	; 0xff
 8000bf6:	d802      	bhi.n	8000bfe <HAL_GPIO_Init+0xfe>
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	e002      	b.n	8000c04 <HAL_GPIO_Init+0x104>
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	3b08      	subs	r3, #8
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	401a      	ands	r2, r3
 8000c16:	6a39      	ldr	r1, [r7, #32]
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	431a      	orrs	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 8096 	beq.w	8000d5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c32:	4b59      	ldr	r3, [pc, #356]	; (8000d98 <HAL_GPIO_Init+0x298>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a58      	ldr	r2, [pc, #352]	; (8000d98 <HAL_GPIO_Init+0x298>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b56      	ldr	r3, [pc, #344]	; (8000d98 <HAL_GPIO_Init+0x298>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c4a:	4a54      	ldr	r2, [pc, #336]	; (8000d9c <HAL_GPIO_Init+0x29c>)
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3302      	adds	r3, #2
 8000c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	220f      	movs	r2, #15
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a4b      	ldr	r2, [pc, #300]	; (8000da0 <HAL_GPIO_Init+0x2a0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0x19e>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a4a      	ldr	r2, [pc, #296]	; (8000da4 <HAL_GPIO_Init+0x2a4>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d00d      	beq.n	8000c9a <HAL_GPIO_Init+0x19a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a49      	ldr	r2, [pc, #292]	; (8000da8 <HAL_GPIO_Init+0x2a8>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d007      	beq.n	8000c96 <HAL_GPIO_Init+0x196>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4a48      	ldr	r2, [pc, #288]	; (8000dac <HAL_GPIO_Init+0x2ac>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d101      	bne.n	8000c92 <HAL_GPIO_Init+0x192>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e006      	b.n	8000ca0 <HAL_GPIO_Init+0x1a0>
 8000c92:	2304      	movs	r3, #4
 8000c94:	e004      	b.n	8000ca0 <HAL_GPIO_Init+0x1a0>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e002      	b.n	8000ca0 <HAL_GPIO_Init+0x1a0>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_GPIO_Init+0x1a0>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ca2:	f002 0203 	and.w	r2, r2, #3
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	4093      	lsls	r3, r2
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cb0:	493a      	ldr	r1, [pc, #232]	; (8000d9c <HAL_GPIO_Init+0x29c>)
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4938      	ldr	r1, [pc, #224]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
 8000cd6:	e006      	b.n	8000ce6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cd8:	4b35      	ldr	r3, [pc, #212]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4933      	ldr	r1, [pc, #204]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	492e      	ldr	r1, [pc, #184]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	604b      	str	r3, [r1, #4]
 8000cfe:	e006      	b.n	8000d0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4929      	ldr	r1, [pc, #164]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d1a:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	4924      	ldr	r1, [pc, #144]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	608b      	str	r3, [r1, #8]
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	491f      	ldr	r1, [pc, #124]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d44:	68da      	ldr	r2, [r3, #12]
 8000d46:	491a      	ldr	r1, [pc, #104]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60cb      	str	r3, [r1, #12]
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4915      	ldr	r1, [pc, #84]	; (8000db0 <HAL_GPIO_Init+0x2b0>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	3301      	adds	r3, #1
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f47f aed0 	bne.w	8000b14 <HAL_GPIO_Init+0x14>
  }
}
 8000d74:	bf00      	nop
 8000d76:	372c      	adds	r7, #44	; 0x2c
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	10210000 	.word	0x10210000
 8000d84:	10110000 	.word	0x10110000
 8000d88:	10120000 	.word	0x10120000
 8000d8c:	10310000 	.word	0x10310000
 8000d90:	10320000 	.word	0x10320000
 8000d94:	10220000 	.word	0x10220000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40010c00 	.word	0x40010c00
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40011400 	.word	0x40011400
 8000db0:	40010400 	.word	0x40010400

08000db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc4:	787b      	ldrb	r3, [r7, #1]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dca:	887a      	ldrh	r2, [r7, #2]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dd0:	e003      	b.n	8000dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dd2:	887b      	ldrh	r3, [r7, #2]
 8000dd4:	041a      	lsls	r2, r3, #16
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	611a      	str	r2, [r3, #16]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000df0:	695a      	ldr	r2, [r3, #20]
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f806 	bl	8000e14 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e26c      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8087 	beq.w	8000f56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e48:	4b92      	ldr	r3, [pc, #584]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 030c 	and.w	r3, r3, #12
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d00c      	beq.n	8000e6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e54:	4b8f      	ldr	r3, [pc, #572]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b08      	cmp	r3, #8
 8000e5e:	d112      	bne.n	8000e86 <HAL_RCC_OscConfig+0x5e>
 8000e60:	4b8c      	ldr	r3, [pc, #560]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e6c:	d10b      	bne.n	8000e86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6e:	4b89      	ldr	r3, [pc, #548]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d06c      	beq.n	8000f54 <HAL_RCC_OscConfig+0x12c>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d168      	bne.n	8000f54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e246      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8e:	d106      	bne.n	8000e9e <HAL_RCC_OscConfig+0x76>
 8000e90:	4b80      	ldr	r3, [pc, #512]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a7f      	ldr	r2, [pc, #508]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	e02e      	b.n	8000efc <HAL_RCC_OscConfig+0xd4>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x98>
 8000ea6:	4b7b      	ldr	r3, [pc, #492]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a7a      	ldr	r2, [pc, #488]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	4b78      	ldr	r3, [pc, #480]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a77      	ldr	r2, [pc, #476]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e01d      	b.n	8000efc <HAL_RCC_OscConfig+0xd4>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0xbc>
 8000eca:	4b72      	ldr	r3, [pc, #456]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a71      	ldr	r2, [pc, #452]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	4b6f      	ldr	r3, [pc, #444]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a6e      	ldr	r2, [pc, #440]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e00b      	b.n	8000efc <HAL_RCC_OscConfig+0xd4>
 8000ee4:	4b6b      	ldr	r3, [pc, #428]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a6a      	ldr	r2, [pc, #424]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b68      	ldr	r3, [pc, #416]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a67      	ldr	r2, [pc, #412]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d013      	beq.n	8000f2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f04:	f7ff fcc2 	bl	800088c <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fcbe 	bl	800088c <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b64      	cmp	r3, #100	; 0x64
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e1fa      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	4b5d      	ldr	r3, [pc, #372]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0xe4>
 8000f2a:	e014      	b.n	8000f56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fcae 	bl	800088c <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fcaa 	bl	800088c <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e1e6      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	4b53      	ldr	r3, [pc, #332]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x10c>
 8000f52:	e000      	b.n	8000f56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d063      	beq.n	800102a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f62:	4b4c      	ldr	r3, [pc, #304]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00b      	beq.n	8000f86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f6e:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d11c      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x18c>
 8000f7a:	4b46      	ldr	r3, [pc, #280]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d116      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f86:	4b43      	ldr	r3, [pc, #268]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d005      	beq.n	8000f9e <HAL_RCC_OscConfig+0x176>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d001      	beq.n	8000f9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e1ba      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4939      	ldr	r1, [pc, #228]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fb2:	e03a      	b.n	800102a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d020      	beq.n	8000ffe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fbc:	4b36      	ldr	r3, [pc, #216]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fc63 	bl	800088c <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fca:	f7ff fc5f 	bl	800088c <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e19b      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	4b2d      	ldr	r3, [pc, #180]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0f0      	beq.n	8000fca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4927      	ldr	r1, [pc, #156]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
 8000ffc:	e015      	b.n	800102a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <HAL_RCC_OscConfig+0x270>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff fc42 	bl	800088c <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800100c:	f7ff fc3e 	bl	800088c <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e17a      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f0      	bne.n	800100c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	2b00      	cmp	r3, #0
 8001034:	d03a      	beq.n	80010ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d019      	beq.n	8001072 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_RCC_OscConfig+0x274>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001044:	f7ff fc22 	bl	800088c <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800104c:	f7ff fc1e 	bl	800088c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e15a      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <HAL_RCC_OscConfig+0x26c>)
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800106a:	2001      	movs	r0, #1
 800106c:	f000 faa8 	bl	80015c0 <RCC_Delay>
 8001070:	e01c      	b.n	80010ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_RCC_OscConfig+0x274>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001078:	f7ff fc08 	bl	800088c <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107e:	e00f      	b.n	80010a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fc04 	bl	800088c <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b02      	cmp	r3, #2
 800108c:	d908      	bls.n	80010a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e140      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	42420000 	.word	0x42420000
 800109c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a0:	4b9e      	ldr	r3, [pc, #632]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e9      	bne.n	8001080 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80a6 	beq.w	8001206 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010be:	4b97      	ldr	r3, [pc, #604]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10d      	bne.n	80010e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b94      	ldr	r3, [pc, #592]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a93      	ldr	r2, [pc, #588]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b91      	ldr	r3, [pc, #580]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010e2:	2301      	movs	r3, #1
 80010e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e6:	4b8e      	ldr	r3, [pc, #568]	; (8001320 <HAL_RCC_OscConfig+0x4f8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d118      	bne.n	8001124 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f2:	4b8b      	ldr	r3, [pc, #556]	; (8001320 <HAL_RCC_OscConfig+0x4f8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a8a      	ldr	r2, [pc, #552]	; (8001320 <HAL_RCC_OscConfig+0x4f8>)
 80010f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fbc5 	bl	800088c <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001106:	f7ff fbc1 	bl	800088c <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b64      	cmp	r3, #100	; 0x64
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e0fd      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001118:	4b81      	ldr	r3, [pc, #516]	; (8001320 <HAL_RCC_OscConfig+0x4f8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x312>
 800112c:	4b7b      	ldr	r3, [pc, #492]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a7a      	ldr	r2, [pc, #488]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6213      	str	r3, [r2, #32]
 8001138:	e02d      	b.n	8001196 <HAL_RCC_OscConfig+0x36e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x334>
 8001142:	4b76      	ldr	r3, [pc, #472]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	4a75      	ldr	r2, [pc, #468]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001148:	f023 0301 	bic.w	r3, r3, #1
 800114c:	6213      	str	r3, [r2, #32]
 800114e:	4b73      	ldr	r3, [pc, #460]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4a72      	ldr	r2, [pc, #456]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001154:	f023 0304 	bic.w	r3, r3, #4
 8001158:	6213      	str	r3, [r2, #32]
 800115a:	e01c      	b.n	8001196 <HAL_RCC_OscConfig+0x36e>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	2b05      	cmp	r3, #5
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0x356>
 8001164:	4b6d      	ldr	r3, [pc, #436]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001166:	6a1b      	ldr	r3, [r3, #32]
 8001168:	4a6c      	ldr	r2, [pc, #432]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6213      	str	r3, [r2, #32]
 8001170:	4b6a      	ldr	r3, [pc, #424]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a69      	ldr	r2, [pc, #420]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6213      	str	r3, [r2, #32]
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0x36e>
 800117e:	4b67      	ldr	r3, [pc, #412]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4a66      	ldr	r2, [pc, #408]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	6213      	str	r3, [r2, #32]
 800118a:	4b64      	ldr	r3, [pc, #400]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a63      	ldr	r2, [pc, #396]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001190:	f023 0304 	bic.w	r3, r3, #4
 8001194:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d015      	beq.n	80011ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119e:	f7ff fb75 	bl	800088c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	e00a      	b.n	80011bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a6:	f7ff fb71 	bl	800088c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d901      	bls.n	80011bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e0ab      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	4b57      	ldr	r3, [pc, #348]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0ee      	beq.n	80011a6 <HAL_RCC_OscConfig+0x37e>
 80011c8:	e014      	b.n	80011f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ca:	f7ff fb5f 	bl	800088c <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d0:	e00a      	b.n	80011e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff fb5b 	bl	800088c <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e095      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e8:	4b4c      	ldr	r3, [pc, #304]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1ee      	bne.n	80011d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d105      	bne.n	8001206 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fa:	4b48      	ldr	r3, [pc, #288]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a47      	ldr	r2, [pc, #284]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8081 	beq.w	8001312 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001210:	4b42      	ldr	r3, [pc, #264]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	d061      	beq.n	80012e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69db      	ldr	r3, [r3, #28]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d146      	bne.n	80012b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001224:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <HAL_RCC_OscConfig+0x4fc>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fb2f 	bl	800088c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001232:	f7ff fb2b 	bl	800088c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e067      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001244:	4b35      	ldr	r3, [pc, #212]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f0      	bne.n	8001232 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d108      	bne.n	800126c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	492d      	ldr	r1, [pc, #180]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a19      	ldr	r1, [r3, #32]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	430b      	orrs	r3, r1
 800127e:	4927      	ldr	r1, [pc, #156]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 8001280:	4313      	orrs	r3, r2
 8001282:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_RCC_OscConfig+0x4fc>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff faff 	bl	800088c <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fafb 	bl	800088c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e037      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0f0      	beq.n	8001292 <HAL_RCC_OscConfig+0x46a>
 80012b0:	e02f      	b.n	8001312 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_RCC_OscConfig+0x4fc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fae8 	bl	800088c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c0:	f7ff fae4 	bl	800088c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e020      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x498>
 80012de:	e018      	b.n	8001312 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e013      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012ec:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d106      	bne.n	800130e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	429a      	cmp	r2, r3
 800130c:	d001      	beq.n	8001312 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	40007000 	.word	0x40007000
 8001324:	42420060 	.word	0x42420060

08001328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0d0      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0307 	and.w	r3, r3, #7
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d910      	bls.n	800136c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 0207 	bic.w	r2, r3, #7
 8001352:	4965      	ldr	r1, [pc, #404]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0b8      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001384:	4b59      	ldr	r3, [pc, #356]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800138e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139c:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	494d      	ldr	r1, [pc, #308]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d040      	beq.n	8001448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d115      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e07f      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e6:	4b41      	ldr	r3, [pc, #260]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e073      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e06b      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001406:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f023 0203 	bic.w	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4936      	ldr	r1, [pc, #216]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	4313      	orrs	r3, r2
 8001416:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001418:	f7ff fa38 	bl	800088c <HAL_GetTick>
 800141c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	e00a      	b.n	8001436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001420:	f7ff fa34 	bl	800088c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e053      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 020c 	and.w	r2, r3, #12
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	429a      	cmp	r2, r3
 8001446:	d1eb      	bne.n	8001420 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d210      	bcs.n	8001478 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 0207 	bic.w	r2, r3, #7
 800145e:	4922      	ldr	r1, [pc, #136]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e032      	b.n	80014de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4916      	ldr	r1, [pc, #88]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	4313      	orrs	r3, r2
 8001494:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	490e      	ldr	r1, [pc, #56]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014b6:	f000 f821 	bl	80014fc <HAL_RCC_GetSysClockFreq>
 80014ba:	4601      	mov	r1, r0
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_RCC_ClockConfig+0x1c8>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	fa21 f303 	lsr.w	r3, r1, r3
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_RCC_ClockConfig+0x1cc>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_ClockConfig+0x1d0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f996 	bl	8000808 <HAL_InitTick>

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000
 80014ec:	40021000 	.word	0x40021000
 80014f0:	080020b4 	.word	0x080020b4
 80014f4:	20000010 	.word	0x20000010
 80014f8:	20000014 	.word	0x20000014

080014fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014fc:	b490      	push	{r4, r7}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8001504:	1d3c      	adds	r4, r7, #4
 8001506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001508:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	2300      	movs	r3, #0
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b04      	cmp	r3, #4
 8001534:	d002      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x40>
 8001536:	2b08      	cmp	r3, #8
 8001538:	d003      	beq.n	8001542 <HAL_RCC_GetSysClockFreq+0x46>
 800153a:	e02d      	b.n	8001598 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800153e:	623b      	str	r3, [r7, #32]
      break;
 8001540:	e02d      	b.n	800159e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	0c9b      	lsrs	r3, r3, #18
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800154e:	4413      	add	r3, r2
 8001550:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001554:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	0c5b      	lsrs	r3, r3, #17
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800156e:	4413      	add	r3, r2
 8001570:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001574:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800157a:	fb02 f203 	mul.w	r2, r2, r3
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	fbb2 f3f3 	udiv	r3, r2, r3
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	e004      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HAL_RCC_GetSysClockFreq+0xc0>)
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	623b      	str	r3, [r7, #32]
      break;
 8001596:	e002      	b.n	800159e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800159a:	623b      	str	r3, [r7, #32]
      break;
 800159c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800159e:	6a3b      	ldr	r3, [r7, #32]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3728      	adds	r7, #40	; 0x28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc90      	pop	{r4, r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	080020a0 	.word	0x080020a0
 80015b0:	080020b0 	.word	0x080020b0
 80015b4:	40021000 	.word	0x40021000
 80015b8:	007a1200 	.word	0x007a1200
 80015bc:	003d0900 	.word	0x003d0900

080015c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c8:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <RCC_Delay+0x34>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <RCC_Delay+0x38>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015dc:	bf00      	nop
  }
  while (Delay --);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f9      	bne.n	80015dc <RCC_Delay+0x1c>
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000010 	.word	0x20000010
 80015f8:	10624dd3 	.word	0x10624dd3

080015fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e053      	b.n	80016b6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d106      	bne.n	800162e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe ffcf 	bl	80005cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2202      	movs	r2, #2
 8001632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001644:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69db      	ldr	r3, [r3, #28]
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	ea42 0103 	orr.w	r1, r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	0c1a      	lsrs	r2, r3, #16
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f002 0204 	and.w	r2, r2, #4
 8001694:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69da      	ldr	r2, [r3, #28]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b088      	sub	sp, #32
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4613      	mov	r3, r2
 80016cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_SPI_Transmit+0x22>
 80016dc:	2302      	movs	r3, #2
 80016de:	e11e      	b.n	800191e <HAL_SPI_Transmit+0x260>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80016e8:	f7ff f8d0 	bl	800088c <HAL_GetTick>
 80016ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d002      	beq.n	8001704 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80016fe:	2302      	movs	r3, #2
 8001700:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001702:	e103      	b.n	800190c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <HAL_SPI_Transmit+0x52>
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001714:	e0fa      	b.n	800190c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2203      	movs	r2, #3
 800171a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	88fa      	ldrh	r2, [r7, #6]
 8001734:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800175c:	d107      	bne.n	800176e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800176c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001778:	2b40      	cmp	r3, #64	; 0x40
 800177a:	d007      	beq.n	800178c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800178a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001794:	d14b      	bne.n	800182e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_SPI_Transmit+0xe6>
 800179e:	8afb      	ldrh	r3, [r7, #22]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d13e      	bne.n	8001822 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	881a      	ldrh	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	1c9a      	adds	r2, r3, #2
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017be:	b29b      	uxth	r3, r3
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80017c8:	e02b      	b.n	8001822 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d112      	bne.n	80017fe <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	881a      	ldrh	r2, [r3, #0]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	1c9a      	adds	r2, r3, #2
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80017fc:	e011      	b.n	8001822 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017fe:	f7ff f845 	bl	800088c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d803      	bhi.n	8001816 <HAL_SPI_Transmit+0x158>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d102      	bne.n	800181c <HAL_SPI_Transmit+0x15e>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001820:	e074      	b.n	800190c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001826:	b29b      	uxth	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ce      	bne.n	80017ca <HAL_SPI_Transmit+0x10c>
 800182c:	e04c      	b.n	80018c8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_SPI_Transmit+0x17e>
 8001836:	8afb      	ldrh	r3, [r7, #22]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d140      	bne.n	80018be <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	330c      	adds	r3, #12
 8001846:	7812      	ldrb	r2, [r2, #0]
 8001848:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001858:	b29b      	uxth	r3, r3
 800185a:	3b01      	subs	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001862:	e02c      	b.n	80018be <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b02      	cmp	r3, #2
 8001870:	d113      	bne.n	800189a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	330c      	adds	r3, #12
 800187c:	7812      	ldrb	r2, [r2, #0]
 800187e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800188e:	b29b      	uxth	r3, r3
 8001890:	3b01      	subs	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	86da      	strh	r2, [r3, #54]	; 0x36
 8001898:	e011      	b.n	80018be <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800189a:	f7fe fff7 	bl	800088c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d803      	bhi.n	80018b2 <HAL_SPI_Transmit+0x1f4>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d102      	bne.n	80018b8 <HAL_SPI_Transmit+0x1fa>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80018bc:	e026      	b.n	800190c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1cd      	bne.n	8001864 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	6839      	ldr	r1, [r7, #0]
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fb91 	bl	8001ff4 <SPI_EndRxTxTransaction>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	77fb      	strb	r3, [r7, #31]
 8001908:	e000      	b.n	800190c <HAL_SPI_Transmit+0x24e>
  }

error:
 800190a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800191c:	7ffb      	ldrb	r3, [r7, #31]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b088      	sub	sp, #32
 800192a:	af02      	add	r7, sp, #8
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	4613      	mov	r3, r2
 8001934:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001942:	d112      	bne.n	800196a <HAL_SPI_Receive+0x44>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10e      	bne.n	800196a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2204      	movs	r2, #4
 8001950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001954:	88fa      	ldrh	r2, [r7, #6]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	4613      	mov	r3, r2
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f8e9 	bl	8001b38 <HAL_SPI_TransmitReceive>
 8001966:	4603      	mov	r3, r0
 8001968:	e0e2      	b.n	8001b30 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_SPI_Receive+0x52>
 8001974:	2302      	movs	r3, #2
 8001976:	e0db      	b.n	8001b30 <HAL_SPI_Receive+0x20a>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001980:	f7fe ff84 	bl	800088c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d002      	beq.n	8001998 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001992:	2302      	movs	r3, #2
 8001994:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001996:	e0c2      	b.n	8001b1e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <HAL_SPI_Receive+0x7e>
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80019a8:	e0b9      	b.n	8001b1e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2204      	movs	r2, #4
 80019ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	88fa      	ldrh	r2, [r7, #6]
 80019c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f0:	d107      	bne.n	8001a02 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b40      	cmp	r3, #64	; 0x40
 8001a0e:	d007      	beq.n	8001a20 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d162      	bne.n	8001aee <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001a28:	e02e      	b.n	8001a88 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d115      	bne.n	8001a64 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f103 020c 	add.w	r2, r3, #12
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a44:	7812      	ldrb	r2, [r2, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a62:	e011      	b.n	8001a88 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a64:	f7fe ff12 	bl	800088c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d803      	bhi.n	8001a7c <HAL_SPI_Receive+0x156>
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7a:	d102      	bne.n	8001a82 <HAL_SPI_Receive+0x15c>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001a86:	e04a      	b.n	8001b1e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1cb      	bne.n	8001a2a <HAL_SPI_Receive+0x104>
 8001a92:	e031      	b.n	8001af8 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d113      	bne.n	8001aca <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	b292      	uxth	r2, r2
 8001aae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	1c9a      	adds	r2, r3, #2
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ac8:	e011      	b.n	8001aee <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aca:	f7fe fedf 	bl	800088c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d803      	bhi.n	8001ae2 <HAL_SPI_Receive+0x1bc>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d102      	bne.n	8001ae8 <HAL_SPI_Receive+0x1c2>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d102      	bne.n	8001aee <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001aec:	e017      	b.n	8001b1e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1cd      	bne.n	8001a94 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	6839      	ldr	r1, [r7, #0]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fa27 	bl	8001f50 <SPI_EndRxTransaction>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
 8001b1a:	e000      	b.n	8001b1e <HAL_SPI_Receive+0x1f8>
  }

error :
 8001b1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b46:	2301      	movs	r3, #1
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_SPI_TransmitReceive+0x26>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e18a      	b.n	8001e74 <HAL_SPI_TransmitReceive+0x33c>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b66:	f7fe fe91 	bl	800088c <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d00f      	beq.n	8001ba8 <HAL_SPI_TransmitReceive+0x70>
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b8e:	d107      	bne.n	8001ba0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d103      	bne.n	8001ba0 <HAL_SPI_TransmitReceive+0x68>
 8001b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d003      	beq.n	8001ba8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ba6:	e15b      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_SPI_TransmitReceive+0x82>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_SPI_TransmitReceive+0x82>
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d103      	bne.n	8001bc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001bc0:	e14e      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d003      	beq.n	8001bd6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	887a      	ldrh	r2, [r7, #2]
 8001be6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	887a      	ldrh	r2, [r7, #2]
 8001bfe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b40      	cmp	r3, #64	; 0x40
 8001c18:	d007      	beq.n	8001c2a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c32:	d178      	bne.n	8001d26 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_SPI_TransmitReceive+0x10a>
 8001c3c:	8b7b      	ldrh	r3, [r7, #26]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d166      	bne.n	8001d10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	881a      	ldrh	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	1c9a      	adds	r2, r3, #2
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c66:	e053      	b.n	8001d10 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d11b      	bne.n	8001cae <HAL_SPI_TransmitReceive+0x176>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d016      	beq.n	8001cae <HAL_SPI_TransmitReceive+0x176>
 8001c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d113      	bne.n	8001cae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	881a      	ldrh	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	1c9a      	adds	r2, r3, #2
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d119      	bne.n	8001cf0 <HAL_SPI_TransmitReceive+0x1b8>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d014      	beq.n	8001cf0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	b292      	uxth	r2, r2
 8001cd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd8:	1c9a      	adds	r2, r3, #2
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cec:	2301      	movs	r3, #1
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cf0:	f7fe fdcc 	bl	800088c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d807      	bhi.n	8001d10 <HAL_SPI_TransmitReceive+0x1d8>
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d06:	d003      	beq.n	8001d10 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001d0e:	e0a7      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1a6      	bne.n	8001c68 <HAL_SPI_TransmitReceive+0x130>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1a1      	bne.n	8001c68 <HAL_SPI_TransmitReceive+0x130>
 8001d24:	e07c      	b.n	8001e20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <HAL_SPI_TransmitReceive+0x1fc>
 8001d2e:	8b7b      	ldrh	r3, [r7, #26]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d16b      	bne.n	8001e0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d5a:	e057      	b.n	8001e0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d11c      	bne.n	8001da4 <HAL_SPI_TransmitReceive+0x26c>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d017      	beq.n	8001da4 <HAL_SPI_TransmitReceive+0x26c>
 8001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d114      	bne.n	8001da4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	330c      	adds	r3, #12
 8001d84:	7812      	ldrb	r2, [r2, #0]
 8001d86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d119      	bne.n	8001de6 <HAL_SPI_TransmitReceive+0x2ae>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d014      	beq.n	8001de6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dce:	1c5a      	adds	r2, r3, #1
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001de2:	2301      	movs	r3, #1
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001de6:	f7fe fd51 	bl	800088c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d803      	bhi.n	8001dfe <HAL_SPI_TransmitReceive+0x2c6>
 8001df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d102      	bne.n	8001e04 <HAL_SPI_TransmitReceive+0x2cc>
 8001dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d103      	bne.n	8001e0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001e0a:	e029      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1a2      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0x224>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d19d      	bne.n	8001d5c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f8e5 	bl	8001ff4 <SPI_EndRxTxTransaction>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001e3c:	e010      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10b      	bne.n	8001e5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	e000      	b.n	8001e60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001e5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3730      	adds	r7, #48	; 0x30
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e8c:	e04c      	b.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d048      	beq.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001e96:	f7fe fcf9 	bl	800088c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d902      	bls.n	8001eac <SPI_WaitFlagStateUntilTimeout+0x30>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d13d      	bne.n	8001f28 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001eba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ec4:	d111      	bne.n	8001eea <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ece:	d004      	beq.n	8001eda <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed8:	d107      	bne.n	8001eea <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ee8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef2:	d10f      	bne.n	8001f14 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e00f      	b.n	8001f48 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	4013      	ands	r3, r2
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	bf0c      	ite	eq
 8001f38:	2301      	moveq	r3, #1
 8001f3a:	2300      	movne	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d1a3      	bne.n	8001e8e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f64:	d111      	bne.n	8001f8a <SPI_EndRxTransaction+0x3a>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6e:	d004      	beq.n	8001f7a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f78:	d107      	bne.n	8001f8a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f88:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f92:	d117      	bne.n	8001fc4 <SPI_EndRxTransaction+0x74>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9c:	d112      	bne.n	8001fc4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f7ff ff67 	bl	8001e7c <SPI_WaitFlagStateUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01a      	beq.n	8001fea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb8:	f043 0220 	orr.w	r2, r3, #32
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e013      	b.n	8001fec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f7ff ff54 	bl	8001e7c <SPI_WaitFlagStateUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fde:	f043 0220 	orr.w	r2, r3, #32
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e000      	b.n	8001fec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff ff36 	bl	8001e7c <SPI_WaitFlagStateUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f043 0220 	orr.w	r2, r3, #32
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e000      	b.n	8002028 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <__libc_init_array>:
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	2500      	movs	r5, #0
 8002034:	4e0c      	ldr	r6, [pc, #48]	; (8002068 <__libc_init_array+0x38>)
 8002036:	4c0d      	ldr	r4, [pc, #52]	; (800206c <__libc_init_array+0x3c>)
 8002038:	1ba4      	subs	r4, r4, r6
 800203a:	10a4      	asrs	r4, r4, #2
 800203c:	42a5      	cmp	r5, r4
 800203e:	d109      	bne.n	8002054 <__libc_init_array+0x24>
 8002040:	f000 f822 	bl	8002088 <_init>
 8002044:	2500      	movs	r5, #0
 8002046:	4e0a      	ldr	r6, [pc, #40]	; (8002070 <__libc_init_array+0x40>)
 8002048:	4c0a      	ldr	r4, [pc, #40]	; (8002074 <__libc_init_array+0x44>)
 800204a:	1ba4      	subs	r4, r4, r6
 800204c:	10a4      	asrs	r4, r4, #2
 800204e:	42a5      	cmp	r5, r4
 8002050:	d105      	bne.n	800205e <__libc_init_array+0x2e>
 8002052:	bd70      	pop	{r4, r5, r6, pc}
 8002054:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002058:	4798      	blx	r3
 800205a:	3501      	adds	r5, #1
 800205c:	e7ee      	b.n	800203c <__libc_init_array+0xc>
 800205e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002062:	4798      	blx	r3
 8002064:	3501      	adds	r5, #1
 8002066:	e7f2      	b.n	800204e <__libc_init_array+0x1e>
 8002068:	080020c4 	.word	0x080020c4
 800206c:	080020c4 	.word	0x080020c4
 8002070:	080020c4 	.word	0x080020c4
 8002074:	080020c8 	.word	0x080020c8

08002078 <memset>:
 8002078:	4603      	mov	r3, r0
 800207a:	4402      	add	r2, r0
 800207c:	4293      	cmp	r3, r2
 800207e:	d100      	bne.n	8002082 <memset+0xa>
 8002080:	4770      	bx	lr
 8002082:	f803 1b01 	strb.w	r1, [r3], #1
 8002086:	e7f9      	b.n	800207c <memset+0x4>

08002088 <_init>:
 8002088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208a:	bf00      	nop
 800208c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800208e:	bc08      	pop	{r3}
 8002090:	469e      	mov	lr, r3
 8002092:	4770      	bx	lr

08002094 <_fini>:
 8002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002096:	bf00      	nop
 8002098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209a:	bc08      	pop	{r3}
 800209c:	469e      	mov	lr, r3
 800209e:	4770      	bx	lr
