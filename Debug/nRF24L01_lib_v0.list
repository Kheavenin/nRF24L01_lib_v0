
nRF24L01_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa0  08002aa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa0  08002aa0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa0  08002aa0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa4  08002aa4  00012aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002ab4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002ab4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab41  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c73  00000000  00000000  0002ab76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002c7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b38  00000000  00000000  0002d430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000140b7  00000000  00000000  0002df68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093ce  00000000  00000000  0004201f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006dbbc  00000000  00000000  0004b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b8fa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  000b9024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a34 	.word	0x08002a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a34 	.word	0x08002a34

0800014c <readRegister>:
/**
 * @Brief	Read register function
 * @Param	addr - address of register to read.
 * @Ratval	return read register content.
 */
uint8_t readRegister(uint8_t addr) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = R_REGISTER | addr;
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	uint8_t *pCmd = &cmd;
 800015a:	f107 030f 	add.w	r3, r7, #15
 800015e:	617b      	str	r3, [r7, #20]
	uint8_t *pReg = &reg;
 8000160:	f107 030e 	add.w	r3, r7, #14
 8000164:	613b      	str	r3, [r7, #16]

	csnLow();
 8000166:	f000 f86d 	bl	8000244 <csnLow>

	HAL_SPI_Transmit(&hspi1, pCmd, sizeof(cmd), SPI_TIMEOUT);
 800016a:	230a      	movs	r3, #10
 800016c:	2201      	movs	r2, #1
 800016e:	6979      	ldr	r1, [r7, #20]
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <readRegister+0x4c>)
 8000172:	f001 fd38 	bl	8001be6 <HAL_SPI_Transmit>
	DelayUs(50);
 8000176:	2032      	movs	r0, #50	; 0x32
 8000178:	f000 f996 	bl	80004a8 <DelayUs>
	//HAL_Delay(1);
	HAL_SPI_Receive(&hspi1, pReg, sizeof(reg), SPI_TIMEOUT);
 800017c:	230a      	movs	r3, #10
 800017e:	2201      	movs	r2, #1
 8000180:	6939      	ldr	r1, [r7, #16]
 8000182:	4805      	ldr	r0, [pc, #20]	; (8000198 <readRegister+0x4c>)
 8000184:	f001 fe63 	bl	8001e4e <HAL_SPI_Receive>
#if 0
	if (HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT))
		HAL_SPI_Receive(&hspi1, pReg, regSize, SPI_TIMEOUT);
	 #endif */

	csnHigh();
 8000188:	f000 f868 	bl	800025c <csnHigh>
	return reg;
 800018c:	7bbb      	ldrb	r3, [r7, #14]
}
 800018e:	4618      	mov	r0, r3
 8000190:	3718      	adds	r7, #24
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	2000002c 	.word	0x2000002c

0800019c <writeRegister>:
/**
 * @Brief	Write register funtion.
 * @Param	addr - address of register to write
 * @Param	val - value to write into register.
 */
void writeRegister(uint8_t addr, uint8_t val) {
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	460a      	mov	r2, r1
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	4613      	mov	r3, r2
 80001aa:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = W_REGISTER | addr;
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	f043 0320 	orr.w	r3, r3, #32
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 80001b6:	f107 030b 	add.w	r3, r7, #11
 80001ba:	60fb      	str	r3, [r7, #12]

	csnLow();
 80001bc:	f000 f842 	bl	8000244 <csnLow>

	HAL_SPI_Transmit(&hspi1, pCmd, sizeof(cmd), SPI_TIMEOUT);
 80001c0:	230a      	movs	r3, #10
 80001c2:	2201      	movs	r2, #1
 80001c4:	68f9      	ldr	r1, [r7, #12]
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <writeRegister+0x50>)
 80001c8:	f001 fd0d 	bl	8001be6 <HAL_SPI_Transmit>
	//HAL_Delay(1);
	DelayUs(50);
 80001cc:	2032      	movs	r0, #50	; 0x32
 80001ce:	f000 f96b 	bl	80004a8 <DelayUs>
	HAL_SPI_Transmit(&hspi1, &val, sizeof(val), SPI_TIMEOUT);
 80001d2:	1db9      	adds	r1, r7, #6
 80001d4:	230a      	movs	r3, #10
 80001d6:	2201      	movs	r2, #1
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <writeRegister+0x50>)
 80001da:	f001 fd04 	bl	8001be6 <HAL_SPI_Transmit>
	if (HAL_SPI_Transmit(&hspi1, pCmd, cmdSize, SPI_TIMEOUT)) {
		HAL_SPI_Transmit(&hspi1, &val, valSize, SPI_TIMEOUT);
	}
#endif
	 */
	csnHigh();
 80001de:	f000 f83d 	bl	800025c <csnHigh>
}
 80001e2:	bf00      	nop
 80001e4:	3710      	adds	r7, #16
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	2000002c 	.word	0x2000002c

080001f0 <powerUp>:


/**
 * @Brief	Turn on nRF24L01+ module
 */
void powerUp() {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	setBit( CONFIG, PWR_UP);
 80001f4:	2101      	movs	r1, #1
 80001f6:	2000      	movs	r0, #0
 80001f8:	f000 f802 	bl	8000200 <setBit>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}

08000200 <setBit>:
}

/**
 * @Brief	Set logic '1' on selected position
 */
void setBit(uint8_t addr, bitNum_t bit) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp = readRegister(addr);
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4618      	mov	r0, r3
 8000214:	f7ff ff9a 	bl	800014c <readRegister>
 8000218:	4603      	mov	r3, r0
 800021a:	73fb      	strb	r3, [r7, #15]
	tmp |= 1 << bit;
 800021c:	79bb      	ldrb	r3, [r7, #6]
 800021e:	2201      	movs	r2, #1
 8000220:	fa02 f303 	lsl.w	r3, r2, r3
 8000224:	b25a      	sxtb	r2, r3
 8000226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800022a:	4313      	orrs	r3, r2
 800022c:	b25b      	sxtb	r3, r3
 800022e:	73fb      	strb	r3, [r7, #15]
	writeRegister(addr, tmp);
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4611      	mov	r1, r2
 8000236:	4618      	mov	r0, r3
 8000238:	f7ff ffb0 	bl	800019c <writeRegister>
}
 800023c:	bf00      	nop
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}

08000244 <csnLow>:
}

/**
 * @Brief	Set low level on CSN line
 */
void csnLow() {
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <csnLow+0x14>)
 800024e:	f001 f845 	bl	80012dc <HAL_GPIO_WritePin>
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40010c00 	.word	0x40010c00

0800025c <csnHigh>:

/**
 * @Brief	Set high level on CSN line
 */
void csnHigh() {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000260:	2201      	movs	r2, #1
 8000262:	2140      	movs	r1, #64	; 0x40
 8000264:	4802      	ldr	r0, [pc, #8]	; (8000270 <csnHigh+0x14>)
 8000266:	f001 f839 	bl	80012dc <HAL_GPIO_WritePin>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010c00 	.word	0x40010c00

08000274 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000288:	4b4c      	ldr	r3, [pc, #304]	; (80003bc <MX_GPIO_Init+0x148>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a4b      	ldr	r2, [pc, #300]	; (80003bc <MX_GPIO_Init+0x148>)
 800028e:	f043 0310 	orr.w	r3, r3, #16
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b49      	ldr	r3, [pc, #292]	; (80003bc <MX_GPIO_Init+0x148>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0310 	and.w	r3, r3, #16
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a0:	4b46      	ldr	r3, [pc, #280]	; (80003bc <MX_GPIO_Init+0x148>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a45      	ldr	r2, [pc, #276]	; (80003bc <MX_GPIO_Init+0x148>)
 80002a6:	f043 0320 	orr.w	r3, r3, #32
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b43      	ldr	r3, [pc, #268]	; (80003bc <MX_GPIO_Init+0x148>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0320 	and.w	r3, r3, #32
 80002b4:	60bb      	str	r3, [r7, #8]
 80002b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b40      	ldr	r3, [pc, #256]	; (80003bc <MX_GPIO_Init+0x148>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a3f      	ldr	r2, [pc, #252]	; (80003bc <MX_GPIO_Init+0x148>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b3d      	ldr	r3, [pc, #244]	; (80003bc <MX_GPIO_Init+0x148>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	4b3a      	ldr	r3, [pc, #232]	; (80003bc <MX_GPIO_Init+0x148>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a39      	ldr	r2, [pc, #228]	; (80003bc <MX_GPIO_Init+0x148>)
 80002d6:	f043 0308 	orr.w	r3, r3, #8
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b37      	ldr	r3, [pc, #220]	; (80003bc <MX_GPIO_Init+0x148>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0308 	and.w	r3, r3, #8
 80002e4:	603b      	str	r3, [r7, #0]
 80002e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	4834      	ldr	r0, [pc, #208]	; (80003c0 <MX_GPIO_Init+0x14c>)
 80002ee:	f000 fff5 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80002f2:	2200      	movs	r2, #0
 80002f4:	2140      	movs	r1, #64	; 0x40
 80002f6:	4833      	ldr	r0, [pc, #204]	; (80003c4 <MX_GPIO_Init+0x150>)
 80002f8:	f000 fff0 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000302:	4b31      	ldr	r3, [pc, #196]	; (80003c8 <MX_GPIO_Init+0x154>)
 8000304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800030a:	f107 0310 	add.w	r3, r7, #16
 800030e:	4619      	mov	r1, r3
 8000310:	482b      	ldr	r0, [pc, #172]	; (80003c0 <MX_GPIO_Init+0x14c>)
 8000312:	f000 fe89 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000316:	f641 737f 	movw	r3, #8063	; 0x1f7f
 800031a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800031c:	2303      	movs	r3, #3
 800031e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	4826      	ldr	r0, [pc, #152]	; (80003c0 <MX_GPIO_Init+0x14c>)
 8000328:	f000 fe7e 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800032c:	f649 731f 	movw	r3, #40735	; 0x9f1f
 8000330:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000332:	2303      	movs	r3, #3
 8000334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4823      	ldr	r0, [pc, #140]	; (80003cc <MX_GPIO_Init+0x158>)
 800033e:	f000 fe73 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000342:	f64f 73b7 	movw	r3, #65463	; 0xffb7
 8000346:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000348:	2303      	movs	r3, #3
 800034a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034c:	f107 0310 	add.w	r3, r7, #16
 8000350:	4619      	mov	r1, r3
 8000352:	481c      	ldr	r0, [pc, #112]	; (80003c4 <MX_GPIO_Init+0x150>)
 8000354:	f000 fe68 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000358:	2380      	movs	r3, #128	; 0x80
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035c:	2301      	movs	r3, #1
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000360:	2300      	movs	r3, #0
 8000362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000364:	2302      	movs	r3, #2
 8000366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4619      	mov	r1, r3
 800036e:	4814      	ldr	r0, [pc, #80]	; (80003c0 <MX_GPIO_Init+0x14c>)
 8000370:	f000 fe5a 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000374:	2304      	movs	r3, #4
 8000376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000378:	2303      	movs	r3, #3
 800037a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800037c:	f107 0310 	add.w	r3, r7, #16
 8000380:	4619      	mov	r1, r3
 8000382:	4813      	ldr	r0, [pc, #76]	; (80003d0 <MX_GPIO_Init+0x15c>)
 8000384:	f000 fe50 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000388:	2340      	movs	r3, #64	; 0x40
 800038a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038c:	2301      	movs	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000390:	2300      	movs	r3, #0
 8000392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000394:	2302      	movs	r3, #2
 8000396:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000398:	f107 0310 	add.w	r3, r7, #16
 800039c:	4619      	mov	r1, r3
 800039e:	4809      	ldr	r0, [pc, #36]	; (80003c4 <MX_GPIO_Init+0x150>)
 80003a0:	f000 fe42 	bl	8001028 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2100      	movs	r1, #0
 80003a8:	2028      	movs	r0, #40	; 0x28
 80003aa:	f000 fe06 	bl	8000fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ae:	2028      	movs	r0, #40	; 0x28
 80003b0:	f000 fe1f 	bl	8000ff2 <HAL_NVIC_EnableIRQ>

}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40011000 	.word	0x40011000
 80003c4:	40010c00 	.word	0x40010c00
 80003c8:	10110000 	.word	0x10110000
 80003cc:	40010800 	.word	0x40010800
 80003d0:	40011400 	.word	0x40011400

080003d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003da:	f000 fcb5 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003de:	f000 f81d 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e2:	f7ff ff47 	bl	8000274 <MX_GPIO_Init>
  MX_SPI1_Init();
 80003e6:	f000 fb03 	bl	80009f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80003ea:	f000 fc19 	bl	8000c20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 80003ee:	4809      	ldr	r0, [pc, #36]	; (8000414 <main+0x40>)
 80003f0:	f002 f8dd 	bl	80025ae <HAL_TIM_Base_Start>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if 1
	writeRegister(CONFIG, 0x02);
 80003f4:	2102      	movs	r1, #2
 80003f6:	2000      	movs	r0, #0
 80003f8:	f7ff fed0 	bl	800019c <writeRegister>
	regTmp = readRegister(CONFIG);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f7ff fea5 	bl	800014c <readRegister>
 8000402:	4603      	mov	r3, r0
 8000404:	461a      	mov	r2, r3
 8000406:	4b04      	ldr	r3, [pc, #16]	; (8000418 <main+0x44>)
 8000408:	701a      	strb	r2, [r3, #0]
		testVal = test_TransmitAddress();

#endif
#ifdef TEST_LIB1

		uint8_t testVal = test_ReadWriteSingleRegisters();
 800040a:	f000 f86b 	bl	80004e4 <test_ReadWriteSingleRegisters>
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
	while (1) {
 8000412:	e7fa      	b.n	800040a <main+0x36>
 8000414:	20000084 	.word	0x20000084
 8000418:	20000028 	.word	0x20000028

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b090      	sub	sp, #64	; 0x40
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0318 	add.w	r3, r7, #24
 8000426:	2228      	movs	r2, #40	; 0x28
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fafa 	bl	8002a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800043e:	2301      	movs	r3, #1
 8000440:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000442:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000446:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000448:	2300      	movs	r3, #0
 800044a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044c:	2301      	movs	r3, #1
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000450:	2302      	movs	r3, #2
 8000452:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800045a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800045e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	4618      	mov	r0, r3
 8000466:	f000 ff73 	bl	8001350 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000470:	f000 f832 	bl	80004d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000484:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2102      	movs	r1, #2
 800048e:	4618      	mov	r0, r3
 8000490:	f001 f9de 	bl	8001850 <HAL_RCC_ClockConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800049a:	f000 f81d 	bl	80004d8 <Error_Handler>
  }
}
 800049e:	bf00      	nop
 80004a0:	3740      	adds	r7, #64	; 0x40
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
	...

080004a8 <DelayUs>:

/* USER CODE BEGIN 4 */

void DelayUs(uint16_t time) {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1, 0);	//Set star value as 0
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <DelayUs+0x2c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time)
 80004ba:	bf00      	nop
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <DelayUs+0x2c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d3f9      	bcc.n	80004bc <DelayUs+0x14>
		;
	
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000084 	.word	0x20000084

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <test_ReadWriteSingleRegisters>:
	return PASS;
}

/* tests of read/write registers */

bool test_ReadWriteSingleRegisters() {
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	b08f      	sub	sp, #60	; 0x3c
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	466b      	mov	r3, sp
 80004ec:	461e      	mov	r6, r3
	powerUp();
 80004ee:	f7ff fe7f 	bl	80001f0 <powerUp>
	const size_t testSize = 10;
 80004f2:	230a      	movs	r3, #10
 80004f4:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t countPass = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	bool testTab[testSize];
 80004fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fe:	3b01      	subs	r3, #1
 8000500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000504:	4619      	mov	r1, r3
 8000506:	f04f 0200 	mov.w	r2, #0
 800050a:	f04f 0300 	mov.w	r3, #0
 800050e:	f04f 0400 	mov.w	r4, #0
 8000512:	00d4      	lsls	r4, r2, #3
 8000514:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000518:	00cb      	lsls	r3, r1, #3
 800051a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800051c:	4619      	mov	r1, r3
 800051e:	f04f 0200 	mov.w	r2, #0
 8000522:	f04f 0300 	mov.w	r3, #0
 8000526:	f04f 0400 	mov.w	r4, #0
 800052a:	00d4      	lsls	r4, r2, #3
 800052c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000530:	00cb      	lsls	r3, r1, #3
 8000532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000534:	3307      	adds	r3, #7
 8000536:	08db      	lsrs	r3, r3, #3
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	ebad 0d03 	sub.w	sp, sp, r3
 800053e:	466b      	mov	r3, sp
 8000540:	3300      	adds	r3, #0
 8000542:	62bb      	str	r3, [r7, #40]	; 0x28
	/* tab of functions's pointers*/
	bool (*testFunTab[])(
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <test_ReadWriteSingleRegisters+0x104>)
 8000546:	463c      	mov	r4, r7
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000556:	e884 0003 	stmia.w	r4, {r0, r1}
			void) = {test_Config, test_EN_AA, test_EN_RXADR, test_SETUP_AW, test_SETUP_RETR, test_RF_SETUP,
				test_STATUS, test_RX_PW, test_DYNPD, test_FEATURE,
	};
	/* Config test */
	uint8_t i = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for (i = 0; i < testSize; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000566:	e013      	b.n	8000590 <test_ReadWriteSingleRegisters+0xac>
		testTab[i] = (testFunTab[i])();	//result of test return to tab
 8000568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000572:	4413      	add	r3, r2
 8000574:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000578:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800057c:	4798      	blx	r3
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000584:	551a      	strb	r2, [r3, r4]
	for (i = 0; i < testSize; i++) {
 8000586:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800058a:	3301      	adds	r3, #1
 800058c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000590:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000596:	429a      	cmp	r2, r3
 8000598:	d8e6      	bhi.n	8000568 <test_ReadWriteSingleRegisters+0x84>
	}

	for (i = 0; i < testSize; i++) {
 800059a:	2300      	movs	r3, #0
 800059c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80005a0:	e00f      	b.n	80005c2 <test_ReadWriteSingleRegisters+0xde>
		if (testTab[i] == 1) {
 80005a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80005a8:	5cd3      	ldrb	r3, [r2, r3]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d004      	beq.n	80005b8 <test_ReadWriteSingleRegisters+0xd4>
			countPass++;
 80005ae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80005b2:	3301      	adds	r3, #1
 80005b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	for (i = 0; i < testSize; i++) {
 80005b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005bc:	3301      	adds	r3, #1
 80005be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80005c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d8ea      	bhi.n	80005a2 <test_ReadWriteSingleRegisters+0xbe>
		}
	}
	if (countPass == testSize)
 80005cc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80005d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d101      	bne.n	80005da <test_ReadWriteSingleRegisters+0xf6>
		return PASS;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e000      	b.n	80005dc <test_ReadWriteSingleRegisters+0xf8>
	return FALL;
 80005da:	2301      	movs	r3, #1
 80005dc:	46b5      	mov	sp, r6

}
 80005de:	4618      	mov	r0, r3
 80005e0:	373c      	adds	r7, #60	; 0x3c
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08002a54 	.word	0x08002a54

080005ec <test_Config>:


bool test_Config() {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0x7F;
 80005f6:	237f      	movs	r3, #127	; 0x7f
 80005f8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	713b      	strb	r3, [r7, #4]

	for (i = 0; i < max; i++) {
 80005fe:	2300      	movs	r3, #0
 8000600:	71bb      	strb	r3, [r7, #6]
 8000602:	e016      	b.n	8000632 <test_Config+0x46>
		var = i | 0x02;
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	713b      	strb	r3, [r7, #4]
		writeRegister(CONFIG, var);
 800060c:	793b      	ldrb	r3, [r7, #4]
 800060e:	4619      	mov	r1, r3
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff fdc3 	bl	800019c <writeRegister>
		if (readRegister(CONFIG) == var) {
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff fd98 	bl	800014c <readRegister>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	793b      	ldrb	r3, [r7, #4]
 8000622:	4293      	cmp	r3, r2
 8000624:	d102      	bne.n	800062c <test_Config+0x40>
			counter++;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < max; i++) {
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	3301      	adds	r3, #1
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	79ba      	ldrb	r2, [r7, #6]
 8000634:	797b      	ldrb	r3, [r7, #5]
 8000636:	429a      	cmp	r2, r3
 8000638:	d3e4      	bcc.n	8000604 <test_Config+0x18>
		}
	}
	if (counter == max)
 800063a:	79fa      	ldrb	r2, [r7, #7]
 800063c:	797b      	ldrb	r3, [r7, #5]
 800063e:	429a      	cmp	r2, r3
 8000640:	d101      	bne.n	8000646 <test_Config+0x5a>
		return PASS;
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <test_Config+0x5c>
	return FALL;
 8000646:	2301      	movs	r3, #1
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <test_EN_AA>:

bool test_EN_AA() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0x3F;
 800065a:	233f      	movs	r3, #63	; 0x3f
 800065c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	713b      	strb	r3, [r7, #4]

	for (i = 0; i < max; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	71bb      	strb	r3, [r7, #6]
 8000666:	e014      	b.n	8000692 <test_EN_AA+0x42>
		var = i;
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	713b      	strb	r3, [r7, #4]
		writeRegister(EN_AA, var);
 800066c:	793b      	ldrb	r3, [r7, #4]
 800066e:	4619      	mov	r1, r3
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff fd93 	bl	800019c <writeRegister>
		if (readRegister(EN_AA) == var) {
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff fd68 	bl	800014c <readRegister>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	793b      	ldrb	r3, [r7, #4]
 8000682:	4293      	cmp	r3, r2
 8000684:	d102      	bne.n	800068c <test_EN_AA+0x3c>
			counter++;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	3301      	adds	r3, #1
 800068a:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < max; i++) {
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	3301      	adds	r3, #1
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	797b      	ldrb	r3, [r7, #5]
 8000696:	429a      	cmp	r2, r3
 8000698:	d3e6      	bcc.n	8000668 <test_EN_AA+0x18>
		}
	}
	if (counter == max)
 800069a:	79fa      	ldrb	r2, [r7, #7]
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d101      	bne.n	80006a6 <test_EN_AA+0x56>
		return PASS;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <test_EN_AA+0x58>
	return FALL;
 80006a6:	2301      	movs	r3, #1
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <test_EN_RXADR>:

bool test_EN_RXADR() {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0x3F;
 80006ba:	233f      	movs	r3, #63	; 0x3f
 80006bc:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	713b      	strb	r3, [r7, #4]

	for (i = 0; i < max; i++) {
 80006c2:	2300      	movs	r3, #0
 80006c4:	71bb      	strb	r3, [r7, #6]
 80006c6:	e014      	b.n	80006f2 <test_EN_RXADR+0x42>
		var = i;
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	713b      	strb	r3, [r7, #4]
		writeRegister(EN_RXADDR, var);
 80006cc:	793b      	ldrb	r3, [r7, #4]
 80006ce:	4619      	mov	r1, r3
 80006d0:	2002      	movs	r0, #2
 80006d2:	f7ff fd63 	bl	800019c <writeRegister>
		if (readRegister(EN_RXADDR) == var) {
 80006d6:	2002      	movs	r0, #2
 80006d8:	f7ff fd38 	bl	800014c <readRegister>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	793b      	ldrb	r3, [r7, #4]
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d102      	bne.n	80006ec <test_EN_RXADR+0x3c>
			counter++;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	3301      	adds	r3, #1
 80006ea:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < max; i++) {
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	3301      	adds	r3, #1
 80006f0:	71bb      	strb	r3, [r7, #6]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	797b      	ldrb	r3, [r7, #5]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d3e6      	bcc.n	80006c8 <test_EN_RXADR+0x18>
		}
	}
	if (counter == max)
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	797b      	ldrb	r3, [r7, #5]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d101      	bne.n	8000706 <test_EN_RXADR+0x56>
		return PASS;
 8000702:	2301      	movs	r3, #1
 8000704:	e000      	b.n	8000708 <test_EN_RXADR+0x58>
	return FALL;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <test_SETUP_AW>:

bool test_SETUP_AW() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0x03;
 800071a:	2303      	movs	r3, #3
 800071c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	713b      	strb	r3, [r7, #4]

	for (i = 0x01; i < max; i++) {
 8000722:	2301      	movs	r3, #1
 8000724:	71bb      	strb	r3, [r7, #6]
 8000726:	e014      	b.n	8000752 <test_SETUP_AW+0x42>
		var = i;
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	713b      	strb	r3, [r7, #4]
		writeRegister(SETUP_AW, var);
 800072c:	793b      	ldrb	r3, [r7, #4]
 800072e:	4619      	mov	r1, r3
 8000730:	2003      	movs	r0, #3
 8000732:	f7ff fd33 	bl	800019c <writeRegister>
		if (readRegister(SETUP_AW) == var) {
 8000736:	2003      	movs	r0, #3
 8000738:	f7ff fd08 	bl	800014c <readRegister>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	793b      	ldrb	r3, [r7, #4]
 8000742:	4293      	cmp	r3, r2
 8000744:	d102      	bne.n	800074c <test_SETUP_AW+0x3c>
			counter++;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	3301      	adds	r3, #1
 800074a:	71fb      	strb	r3, [r7, #7]
	for (i = 0x01; i < max; i++) {
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	3301      	adds	r3, #1
 8000750:	71bb      	strb	r3, [r7, #6]
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	797b      	ldrb	r3, [r7, #5]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3e6      	bcc.n	8000728 <test_SETUP_AW+0x18>
		}
	}
	if (counter == max)
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	797b      	ldrb	r3, [r7, #5]
 800075e:	429a      	cmp	r2, r3
 8000760:	d101      	bne.n	8000766 <test_SETUP_AW+0x56>
		return PASS;
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <test_SETUP_AW+0x58>
	return FALL;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <test_SETUP_RETR>:

bool test_SETUP_RETR() {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0xfF;
 800077a:	23ff      	movs	r3, #255	; 0xff
 800077c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	713b      	strb	r3, [r7, #4]

	for (i = 0; i < max; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	71bb      	strb	r3, [r7, #6]
 8000786:	e014      	b.n	80007b2 <test_SETUP_RETR+0x42>
		var = i;
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	713b      	strb	r3, [r7, #4]
		writeRegister(SETUP_RETR, var);
 800078c:	793b      	ldrb	r3, [r7, #4]
 800078e:	4619      	mov	r1, r3
 8000790:	2004      	movs	r0, #4
 8000792:	f7ff fd03 	bl	800019c <writeRegister>
		if (readRegister(SETUP_RETR) == var) {
 8000796:	2004      	movs	r0, #4
 8000798:	f7ff fcd8 	bl	800014c <readRegister>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	793b      	ldrb	r3, [r7, #4]
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d102      	bne.n	80007ac <test_SETUP_RETR+0x3c>
			counter++;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	3301      	adds	r3, #1
 80007aa:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < max; i++) {
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	3301      	adds	r3, #1
 80007b0:	71bb      	strb	r3, [r7, #6]
 80007b2:	79ba      	ldrb	r2, [r7, #6]
 80007b4:	797b      	ldrb	r3, [r7, #5]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d3e6      	bcc.n	8000788 <test_SETUP_RETR+0x18>
		}
	}
	if (counter == max)
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d101      	bne.n	80007c6 <test_SETUP_RETR+0x56>
		return PASS;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e000      	b.n	80007c8 <test_SETUP_RETR+0x58>
	return FALL;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <test_RF_SETUP>:

bool test_RF_SETUP() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0xFF;
 80007da:	23ff      	movs	r3, #255	; 0xff
 80007dc:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	713b      	strb	r3, [r7, #4]

	for (i = 0; i < max; i++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	71bb      	strb	r3, [r7, #6]
 80007e6:	e016      	b.n	8000816 <test_RF_SETUP+0x46>
		var = i & 0xBF;
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007ee:	713b      	strb	r3, [r7, #4]
		writeRegister(RF_SETUP, var);
 80007f0:	793b      	ldrb	r3, [r7, #4]
 80007f2:	4619      	mov	r1, r3
 80007f4:	2006      	movs	r0, #6
 80007f6:	f7ff fcd1 	bl	800019c <writeRegister>
		if (readRegister(RF_SETUP) == var) {
 80007fa:	2006      	movs	r0, #6
 80007fc:	f7ff fca6 	bl	800014c <readRegister>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	793b      	ldrb	r3, [r7, #4]
 8000806:	4293      	cmp	r3, r2
 8000808:	d102      	bne.n	8000810 <test_RF_SETUP+0x40>
			counter++;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	3301      	adds	r3, #1
 800080e:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < max; i++) {
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	3301      	adds	r3, #1
 8000814:	71bb      	strb	r3, [r7, #6]
 8000816:	79ba      	ldrb	r2, [r7, #6]
 8000818:	797b      	ldrb	r3, [r7, #5]
 800081a:	429a      	cmp	r2, r3
 800081c:	d3e4      	bcc.n	80007e8 <test_RF_SETUP+0x18>
		}
	}
	if (counter == max)
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	797b      	ldrb	r3, [r7, #5]
 8000822:	429a      	cmp	r2, r3
 8000824:	d101      	bne.n	800082a <test_RF_SETUP+0x5a>
		return PASS;
 8000826:	2301      	movs	r3, #1
 8000828:	e000      	b.n	800082c <test_RF_SETUP+0x5c>
	return FALL;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <test_STATUS>:

bool test_STATUS() {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0x7F;
 800083e:	237f      	movs	r3, #127	; 0x7f
 8000840:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	713b      	strb	r3, [r7, #4]

	for (i = 0; i < max; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	e016      	b.n	800087a <test_STATUS+0x46>
		var = i & 0xF0;
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	f023 030f 	bic.w	r3, r3, #15
 8000852:	713b      	strb	r3, [r7, #4]
		writeRegister(STATUS, var);
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	4619      	mov	r1, r3
 8000858:	2007      	movs	r0, #7
 800085a:	f7ff fc9f 	bl	800019c <writeRegister>
		if (readRegister(STATUS) == var) {
 800085e:	2007      	movs	r0, #7
 8000860:	f7ff fc74 	bl	800014c <readRegister>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	793b      	ldrb	r3, [r7, #4]
 800086a:	4293      	cmp	r3, r2
 800086c:	d102      	bne.n	8000874 <test_STATUS+0x40>
			counter++;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3301      	adds	r3, #1
 8000872:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < max; i++) {
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	3301      	adds	r3, #1
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	797b      	ldrb	r3, [r7, #5]
 800087e:	429a      	cmp	r2, r3
 8000880:	d3e4      	bcc.n	800084c <test_STATUS+0x18>
		}
	}
	if (counter == max)
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	797b      	ldrb	r3, [r7, #5]
 8000886:	429a      	cmp	r2, r3
 8000888:	d101      	bne.n	800088e <test_STATUS+0x5a>
		return PASS;
 800088a:	2301      	movs	r3, #1
 800088c:	e000      	b.n	8000890 <test_STATUS+0x5c>
	return FALL;
 800088e:	2301      	movs	r3, #1

}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <test_RX_PW>:

/* Observe TX register can be test only with full RF transmission */
/* RPD register can be test only with full RF transmission */

bool test_RX_PW() {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
	uint8_t counterPipe = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	73bb      	strb	r3, [r7, #14]
	uint8_t pipe = 5;
 80008a6:	2305      	movs	r3, #5
 80008a8:	72fb      	strb	r3, [r7, #11]
	uint8_t max = 0x3F;
 80008aa:	233f      	movs	r3, #63	; 0x3f
 80008ac:	72bb      	strb	r3, [r7, #10]
	uint8_t i, j;
	uint8_t addr = RX_ADDR_P0;
 80008ae:	230a      	movs	r3, #10
 80008b0:	727b      	strb	r3, [r7, #9]
	uint8_t addrMax = RX_ADDR_P0 + pipe;
 80008b2:	7afb      	ldrb	r3, [r7, #11]
 80008b4:	330a      	adds	r3, #10
 80008b6:	723b      	strb	r3, [r7, #8]
	uint8_t var = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	71fb      	strb	r3, [r7, #7]

	for (j = 0; j < addrMax; j++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	733b      	strb	r3, [r7, #12]
 80008c0:	e027      	b.n	8000912 <test_RX_PW+0x7a>
		for (i = 0; i < max; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	737b      	strb	r3, [r7, #13]
 80008c6:	e016      	b.n	80008f6 <test_RX_PW+0x5e>
			var = i;
 80008c8:	7b7b      	ldrb	r3, [r7, #13]
 80008ca:	71fb      	strb	r3, [r7, #7]
			writeRegister(addr, var);
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	7a7b      	ldrb	r3, [r7, #9]
 80008d0:	4611      	mov	r1, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc62 	bl	800019c <writeRegister>
			if (readRegister(addr) == var) {
 80008d8:	7a7b      	ldrb	r3, [r7, #9]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fc36 	bl	800014c <readRegister>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d102      	bne.n	80008f0 <test_RX_PW+0x58>
				counter++;
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	3301      	adds	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < max; i++) {
 80008f0:	7b7b      	ldrb	r3, [r7, #13]
 80008f2:	3301      	adds	r3, #1
 80008f4:	737b      	strb	r3, [r7, #13]
 80008f6:	7b7a      	ldrb	r2, [r7, #13]
 80008f8:	7abb      	ldrb	r3, [r7, #10]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3e4      	bcc.n	80008c8 <test_RX_PW+0x30>
			}
		}
		if (counter == max)
 80008fe:	7bfa      	ldrb	r2, [r7, #15]
 8000900:	7abb      	ldrb	r3, [r7, #10]
 8000902:	429a      	cmp	r2, r3
 8000904:	d102      	bne.n	800090c <test_RX_PW+0x74>
			counterPipe++;
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	3301      	adds	r3, #1
 800090a:	73bb      	strb	r3, [r7, #14]
	for (j = 0; j < addrMax; j++) {
 800090c:	7b3b      	ldrb	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	733b      	strb	r3, [r7, #12]
 8000912:	7b3a      	ldrb	r2, [r7, #12]
 8000914:	7a3b      	ldrb	r3, [r7, #8]
 8000916:	429a      	cmp	r2, r3
 8000918:	d3d3      	bcc.n	80008c2 <test_RX_PW+0x2a>
	}
	if (counterPipe == 5)
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	2b05      	cmp	r3, #5
 800091e:	d101      	bne.n	8000924 <test_RX_PW+0x8c>
		return PASS;
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <test_RX_PW+0x8e>
	return FALL;
 8000924:	2301      	movs	r3, #1
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <test_DYNPD>:
/* FIFO status register can be test only with full RF transmission */

bool test_DYNPD() {
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0x3F;
 8000938:	233f      	movs	r3, #63	; 0x3f
 800093a:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	713b      	strb	r3, [r7, #4]

	for (i = 0; i < max; i++) {
 8000940:	2300      	movs	r3, #0
 8000942:	71bb      	strb	r3, [r7, #6]
 8000944:	e014      	b.n	8000970 <test_DYNPD+0x42>
		var = i;
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	713b      	strb	r3, [r7, #4]
		writeRegister(DYNPD, var);
 800094a:	793b      	ldrb	r3, [r7, #4]
 800094c:	4619      	mov	r1, r3
 800094e:	201c      	movs	r0, #28
 8000950:	f7ff fc24 	bl	800019c <writeRegister>
		if (readRegister(DYNPD) == var) {
 8000954:	201c      	movs	r0, #28
 8000956:	f7ff fbf9 	bl	800014c <readRegister>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	793b      	ldrb	r3, [r7, #4]
 8000960:	4293      	cmp	r3, r2
 8000962:	d102      	bne.n	800096a <test_DYNPD+0x3c>
			counter++;
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	3301      	adds	r3, #1
 8000968:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < max; i++) {
 800096a:	79bb      	ldrb	r3, [r7, #6]
 800096c:	3301      	adds	r3, #1
 800096e:	71bb      	strb	r3, [r7, #6]
 8000970:	79ba      	ldrb	r2, [r7, #6]
 8000972:	797b      	ldrb	r3, [r7, #5]
 8000974:	429a      	cmp	r2, r3
 8000976:	d3e6      	bcc.n	8000946 <test_DYNPD+0x18>
		}
	}
	if (counter == max)
 8000978:	79fa      	ldrb	r2, [r7, #7]
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	429a      	cmp	r2, r3
 800097e:	d101      	bne.n	8000984 <test_DYNPD+0x56>
		return PASS;
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <test_DYNPD+0x58>
	return FALL;
 8000984:	2301      	movs	r3, #1
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <test_FEATURE>:

bool test_FEATURE() {
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
	uint8_t counter = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	71fb      	strb	r3, [r7, #7]
	uint8_t max = 0x07;
 8000998:	2307      	movs	r3, #7
 800099a:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint8_t var = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	713b      	strb	r3, [r7, #4]

	for (i = 0; i < max; i++) {
 80009a0:	2300      	movs	r3, #0
 80009a2:	71bb      	strb	r3, [r7, #6]
 80009a4:	e014      	b.n	80009d0 <test_FEATURE+0x42>
		var = i;
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	713b      	strb	r3, [r7, #4]
		writeRegister(FEATURE, var);
 80009aa:	793b      	ldrb	r3, [r7, #4]
 80009ac:	4619      	mov	r1, r3
 80009ae:	201d      	movs	r0, #29
 80009b0:	f7ff fbf4 	bl	800019c <writeRegister>
		if (readRegister(FEATURE) == var) {
 80009b4:	201d      	movs	r0, #29
 80009b6:	f7ff fbc9 	bl	800014c <readRegister>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	793b      	ldrb	r3, [r7, #4]
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d102      	bne.n	80009ca <test_FEATURE+0x3c>
			counter++;
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	3301      	adds	r3, #1
 80009c8:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < max; i++) {
 80009ca:	79bb      	ldrb	r3, [r7, #6]
 80009cc:	3301      	adds	r3, #1
 80009ce:	71bb      	strb	r3, [r7, #6]
 80009d0:	79ba      	ldrb	r2, [r7, #6]
 80009d2:	797b      	ldrb	r3, [r7, #5]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d3e6      	bcc.n	80009a6 <test_FEATURE+0x18>
		}
	}
	if (counter == max)
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	797b      	ldrb	r3, [r7, #5]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d101      	bne.n	80009e4 <test_FEATURE+0x56>
		return PASS;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e000      	b.n	80009e6 <test_FEATURE+0x58>
	return FALL;
 80009e4:	2301      	movs	r3, #1
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_SPI1_Init+0x64>)
 80009f6:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <MX_SPI1_Init+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <MX_SPI1_Init+0x64>)
 80009fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a24:	2218      	movs	r2, #24
 8000a26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_SPI1_Init+0x64>)
 8000a42:	f001 f86f 	bl	8001b24 <HAL_SPI_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a4c:	f7ff fd44 	bl	80004d8 <Error_Handler>
  }

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000002c 	.word	0x2000002c
 8000a58:	40013000 	.word	0x40013000

08000a5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0310 	add.w	r3, r7, #16
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1b      	ldr	r2, [pc, #108]	; (8000ae4 <HAL_SPI_MspInit+0x88>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d12f      	bne.n	8000adc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a86:	6193      	str	r3, [r2, #24]
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_SPI_MspInit+0x8c>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aac:	23a0      	movs	r3, #160	; 0xa0
 8000aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0310 	add.w	r3, r7, #16
 8000abc:	4619      	mov	r1, r3
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <HAL_SPI_MspInit+0x90>)
 8000ac0:	f000 fab2 	bl	8001028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac4:	2340      	movs	r3, #64	; 0x40
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f107 0310 	add.w	r3, r7, #16
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <HAL_SPI_MspInit+0x90>)
 8000ad8:	f000 faa6 	bl	8001028 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40013000 	.word	0x40013000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40010800 	.word	0x40010800

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_MspInit+0x5c>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <HAL_MspInit+0x5c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6193      	str	r3, [r2, #24]
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	61d3      	str	r3, [r2, #28]
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x5c>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_MspInit+0x60>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_MspInit+0x60>)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <HardFault_Handler+0x4>

08000b66 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <BusFault_Handler+0x4>

08000b72 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f918 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bb0:	f000 fbac 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <SystemInit+0x5c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <SystemInit+0x5c>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <SystemInit+0x5c>)
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4911      	ldr	r1, [pc, #68]	; (8000c14 <SystemInit+0x5c>)
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <SystemInit+0x60>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <SystemInit+0x5c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <SystemInit+0x5c>)
 8000bda:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <SystemInit+0x5c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SystemInit+0x5c>)
 8000bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SystemInit+0x5c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <SystemInit+0x5c>)
 8000bf6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000bfa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SystemInit+0x5c>)
 8000bfe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c02:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SystemInit+0x64>)
 8000c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0a:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	f8ff0000 	.word	0xf8ff0000
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <MX_TIM1_Init+0x9c>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c44:	2247      	movs	r2, #71	; 0x47
 8000c46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c68:	4813      	ldr	r0, [pc, #76]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c6a:	f001 fc75 	bl	8002558 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c74:	f7ff fc30 	bl	80004d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000c86:	f001 fcb5 	bl	80025f4 <HAL_TIM_ConfigClockSource>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c90:	f7ff fc22 	bl	80004d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM1_Init+0x98>)
 8000ca2:	f001 fe57 	bl	8002954 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cac:	f7ff fc14 	bl	80004d8 <Error_Handler>
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000084 	.word	0x20000084
 8000cbc:	40012c00 	.word	0x40012c00

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_TIM_Base_MspInit+0x34>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10b      	bne.n	8000cea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_TIM_Base_MspInit+0x38>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	4a08      	ldr	r2, [pc, #32]	; (8000cf8 <HAL_TIM_Base_MspInit+0x38>)
 8000cd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cdc:	6193      	str	r3, [r2, #24]
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_TIM_Base_MspInit+0x38>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	40012c00 	.word	0x40012c00
 8000cf8:	40021000 	.word	0x40021000

08000cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cfe:	e003      	b.n	8000d08 <LoopCopyDataInit>

08000d00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d06:	3104      	adds	r1, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d10:	d3f6      	bcc.n	8000d00 <CopyDataInit>
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d14:	e002      	b.n	8000d1c <LoopFillZerobss>

08000d16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d18:	f842 3b04 	str.w	r3, [r2], #4

08000d1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d20:	d3f9      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d22:	f7ff ff49 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f001 fe59 	bl	80029dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fb53 	bl	80003d4 <main>
  bx lr
 8000d2e:	4770      	bx	lr
  ldr r3, =_sidata
 8000d30:	08002aa8 	.word	0x08002aa8
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d38:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000d3c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000d40:	200000c8 	.word	0x200000c8

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 f923 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff fec4 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f93b 	bl	800100e <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 f903 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <HAL_IncTick+0x20>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200000c4 	.word	0x200000c4

08000df8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	200000c4 	.word	0x200000c4

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3e:	4a04      	ldr	r2, [pc, #16]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	60d3      	str	r3, [r2, #12]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	db0b      	blt.n	8000e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 021f 	and.w	r2, r3, #31
 8000e88:	4906      	ldr	r1, [pc, #24]	; (8000ea4 <__NVIC_EnableIRQ+0x34>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	095b      	lsrs	r3, r3, #5
 8000e90:	2001      	movs	r0, #1
 8000e92:	fa00 f202 	lsl.w	r2, r0, r2
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100

08000ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	db0a      	blt.n	8000ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	490c      	ldr	r1, [pc, #48]	; (8000ef4 <__NVIC_SetPriority+0x4c>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	440b      	add	r3, r1
 8000ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed0:	e00a      	b.n	8000ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4908      	ldr	r1, [pc, #32]	; (8000ef8 <__NVIC_SetPriority+0x50>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	3b04      	subs	r3, #4
 8000ee0:	0112      	lsls	r2, r2, #4
 8000ee2:	b2d2      	uxtb	r2, r2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	761a      	strb	r2, [r3, #24]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f1c3 0307 	rsb	r3, r3, #7
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	bf28      	it	cs
 8000f1a:	2304      	movcs	r3, #4
 8000f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2b06      	cmp	r3, #6
 8000f24:	d902      	bls.n	8000f2c <NVIC_EncodePriority+0x30>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	e000      	b.n	8000f2e <NVIC_EncodePriority+0x32>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	401a      	ands	r2, r3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f44:	f04f 31ff 	mov.w	r1, #4294967295
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4e:	43d9      	mvns	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	4313      	orrs	r3, r2
         );
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3724      	adds	r7, #36	; 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff90 	bl	8000ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff2d 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff42 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff90 	bl	8000efc <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5f 	bl	8000ea8 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff35 	bl	8000e70 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b08b      	sub	sp, #44	; 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e127      	b.n	800128c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800103c:	2201      	movs	r2, #1
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 8116 	bne.w	8001286 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b12      	cmp	r3, #18
 8001060:	d034      	beq.n	80010cc <HAL_GPIO_Init+0xa4>
 8001062:	2b12      	cmp	r3, #18
 8001064:	d80d      	bhi.n	8001082 <HAL_GPIO_Init+0x5a>
 8001066:	2b02      	cmp	r3, #2
 8001068:	d02b      	beq.n	80010c2 <HAL_GPIO_Init+0x9a>
 800106a:	2b02      	cmp	r3, #2
 800106c:	d804      	bhi.n	8001078 <HAL_GPIO_Init+0x50>
 800106e:	2b00      	cmp	r3, #0
 8001070:	d031      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d01c      	beq.n	80010b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001076:	e048      	b.n	800110a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001078:	2b03      	cmp	r3, #3
 800107a:	d043      	beq.n	8001104 <HAL_GPIO_Init+0xdc>
 800107c:	2b11      	cmp	r3, #17
 800107e:	d01b      	beq.n	80010b8 <HAL_GPIO_Init+0x90>
          break;
 8001080:	e043      	b.n	800110a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001082:	4a89      	ldr	r2, [pc, #548]	; (80012a8 <HAL_GPIO_Init+0x280>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d026      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 8001088:	4a87      	ldr	r2, [pc, #540]	; (80012a8 <HAL_GPIO_Init+0x280>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d806      	bhi.n	800109c <HAL_GPIO_Init+0x74>
 800108e:	4a87      	ldr	r2, [pc, #540]	; (80012ac <HAL_GPIO_Init+0x284>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d020      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 8001094:	4a86      	ldr	r2, [pc, #536]	; (80012b0 <HAL_GPIO_Init+0x288>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d01d      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
          break;
 800109a:	e036      	b.n	800110a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800109c:	4a85      	ldr	r2, [pc, #532]	; (80012b4 <HAL_GPIO_Init+0x28c>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d019      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 80010a2:	4a85      	ldr	r2, [pc, #532]	; (80012b8 <HAL_GPIO_Init+0x290>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d016      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
 80010a8:	4a84      	ldr	r2, [pc, #528]	; (80012bc <HAL_GPIO_Init+0x294>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d013      	beq.n	80010d6 <HAL_GPIO_Init+0xae>
          break;
 80010ae:	e02c      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e028      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	3304      	adds	r3, #4
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e023      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	3308      	adds	r3, #8
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e01e      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	330c      	adds	r3, #12
 80010d2:	623b      	str	r3, [r7, #32]
          break;
 80010d4:	e019      	b.n	800110a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010de:	2304      	movs	r3, #4
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e012      	b.n	800110a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d105      	bne.n	80010f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ec:	2308      	movs	r3, #8
 80010ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	611a      	str	r2, [r3, #16]
          break;
 80010f6:	e008      	b.n	800110a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010f8:	2308      	movs	r3, #8
 80010fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	615a      	str	r2, [r3, #20]
          break;
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2bff      	cmp	r3, #255	; 0xff
 800110e:	d801      	bhi.n	8001114 <HAL_GPIO_Init+0xec>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	e001      	b.n	8001118 <HAL_GPIO_Init+0xf0>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3304      	adds	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d802      	bhi.n	8001126 <HAL_GPIO_Init+0xfe>
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x104>
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	3b08      	subs	r3, #8
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	210f      	movs	r1, #15
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	401a      	ands	r2, r3
 800113e:	6a39      	ldr	r1, [r7, #32]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	431a      	orrs	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 8096 	beq.w	8001286 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800115a:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_GPIO_Init+0x298>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_GPIO_Init+0x298>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6193      	str	r3, [r2, #24]
 8001166:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <HAL_GPIO_Init+0x298>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001172:	4a54      	ldr	r2, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	4013      	ands	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <HAL_GPIO_Init+0x2a0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x19e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4a      	ldr	r2, [pc, #296]	; (80012cc <HAL_GPIO_Init+0x2a4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x19a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a49      	ldr	r2, [pc, #292]	; (80012d0 <HAL_GPIO_Init+0x2a8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x196>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a48      	ldr	r2, [pc, #288]	; (80012d4 <HAL_GPIO_Init+0x2ac>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x192>
 80011b6:	2303      	movs	r3, #3
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x1a0>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x1a0>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x1a0>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x1a0>
 80011c6:	2300      	movs	r3, #0
 80011c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011d8:	493a      	ldr	r1, [pc, #232]	; (80012c4 <HAL_GPIO_Init+0x29c>)
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4938      	ldr	r1, [pc, #224]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001200:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	43db      	mvns	r3, r3
 8001208:	4933      	ldr	r1, [pc, #204]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800120a:	4013      	ands	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	492e      	ldr	r1, [pc, #184]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	43db      	mvns	r3, r3
 8001230:	4929      	ldr	r1, [pc, #164]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001232:	4013      	ands	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4924      	ldr	r1, [pc, #144]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
 800124e:	e006      	b.n	800125e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001250:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	43db      	mvns	r3, r3
 8001258:	491f      	ldr	r1, [pc, #124]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800125a:	4013      	ands	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d006      	beq.n	8001278 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800126a:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	491a      	ldr	r1, [pc, #104]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	60cb      	str	r3, [r1, #12]
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	43db      	mvns	r3, r3
 8001280:	4915      	ldr	r1, [pc, #84]	; (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001282:	4013      	ands	r3, r2
 8001284:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	3301      	adds	r3, #1
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	f47f aed0 	bne.w	800103c <HAL_GPIO_Init+0x14>
  }
}
 800129c:	bf00      	nop
 800129e:	372c      	adds	r7, #44	; 0x2c
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	10210000 	.word	0x10210000
 80012ac:	10110000 	.word	0x10110000
 80012b0:	10120000 	.word	0x10120000
 80012b4:	10310000 	.word	0x10310000
 80012b8:	10320000 	.word	0x10320000
 80012bc:	10220000 	.word	0x10220000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40011400 	.word	0x40011400
 80012d8:	40010400 	.word	0x40010400

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	611a      	str	r2, [r3, #16]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f806 	bl	800133c <HAL_GPIO_EXTI_Callback>
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e26c      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8087 	beq.w	800147e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001370:	4b92      	ldr	r3, [pc, #584]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b04      	cmp	r3, #4
 800137a:	d00c      	beq.n	8001396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800137c:	4b8f      	ldr	r3, [pc, #572]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	d112      	bne.n	80013ae <HAL_RCC_OscConfig+0x5e>
 8001388:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d10b      	bne.n	80013ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	4b89      	ldr	r3, [pc, #548]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d06c      	beq.n	800147c <HAL_RCC_OscConfig+0x12c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d168      	bne.n	800147c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e246      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x76>
 80013b8:	4b80      	ldr	r3, [pc, #512]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a7f      	ldr	r2, [pc, #508]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e02e      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x98>
 80013ce:	4b7b      	ldr	r3, [pc, #492]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a7a      	ldr	r2, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b78      	ldr	r3, [pc, #480]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a77      	ldr	r2, [pc, #476]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0xbc>
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a71      	ldr	r2, [pc, #452]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6f      	ldr	r3, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6e      	ldr	r2, [pc, #440]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 800140c:	4b6b      	ldr	r3, [pc, #428]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a6a      	ldr	r2, [pc, #424]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b68      	ldr	r3, [pc, #416]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a67      	ldr	r2, [pc, #412]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fce4 	bl	8000df8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fce0 	bl	8000df8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e1fa      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b5d      	ldr	r3, [pc, #372]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xe4>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fcd0 	bl	8000df8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fccc 	bl	8000df8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1e6      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x10c>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148a:	4b4c      	ldr	r3, [pc, #304]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x18c>
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b43      	ldr	r3, [pc, #268]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x176>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1ba      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4939      	ldr	r1, [pc, #228]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x270>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fc85 	bl	8000df8 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc81 	bl	8000df8 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e19b      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4927      	ldr	r1, [pc, #156]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_RCC_OscConfig+0x270>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc64 	bl	8000df8 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fc60 	bl	8000df8 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e17a      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03a      	beq.n	80015d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d019      	beq.n	800159a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_RCC_OscConfig+0x274>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156c:	f7ff fc44 	bl	8000df8 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fc40 	bl	8000df8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e15a      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f000 faa8 	bl	8001ae8 <RCC_Delay>
 8001598:	e01c      	b.n	80015d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_RCC_OscConfig+0x274>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fc2a 	bl	8000df8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a6:	e00f      	b.n	80015c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fc26 	bl	8000df8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d908      	bls.n	80015c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e140      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	42420000 	.word	0x42420000
 80015c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b9e      	ldr	r3, [pc, #632]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e9      	bne.n	80015a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a6 	beq.w	800172e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	4b97      	ldr	r3, [pc, #604]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b94      	ldr	r3, [pc, #592]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a93      	ldr	r2, [pc, #588]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b91      	ldr	r3, [pc, #580]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	4b8e      	ldr	r3, [pc, #568]	; (8001848 <HAL_RCC_OscConfig+0x4f8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161a:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x4f8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a8a      	ldr	r2, [pc, #552]	; (8001848 <HAL_RCC_OscConfig+0x4f8>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001626:	f7ff fbe7 	bl	8000df8 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7ff fbe3 	bl	8000df8 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	; 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0fd      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b81      	ldr	r3, [pc, #516]	; (8001848 <HAL_RCC_OscConfig+0x4f8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x312>
 8001654:	4b7b      	ldr	r3, [pc, #492]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a7a      	ldr	r2, [pc, #488]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e02d      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x334>
 800166a:	4b76      	ldr	r3, [pc, #472]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a75      	ldr	r2, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	4b73      	ldr	r3, [pc, #460]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a72      	ldr	r2, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	e01c      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x356>
 800168c:	4b6d      	ldr	r3, [pc, #436]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a6c      	ldr	r2, [pc, #432]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a69      	ldr	r2, [pc, #420]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a66      	ldr	r2, [pc, #408]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b64      	ldr	r3, [pc, #400]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a63      	ldr	r2, [pc, #396]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d015      	beq.n	80016f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb97 	bl	8000df8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff fb93 	bl	8000df8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e0ab      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	4b57      	ldr	r3, [pc, #348]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ee      	beq.n	80016ce <HAL_RCC_OscConfig+0x37e>
 80016f0:	e014      	b.n	800171c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fb81 	bl	8000df8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fb7d 	bl	8000df8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e095      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	4b4c      	ldr	r3, [pc, #304]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ee      	bne.n	80016fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d105      	bne.n	800172e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a47      	ldr	r2, [pc, #284]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8081 	beq.w	800183a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001738:	4b42      	ldr	r3, [pc, #264]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d061      	beq.n	8001808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d146      	bne.n	80017da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_RCC_OscConfig+0x4fc>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff fb51 	bl	8000df8 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff fb4d 	bl	8000df8 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e067      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	4b35      	ldr	r3, [pc, #212]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d108      	bne.n	8001794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001782:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	492d      	ldr	r1, [pc, #180]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001794:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a19      	ldr	r1, [r3, #32]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	430b      	orrs	r3, r1
 80017a6:	4927      	ldr	r1, [pc, #156]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x4fc>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff fb21 	bl	8000df8 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff fb1d 	bl	8000df8 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e037      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	4b1d      	ldr	r3, [pc, #116]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x46a>
 80017d8:	e02f      	b.n	800183a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <HAL_RCC_OscConfig+0x4fc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb0a 	bl	8000df8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb06 	bl	8000df8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e020      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x498>
 8001806:	e018      	b.n	800183a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d101      	bne.n	8001814 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e013      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	429a      	cmp	r2, r3
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	42420060 	.word	0x42420060

08001850 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0d0      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d910      	bls.n	8001894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b67      	ldr	r3, [pc, #412]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 0207 	bic.w	r2, r3, #7
 800187a:	4965      	ldr	r1, [pc, #404]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0b8      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ac:	4b59      	ldr	r3, [pc, #356]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a58      	ldr	r2, [pc, #352]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0308 	and.w	r3, r3, #8
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c4:	4b53      	ldr	r3, [pc, #332]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	494d      	ldr	r1, [pc, #308]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d040      	beq.n	8001970 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b47      	ldr	r3, [pc, #284]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d115      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e07f      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e073      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e06b      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192e:	4b39      	ldr	r3, [pc, #228]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f023 0203 	bic.w	r2, r3, #3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4936      	ldr	r1, [pc, #216]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001940:	f7ff fa5a 	bl	8000df8 <HAL_GetTick>
 8001944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001946:	e00a      	b.n	800195e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001948:	f7ff fa56 	bl	8000df8 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e053      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 020c 	and.w	r2, r3, #12
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	429a      	cmp	r2, r3
 800196e:	d1eb      	bne.n	8001948 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d210      	bcs.n	80019a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 0207 	bic.w	r2, r3, #7
 8001986:	4922      	ldr	r1, [pc, #136]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	683a      	ldr	r2, [r7, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e032      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ac:	4b19      	ldr	r3, [pc, #100]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4916      	ldr	r1, [pc, #88]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	490e      	ldr	r1, [pc, #56]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019de:	f000 f821 	bl	8001a24 <HAL_RCC_GetSysClockFreq>
 80019e2:	4601      	mov	r1, r0
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	091b      	lsrs	r3, r3, #4
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	fa21 f303 	lsr.w	r3, r1, r3
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1cc>)
 80019f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1d0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f9b8 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40022000 	.word	0x40022000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	08002a90 	.word	0x08002a90
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a24:	b490      	push	{r4, r7}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a2c:	1d3c      	adds	r4, r7, #4
 8001a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a4e:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x40>
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x46>
 8001a62:	e02d      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a66:	623b      	str	r3, [r7, #32]
      break;
 8001a68:	e02d      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	0c9b      	lsrs	r3, r3, #18
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a76:	4413      	add	r3, r2
 8001a78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c5b      	lsrs	r3, r3, #17
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a96:	4413      	add	r3, r2
 8001a98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aa2:	fb02 f203 	mul.w	r2, r2, r3
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
 8001aae:	e004      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	623b      	str	r3, [r7, #32]
      break;
 8001abe:	e002      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ac2:	623b      	str	r3, [r7, #32]
      break;
 8001ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc90      	pop	{r4, r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	08002a7c 	.word	0x08002a7c
 8001ad8:	08002a8c 	.word	0x08002a8c
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	007a1200 	.word	0x007a1200
 8001ae4:	003d0900 	.word	0x003d0900

08001ae8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <RCC_Delay+0x34>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <RCC_Delay+0x38>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0a5b      	lsrs	r3, r3, #9
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b04:	bf00      	nop
  }
  while (Delay --);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1e5a      	subs	r2, r3, #1
 8001b0a:	60fa      	str	r2, [r7, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f9      	bne.n	8001b04 <RCC_Delay+0x1c>
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	10624dd3 	.word	0x10624dd3

08001b24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e053      	b.n	8001bde <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe ff83 	bl	8000a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	ea42 0103 	orr.w	r1, r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	0c1a      	lsrs	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f002 0204 	and.w	r2, r2, #4
 8001bbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b088      	sub	sp, #32
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_SPI_Transmit+0x22>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e11e      	b.n	8001e46 <HAL_SPI_Transmit+0x260>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c10:	f7ff f8f2 	bl	8000df8 <HAL_GetTick>
 8001c14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d002      	beq.n	8001c2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c2a:	e103      	b.n	8001e34 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <HAL_SPI_Transmit+0x52>
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c3c:	e0fa      	b.n	8001e34 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2203      	movs	r2, #3
 8001c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	88fa      	ldrh	r2, [r7, #6]
 8001c56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c84:	d107      	bne.n	8001c96 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca0:	2b40      	cmp	r3, #64	; 0x40
 8001ca2:	d007      	beq.n	8001cb4 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cbc:	d14b      	bne.n	8001d56 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_SPI_Transmit+0xe6>
 8001cc6:	8afb      	ldrh	r3, [r7, #22]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d13e      	bne.n	8001d4a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd0:	881a      	ldrh	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	1c9a      	adds	r2, r3, #2
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cf0:	e02b      	b.n	8001d4a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d112      	bne.n	8001d26 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	881a      	ldrh	r2, [r3, #0]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	1c9a      	adds	r2, r3, #2
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d24:	e011      	b.n	8001d4a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d26:	f7ff f867 	bl	8000df8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d803      	bhi.n	8001d3e <HAL_SPI_Transmit+0x158>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d102      	bne.n	8001d44 <HAL_SPI_Transmit+0x15e>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d48:	e074      	b.n	8001e34 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ce      	bne.n	8001cf2 <HAL_SPI_Transmit+0x10c>
 8001d54:	e04c      	b.n	8001df0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_SPI_Transmit+0x17e>
 8001d5e:	8afb      	ldrh	r3, [r7, #22]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d140      	bne.n	8001de6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	7812      	ldrb	r2, [r2, #0]
 8001d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d8a:	e02c      	b.n	8001de6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d113      	bne.n	8001dc2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	330c      	adds	r3, #12
 8001da4:	7812      	ldrb	r2, [r2, #0]
 8001da6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dc0:	e011      	b.n	8001de6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dc2:	f7ff f819 	bl	8000df8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d803      	bhi.n	8001dda <HAL_SPI_Transmit+0x1f4>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d102      	bne.n	8001de0 <HAL_SPI_Transmit+0x1fa>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001de4:	e026      	b.n	8001e34 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1cd      	bne.n	8001d8c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	6839      	ldr	r1, [r7, #0]
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fb91 	bl	800251c <SPI_EndRxTxTransaction>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10a      	bne.n	8001e24 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	77fb      	strb	r3, [r7, #31]
 8001e30:	e000      	b.n	8001e34 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b088      	sub	sp, #32
 8001e52:	af02      	add	r7, sp, #8
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e6a:	d112      	bne.n	8001e92 <HAL_SPI_Receive+0x44>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10e      	bne.n	8001e92 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2204      	movs	r2, #4
 8001e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e7c:	88fa      	ldrh	r2, [r7, #6]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	4613      	mov	r3, r2
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f8e9 	bl	8002060 <HAL_SPI_TransmitReceive>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	e0e2      	b.n	8002058 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_SPI_Receive+0x52>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e0db      	b.n	8002058 <HAL_SPI_Receive+0x20a>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ea8:	f7fe ffa6 	bl	8000df8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d002      	beq.n	8001ec0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ebe:	e0c2      	b.n	8002046 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_SPI_Receive+0x7e>
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ed0:	e0b9      	b.n	8002046 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f18:	d107      	bne.n	8001f2a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f34:	2b40      	cmp	r3, #64	; 0x40
 8001f36:	d007      	beq.n	8001f48 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d162      	bne.n	8002016 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f50:	e02e      	b.n	8001fb0 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d115      	bne.n	8001f8c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f103 020c 	add.w	r2, r3, #12
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	7812      	ldrb	r2, [r2, #0]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f8a:	e011      	b.n	8001fb0 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f8c:	f7fe ff34 	bl	8000df8 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d803      	bhi.n	8001fa4 <HAL_SPI_Receive+0x156>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d102      	bne.n	8001faa <HAL_SPI_Receive+0x15c>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001fae:	e04a      	b.n	8002046 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1cb      	bne.n	8001f52 <HAL_SPI_Receive+0x104>
 8001fba:	e031      	b.n	8002020 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d113      	bne.n	8001ff2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	b292      	uxth	r2, r2
 8001fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	1c9a      	adds	r2, r3, #2
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ff0:	e011      	b.n	8002016 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ff2:	f7fe ff01 	bl	8000df8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d803      	bhi.n	800200a <HAL_SPI_Receive+0x1bc>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d102      	bne.n	8002010 <HAL_SPI_Receive+0x1c2>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d102      	bne.n	8002016 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002014:	e017      	b.n	8002046 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1cd      	bne.n	8001fbc <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	6839      	ldr	r1, [r7, #0]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 fa27 	bl	8002478 <SPI_EndRxTransaction>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
 8002042:	e000      	b.n	8002046 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002044:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002056:	7dfb      	ldrb	r3, [r7, #23]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800206e:	2301      	movs	r3, #1
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_SPI_TransmitReceive+0x26>
 8002082:	2302      	movs	r3, #2
 8002084:	e18a      	b.n	800239c <HAL_SPI_TransmitReceive+0x33c>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800208e:	f7fe feb3 	bl	8000df8 <HAL_GetTick>
 8002092:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800209a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020a4:	887b      	ldrh	r3, [r7, #2]
 80020a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d00f      	beq.n	80020d0 <HAL_SPI_TransmitReceive+0x70>
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020b6:	d107      	bne.n	80020c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <HAL_SPI_TransmitReceive+0x68>
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d003      	beq.n	80020d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80020c8:	2302      	movs	r3, #2
 80020ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020ce:	e15b      	b.n	8002388 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_SPI_TransmitReceive+0x82>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_SPI_TransmitReceive+0x82>
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d103      	bne.n	80020ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020e8:	e14e      	b.n	8002388 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d003      	beq.n	80020fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	887a      	ldrh	r2, [r7, #2]
 800210e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	887a      	ldrh	r2, [r7, #2]
 8002126:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213e:	2b40      	cmp	r3, #64	; 0x40
 8002140:	d007      	beq.n	8002152 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800215a:	d178      	bne.n	800224e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_SPI_TransmitReceive+0x10a>
 8002164:	8b7b      	ldrh	r3, [r7, #26]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d166      	bne.n	8002238 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	1c9a      	adds	r2, r3, #2
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800218e:	e053      	b.n	8002238 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d11b      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x176>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d016      	beq.n	80021d6 <HAL_SPI_TransmitReceive+0x176>
 80021a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d113      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	881a      	ldrh	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	1c9a      	adds	r2, r3, #2
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d119      	bne.n	8002218 <HAL_SPI_TransmitReceive+0x1b8>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d014      	beq.n	8002218 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	b292      	uxth	r2, r2
 80021fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	1c9a      	adds	r2, r3, #2
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002214:	2301      	movs	r3, #1
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002218:	f7fe fdee 	bl	8000df8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002224:	429a      	cmp	r2, r3
 8002226:	d807      	bhi.n	8002238 <HAL_SPI_TransmitReceive+0x1d8>
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222e:	d003      	beq.n	8002238 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002236:	e0a7      	b.n	8002388 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1a6      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x130>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002246:	b29b      	uxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1a1      	bne.n	8002190 <HAL_SPI_TransmitReceive+0x130>
 800224c:	e07c      	b.n	8002348 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <HAL_SPI_TransmitReceive+0x1fc>
 8002256:	8b7b      	ldrh	r3, [r7, #26]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d16b      	bne.n	8002334 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	330c      	adds	r3, #12
 8002266:	7812      	ldrb	r2, [r2, #0]
 8002268:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002282:	e057      	b.n	8002334 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d11c      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x26c>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_SPI_TransmitReceive+0x26c>
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d114      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	330c      	adds	r3, #12
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d119      	bne.n	800230e <HAL_SPI_TransmitReceive+0x2ae>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d014      	beq.n	800230e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800230a:	2301      	movs	r3, #1
 800230c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800230e:	f7fe fd73 	bl	8000df8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800231a:	429a      	cmp	r2, r3
 800231c:	d803      	bhi.n	8002326 <HAL_SPI_TransmitReceive+0x2c6>
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d102      	bne.n	800232c <HAL_SPI_TransmitReceive+0x2cc>
 8002326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002332:	e029      	b.n	8002388 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1a2      	bne.n	8002284 <HAL_SPI_TransmitReceive+0x224>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d19d      	bne.n	8002284 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f8e5 	bl	800251c <SPI_EndRxTxTransaction>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2220      	movs	r2, #32
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002364:	e010      	b.n	8002388 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10b      	bne.n	8002386 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	e000      	b.n	8002388 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002386:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002398:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800239c:	4618      	mov	r0, r3
 800239e:	3730      	adds	r7, #48	; 0x30
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	4613      	mov	r3, r2
 80023b2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023b4:	e04c      	b.n	8002450 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d048      	beq.n	8002450 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80023be:	f7fe fd1b 	bl	8000df8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d902      	bls.n	80023d4 <SPI_WaitFlagStateUntilTimeout+0x30>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d13d      	bne.n	8002450 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ec:	d111      	bne.n	8002412 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f6:	d004      	beq.n	8002402 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002400:	d107      	bne.n	8002412 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002410:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	d10f      	bne.n	800243c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e00f      	b.n	8002470 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	429a      	cmp	r2, r3
 800246c:	d1a3      	bne.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800248c:	d111      	bne.n	80024b2 <SPI_EndRxTransaction+0x3a>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002496:	d004      	beq.n	80024a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a0:	d107      	bne.n	80024b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ba:	d117      	bne.n	80024ec <SPI_EndRxTransaction+0x74>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d112      	bne.n	80024ec <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2101      	movs	r1, #1
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff67 	bl	80023a4 <SPI_WaitFlagStateUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01a      	beq.n	8002512 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e013      	b.n	8002514 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff ff54 	bl	80023a4 <SPI_WaitFlagStateUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f043 0220 	orr.w	r2, r3, #32
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e000      	b.n	8002514 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	2180      	movs	r1, #128	; 0x80
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff ff36 	bl	80023a4 <SPI_WaitFlagStateUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d007      	beq.n	800254e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e000      	b.n	8002550 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e01d      	b.n	80025a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe fb9e 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f000 f8e4 	bl	8002764 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d007      	beq.n	80025e0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_TIM_ConfigClockSource+0x18>
 8002608:	2302      	movs	r3, #2
 800260a:	e0a6      	b.n	800275a <HAL_TIM_ConfigClockSource+0x166>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800262a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002632:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b40      	cmp	r3, #64	; 0x40
 8002642:	d067      	beq.n	8002714 <HAL_TIM_ConfigClockSource+0x120>
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d80b      	bhi.n	8002660 <HAL_TIM_ConfigClockSource+0x6c>
 8002648:	2b10      	cmp	r3, #16
 800264a:	d073      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0x140>
 800264c:	2b10      	cmp	r3, #16
 800264e:	d802      	bhi.n	8002656 <HAL_TIM_ConfigClockSource+0x62>
 8002650:	2b00      	cmp	r3, #0
 8002652:	d06f      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002654:	e078      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002656:	2b20      	cmp	r3, #32
 8002658:	d06c      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0x140>
 800265a:	2b30      	cmp	r3, #48	; 0x30
 800265c:	d06a      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800265e:	e073      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002660:	2b70      	cmp	r3, #112	; 0x70
 8002662:	d00d      	beq.n	8002680 <HAL_TIM_ConfigClockSource+0x8c>
 8002664:	2b70      	cmp	r3, #112	; 0x70
 8002666:	d804      	bhi.n	8002672 <HAL_TIM_ConfigClockSource+0x7e>
 8002668:	2b50      	cmp	r3, #80	; 0x50
 800266a:	d033      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0xe0>
 800266c:	2b60      	cmp	r3, #96	; 0x60
 800266e:	d041      	beq.n	80026f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002670:	e06a      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	d066      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x152>
 8002678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267c:	d017      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800267e:	e063      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6899      	ldr	r1, [r3, #8]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f000 f941 	bl	8002916 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	609a      	str	r2, [r3, #8]
      break;
 80026ac:	e04c      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f000 f92a 	bl	8002916 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026d0:	609a      	str	r2, [r3, #8]
      break;
 80026d2:	e039      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	461a      	mov	r2, r3
 80026e2:	f000 f8a1 	bl	8002828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2150      	movs	r1, #80	; 0x50
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f8f8 	bl	80028e2 <TIM_ITRx_SetConfig>
      break;
 80026f2:	e029      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	461a      	mov	r2, r3
 8002702:	f000 f8bf 	bl	8002884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2160      	movs	r1, #96	; 0x60
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f8e8 	bl	80028e2 <TIM_ITRx_SetConfig>
      break;
 8002712:	e019      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	461a      	mov	r2, r3
 8002722:	f000 f881 	bl	8002828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2140      	movs	r1, #64	; 0x40
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f8d8 	bl	80028e2 <TIM_ITRx_SetConfig>
      break;
 8002732:	e009      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f000 f8cf 	bl	80028e2 <TIM_ITRx_SetConfig>
      break;
 8002744:	e000      	b.n	8002748 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a29      	ldr	r2, [pc, #164]	; (800281c <TIM_Base_SetConfig+0xb8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00b      	beq.n	8002794 <TIM_Base_SetConfig+0x30>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d007      	beq.n	8002794 <TIM_Base_SetConfig+0x30>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a26      	ldr	r2, [pc, #152]	; (8002820 <TIM_Base_SetConfig+0xbc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d003      	beq.n	8002794 <TIM_Base_SetConfig+0x30>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <TIM_Base_SetConfig+0xc0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d108      	bne.n	80027a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <TIM_Base_SetConfig+0xb8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00b      	beq.n	80027c6 <TIM_Base_SetConfig+0x62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b4:	d007      	beq.n	80027c6 <TIM_Base_SetConfig+0x62>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <TIM_Base_SetConfig+0xbc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_Base_SetConfig+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <TIM_Base_SetConfig+0xc0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d108      	bne.n	80027d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <TIM_Base_SetConfig+0xb8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	615a      	str	r2, [r3, #20]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40000400 	.word	0x40000400
 8002824:	40000800 	.word	0x40000800

08002828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	f023 0201 	bic.w	r2, r3, #1
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 030a 	bic.w	r3, r3, #10
 8002864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	621a      	str	r2, [r3, #32]
}
 800287a:	bf00      	nop
 800287c:	371c      	adds	r7, #28
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f023 0210 	bic.w	r2, r3, #16
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	031b      	lsls	r3, r3, #12
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	621a      	str	r2, [r3, #32]
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	f043 0307 	orr.w	r3, r3, #7
 8002904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	609a      	str	r2, [r3, #8]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002930:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	431a      	orrs	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4313      	orrs	r3, r2
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	609a      	str	r2, [r3, #8]
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002968:	2302      	movs	r3, #2
 800296a:	e032      	b.n	80029d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <__libc_init_array>:
 80029dc:	b570      	push	{r4, r5, r6, lr}
 80029de:	2500      	movs	r5, #0
 80029e0:	4e0c      	ldr	r6, [pc, #48]	; (8002a14 <__libc_init_array+0x38>)
 80029e2:	4c0d      	ldr	r4, [pc, #52]	; (8002a18 <__libc_init_array+0x3c>)
 80029e4:	1ba4      	subs	r4, r4, r6
 80029e6:	10a4      	asrs	r4, r4, #2
 80029e8:	42a5      	cmp	r5, r4
 80029ea:	d109      	bne.n	8002a00 <__libc_init_array+0x24>
 80029ec:	f000 f822 	bl	8002a34 <_init>
 80029f0:	2500      	movs	r5, #0
 80029f2:	4e0a      	ldr	r6, [pc, #40]	; (8002a1c <__libc_init_array+0x40>)
 80029f4:	4c0a      	ldr	r4, [pc, #40]	; (8002a20 <__libc_init_array+0x44>)
 80029f6:	1ba4      	subs	r4, r4, r6
 80029f8:	10a4      	asrs	r4, r4, #2
 80029fa:	42a5      	cmp	r5, r4
 80029fc:	d105      	bne.n	8002a0a <__libc_init_array+0x2e>
 80029fe:	bd70      	pop	{r4, r5, r6, pc}
 8002a00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a04:	4798      	blx	r3
 8002a06:	3501      	adds	r5, #1
 8002a08:	e7ee      	b.n	80029e8 <__libc_init_array+0xc>
 8002a0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a0e:	4798      	blx	r3
 8002a10:	3501      	adds	r5, #1
 8002a12:	e7f2      	b.n	80029fa <__libc_init_array+0x1e>
 8002a14:	08002aa0 	.word	0x08002aa0
 8002a18:	08002aa0 	.word	0x08002aa0
 8002a1c:	08002aa0 	.word	0x08002aa0
 8002a20:	08002aa4 	.word	0x08002aa4

08002a24 <memset>:
 8002a24:	4603      	mov	r3, r0
 8002a26:	4402      	add	r2, r0
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <memset+0xa>
 8002a2c:	4770      	bx	lr
 8002a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a32:	e7f9      	b.n	8002a28 <memset+0x4>

08002a34 <_init>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	bf00      	nop
 8002a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a3a:	bc08      	pop	{r3}
 8002a3c:	469e      	mov	lr, r3
 8002a3e:	4770      	bx	lr

08002a40 <_fini>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	bf00      	nop
 8002a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a46:	bc08      	pop	{r3}
 8002a48:	469e      	mov	lr, r3
 8002a4a:	4770      	bx	lr
