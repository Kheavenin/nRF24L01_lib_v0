
nRF24L01_lib_v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000336c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800349c  0800349c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800349c  0800349c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800349c  0800349c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080034a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000018  080034bc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080034bc  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4f1  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d65  00000000  00000000  0002c532  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc0  00000000  00000000  0002e298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  0002f058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000140a2  00000000  00000000  0002fd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009740  00000000  00000000  00043db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006e19e  00000000  00000000  0004d4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb690  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000bb70c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003460 	.word	0x08003460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003460 	.word	0x08003460

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b4c      	ldr	r3, [pc, #304]	; (8000294 <MX_GPIO_Init+0x148>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a4b      	ldr	r2, [pc, #300]	; (8000294 <MX_GPIO_Init+0x148>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b49      	ldr	r3, [pc, #292]	; (8000294 <MX_GPIO_Init+0x148>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b46      	ldr	r3, [pc, #280]	; (8000294 <MX_GPIO_Init+0x148>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a45      	ldr	r2, [pc, #276]	; (8000294 <MX_GPIO_Init+0x148>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b43      	ldr	r3, [pc, #268]	; (8000294 <MX_GPIO_Init+0x148>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b40      	ldr	r3, [pc, #256]	; (8000294 <MX_GPIO_Init+0x148>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a3f      	ldr	r2, [pc, #252]	; (8000294 <MX_GPIO_Init+0x148>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b3d      	ldr	r3, [pc, #244]	; (8000294 <MX_GPIO_Init+0x148>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b3a      	ldr	r3, [pc, #232]	; (8000294 <MX_GPIO_Init+0x148>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a39      	ldr	r2, [pc, #228]	; (8000294 <MX_GPIO_Init+0x148>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b37      	ldr	r3, [pc, #220]	; (8000294 <MX_GPIO_Init+0x148>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2180      	movs	r1, #128	; 0x80
 80001c4:	4834      	ldr	r0, [pc, #208]	; (8000298 <MX_GPIO_Init+0x14c>)
 80001c6:	f001 fd9f 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2140      	movs	r1, #64	; 0x40
 80001ce:	4833      	ldr	r0, [pc, #204]	; (800029c <MX_GPIO_Init+0x150>)
 80001d0:	f001 fd9a 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001da:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <MX_GPIO_Init+0x154>)
 80001dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001de:	2300      	movs	r3, #0
 80001e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001e2:	f107 0310 	add.w	r3, r7, #16
 80001e6:	4619      	mov	r1, r3
 80001e8:	482b      	ldr	r0, [pc, #172]	; (8000298 <MX_GPIO_Init+0x14c>)
 80001ea:	f001 fc33 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80001ee:	f641 737f 	movw	r3, #8063	; 0x1f7f
 80001f2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001f4:	2303      	movs	r3, #3
 80001f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	4826      	ldr	r0, [pc, #152]	; (8000298 <MX_GPIO_Init+0x14c>)
 8000200:	f001 fc28 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA8 PA9 PA10 
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000204:	f649 731f 	movw	r3, #40735	; 0x9f1f
 8000208:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800020a:	2303      	movs	r3, #3
 800020c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	4619      	mov	r1, r3
 8000214:	4823      	ldr	r0, [pc, #140]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000216:	f001 fc1d 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB4 PB5 PB7 
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800021a:	f64f 73b7 	movw	r3, #65463	; 0xffb7
 800021e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000220:	2303      	movs	r3, #3
 8000222:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000224:	f107 0310 	add.w	r3, r7, #16
 8000228:	4619      	mov	r1, r3
 800022a:	481c      	ldr	r0, [pc, #112]	; (800029c <MX_GPIO_Init+0x150>)
 800022c:	f001 fc12 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000230:	2380      	movs	r3, #128	; 0x80
 8000232:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000234:	2301      	movs	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000238:	2300      	movs	r3, #0
 800023a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023c:	2302      	movs	r3, #2
 800023e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000240:	f107 0310 	add.w	r3, r7, #16
 8000244:	4619      	mov	r1, r3
 8000246:	4814      	ldr	r0, [pc, #80]	; (8000298 <MX_GPIO_Init+0x14c>)
 8000248:	f001 fc04 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800024c:	2304      	movs	r3, #4
 800024e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000250:	2303      	movs	r3, #3
 8000252:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000254:	f107 0310 	add.w	r3, r7, #16
 8000258:	4619      	mov	r1, r3
 800025a:	4813      	ldr	r0, [pc, #76]	; (80002a8 <MX_GPIO_Init+0x15c>)
 800025c:	f001 fbfa 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000260:	2340      	movs	r3, #64	; 0x40
 8000262:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000264:	2301      	movs	r3, #1
 8000266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000268:	2300      	movs	r3, #0
 800026a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	2302      	movs	r3, #2
 800026e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000270:	f107 0310 	add.w	r3, r7, #16
 8000274:	4619      	mov	r1, r3
 8000276:	4809      	ldr	r0, [pc, #36]	; (800029c <MX_GPIO_Init+0x150>)
 8000278:	f001 fbec 	bl	8001a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	2100      	movs	r1, #0
 8000280:	2028      	movs	r0, #40	; 0x28
 8000282:	f001 fbb0 	bl	80019e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000286:	2028      	movs	r0, #40	; 0x28
 8000288:	f001 fbc9 	bl	8001a1e <HAL_NVIC_EnableIRQ>

}
 800028c:	bf00      	nop
 800028e:	3720      	adds	r7, #32
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	40011000 	.word	0x40011000
 800029c:	40010c00 	.word	0x40010c00
 80002a0:	10110000 	.word	0x10110000
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40011400 	.word	0x40011400

080002ac <statusStrcut_Init>:
static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
		TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
		uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
		uint16_t HAL_GPIO_Pin_CE);

static void statusStrcut_Init(nrfStruct_t *nrfStruct) {
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	nrfStruct->statusStruct.dataReadIrq = 0;
 80002b4:	687a      	ldr	r2, [r7, #4]
 80002b6:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002ba:	f36f 0300 	bfc	r3, #0, #1
 80002be:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.dataSendIrq = 0;
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002c8:	f36f 0341 	bfc	r3, #1, #1
 80002cc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.maxRetr = 0;
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002d6:	f36f 0382 	bfc	r3, #2, #1
 80002da:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.pipeNumber = RX_FIFO_EMPTY;
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002e4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80002e8:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	nrfStruct->statusStruct.txFull = 0;
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80002f2:	f36f 1386 	bfc	r3, #6, #1
 80002f6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25

	nrfStruct->statusStruct.packetsLost = 0;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2200      	movs	r2, #0
 80002fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	nrfStruct->statusStruct.packetsRetr = 0;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2200      	movs	r2, #0
 8000306:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <settingStruct_Init>:

static void settingStruct_Init(nrfStruct_t *nrfStruct) {
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	/* Init settigns struct */
	nrfStruct->setStruct.rxMode = 0;			//set as receiver
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	7813      	ldrb	r3, [r2, #0]
 8000320:	f36f 0300 	bfc	r3, #0, #1
 8000324:	7013      	strb	r3, [r2, #0]
	nrfStruct->setStruct.channel = 0x02; 				//set channel np. 0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	2202      	movs	r2, #2
 800032a:	705a      	strb	r2, [r3, #1]
	nrfStruct->setStruct.dataRate = RF_DataRate_2M;  //lowest data rate
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2201      	movs	r2, #1
 8000330:	709a      	strb	r2, [r3, #2]
	nrfStruct->setStruct.powerRF = RF_PWR_0dBm;		//-12dBm power
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2203      	movs	r2, #3
 8000336:	70da      	strb	r2, [r3, #3]

	nrfStruct->setStruct.ard = 0;		//auto retr. delay 250us
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	2200      	movs	r2, #0
 800033c:	711a      	strb	r2, [r3, #4]
	nrfStruct->setStruct.arc = 3;		//auto retr. counter
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2203      	movs	r2, #3
 8000342:	715a      	strb	r2, [r3, #5]

	nrfStruct->setStruct.enableCRC = 1;
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	7bd3      	ldrb	r3, [r2, #15]
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.codingCRC = 0;
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	7bd3      	ldrb	r3, [r2, #15]
 8000352:	f36f 0341 	bfc	r3, #1, #1
 8000356:	73d3      	strb	r3, [r2, #15]

	nrfStruct->setStruct.enableTxIrq = 0;
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	7bd3      	ldrb	r3, [r2, #15]
 800035c:	f36f 0382 	bfc	r3, #2, #1
 8000360:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableRxIrq = 0;
 8000362:	687a      	ldr	r2, [r7, #4]
 8000364:	7bd3      	ldrb	r3, [r2, #15]
 8000366:	f36f 03c3 	bfc	r3, #3, #1
 800036a:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableMaxRtIrq = 0;
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	7bd3      	ldrb	r3, [r2, #15]
 8000370:	f36f 1304 	bfc	r3, #4, #1
 8000374:	73d3      	strb	r3, [r2, #15]

	/* Pipe Enable - defult pipe 0 enable only */
	nrfStruct->setStruct.pipeEn = DF_RXADDR;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2203      	movs	r2, #3
 800037a:	719a      	strb	r2, [r3, #6]
	nrfStruct->setStruct.pipeACK = DF_EN_AA;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	223f      	movs	r2, #63	; 0x3f
 8000380:	71da      	strb	r2, [r3, #7]
	nrfStruct->setStruct.pipeDPL = DF_DYNPD;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2200      	movs	r2, #0
 8000386:	721a      	strb	r2, [r3, #8]

	/* Pipe RX Payload Lenght  */
	uint8_t i;
	for (i = 0; i < 6; i++) {
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e007      	b.n	800039e <settingStruct_Init+0x8a>
		nrfStruct->setStruct.pipePayLen[i] = DF_RX_PW_P0;
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	4413      	add	r3, r2
 8000394:	2200      	movs	r2, #0
 8000396:	725a      	strb	r2, [r3, #9]
	for (i = 0; i < 6; i++) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b05      	cmp	r3, #5
 80003a2:	d9f4      	bls.n	800038e <settingStruct_Init+0x7a>
	}

	nrfStruct->setStruct.enableDPL = 0;
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	7bd3      	ldrb	r3, [r2, #15]
 80003a8:	f36f 1345 	bfc	r3, #5, #1
 80003ac:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableAckPay = 0;
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	7bd3      	ldrb	r3, [r2, #15]
 80003b2:	f36f 1386 	bfc	r3, #6, #1
 80003b6:	73d3      	strb	r3, [r2, #15]
	nrfStruct->setStruct.enableDynACK = 0;	//enable NO_ACK command
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	7bd3      	ldrb	r3, [r2, #15]
 80003bc:	f36f 13c7 	bfc	r3, #7, #1
 80003c0:	73d3      	strb	r3, [r2, #15]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <addressStruct_Init>:

static void addressStruct_Init(nrfStruct_t *nrfStruct) {
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	/* Init address struct */
	nrfStruct->addrStruct.addrWidth = longWidth;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2203      	movs	r2, #3
 80003d8:	741a      	strb	r2, [r3, #16]
	uint8_t i;
	for (i = 0; i < 5; i++) {
 80003da:	2300      	movs	r3, #0
 80003dc:	73fb      	strb	r3, [r7, #15]
 80003de:	e007      	b.n	80003f0 <addressStruct_Init+0x24>
		nrfStruct->addrStruct.txAddr[i] = DF_TX_ADDR_0;
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	4413      	add	r3, r2
 80003e6:	22e7      	movs	r2, #231	; 0xe7
 80003e8:	745a      	strb	r2, [r3, #17]
	for (i = 0; i < 5; i++) {
 80003ea:	7bfb      	ldrb	r3, [r7, #15]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73fb      	strb	r3, [r7, #15]
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d9f4      	bls.n	80003e0 <addressStruct_Init+0x14>
	}
	for (i = 0; i < 5; ++i) {
 80003f6:	2300      	movs	r3, #0
 80003f8:	73fb      	strb	r3, [r7, #15]
 80003fa:	e007      	b.n	800040c <addressStruct_Init+0x40>
		nrfStruct->addrStruct.rxAddr0[i] = DF_RX_ADDR_P0_0;
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	22e7      	movs	r2, #231	; 0xe7
 8000404:	759a      	strb	r2, [r3, #22]
	for (i = 0; i < 5; ++i) {
 8000406:	7bfb      	ldrb	r3, [r7, #15]
 8000408:	3301      	adds	r3, #1
 800040a:	73fb      	strb	r3, [r7, #15]
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d9f4      	bls.n	80003fc <addressStruct_Init+0x30>
	}
	for (i = 0; i < 5; ++i) {
 8000412:	2300      	movs	r3, #0
 8000414:	73fb      	strb	r3, [r7, #15]
 8000416:	e007      	b.n	8000428 <addressStruct_Init+0x5c>
		nrfStruct->addrStruct.rxAddr1[i] = DF_RX_ADDR_P1_0;
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	22c2      	movs	r2, #194	; 0xc2
 8000420:	76da      	strb	r2, [r3, #27]
	for (i = 0; i < 5; ++i) {
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	3301      	adds	r3, #1
 8000426:	73fb      	strb	r3, [r7, #15]
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	2b04      	cmp	r3, #4
 800042c:	d9f4      	bls.n	8000418 <addressStruct_Init+0x4c>
	}
	nrfStruct->addrStruct.rxAddr2 = DF_RX_ADDR_P2;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	22c3      	movs	r2, #195	; 0xc3
 8000432:	f883 2020 	strb.w	r2, [r3, #32]
	nrfStruct->addrStruct.rxAddr3 = DF_RX_ADDR_P3;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	22c4      	movs	r2, #196	; 0xc4
 800043a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	nrfStruct->addrStruct.rxAddr4 = DF_RX_ADDR_P4;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	22c5      	movs	r2, #197	; 0xc5
 8000442:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	nrfStruct->addrStruct.rxAddr5 = DF_RX_ADDR_P5;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	22c6      	movs	r2, #198	; 0xc6
 800044a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <fifoStruct_Init>:

static void fifoStruct_Init(nrfStruct_t *nrfStruct) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	/* Init fifo struct */
	nrfStruct->fifoStruct.txReUse = 0;
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000466:	f36f 0300 	bfc	r3, #0, #1
 800046a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

	nrfStruct->fifoStruct.rxRead = 0;
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000474:	f36f 0341 	bfc	r3, #1, #1
 8000478:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.rxFull = 0;
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000482:	f36f 0382 	bfc	r3, #2, #1
 8000486:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.rxEmpty = 1;
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000490:	f043 0308 	orr.w	r3, r3, #8
 8000494:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

	nrfStruct->fifoStruct.txSend = 0;
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800049e:	f36f 1304 	bfc	r3, #4, #1
 80004a2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.txFull = 0;
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80004ac:	f36f 1345 	bfc	r3, #5, #1
 80004b0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	nrfStruct->fifoStruct.txEmpty = 1;
 80004b4:	687a      	ldr	r2, [r7, #4]
 80004b6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80004ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004be:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <hardware_Init>:

static void hardware_Init(nrfStruct_t *nrfStruct, SPI_HandleTypeDef *HAL_SPIx,
		TIM_HandleTypeDef *HAL_TIMx, GPIO_TypeDef *HAL_GPIO_CSN,
		uint16_t HAL_GPIO_Pin_CSN, GPIO_TypeDef *HAL_GPIO_CE,
		uint16_t HAL_GPIO_Pin_CE) {
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
 80004d8:	603b      	str	r3, [r7, #0]
	/* Put pointer of SPI and TIM structures to nRF alias */
	nrfStruct->nRFspi = HAL_SPIx;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	629a      	str	r2, [r3, #40]	; 0x28
	nrfStruct->nRFtim = HAL_TIMx;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Put GPIO port pointer and pin number to structure's alias */
	nrfStruct->nRFportCSN = HAL_GPIO_CSN;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	631a      	str	r2, [r3, #48]	; 0x30
	nrfStruct->nRFpinCSN = HAL_GPIO_Pin_CSN;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	8b3a      	ldrh	r2, [r7, #24]
 80004f0:	869a      	strh	r2, [r3, #52]	; 0x34
	nrfStruct->nRFportCE = HAL_GPIO_CE;
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	69fa      	ldr	r2, [r7, #28]
 80004f6:	639a      	str	r2, [r3, #56]	; 0x38
	nrfStruct->nRFpinCE = HAL_GPIO_Pin_CE;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	8c3a      	ldrh	r2, [r7, #32]
 80004fc:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr

08000508 <delayUs>:

/* Micro sencods delay - necessary to SPI transmittion  */
void delayUs(nrfStruct_t *nrfStruct, uint16_t time) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	807b      	strh	r3, [r7, #2]

	__HAL_TIM_SET_COUNTER((nrfStruct->nRFtim), 0);	//Set star value as 0
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2200      	movs	r2, #0
 800051c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(nrfStruct->nRFtim) < time)
 800051e:	bf00      	nop
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000528:	887b      	ldrh	r3, [r7, #2]
 800052a:	429a      	cmp	r2, r3
 800052c:	d3f8      	bcc.n	8000520 <delayUs+0x18>
		;
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <csnLow>:

/* CE snd CSN control funtions's */
void csnLow(nrfStruct_t *nrfStruct) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	f001 fbdc 	bl	8001d08 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <csnHigh>:
void csnHigh(nrfStruct_t *nrfStruct) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCSN), (nrfStruct->nRFpinCSN),
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000568:	2201      	movs	r2, #1
 800056a:	4619      	mov	r1, r3
 800056c:	f001 fbcc 	bl	8001d08 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <ceHigh>:
void ceLow(nrfStruct_t *nrfStruct) {
	HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
			GPIO_PIN_RESET);
}
void ceHigh(nrfStruct_t *nrfStruct) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin((nrfStruct->nRFportCE), (nrfStruct->nRFpinCE),
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000588:	2201      	movs	r2, #1
 800058a:	4619      	mov	r1, r3
 800058c:	f001 fbbc 	bl	8001d08 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <readReg>:

/* Elementary functions base on nRf24L01+ SPI commands */
/* Read and write registers funtions's */
uint8_t readReg(nrfStruct_t *nrfStruct, uint8_t addr) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_REGISTER | addr;
 80005a4:	78fb      	ldrb	r3, [r7, #3]
 80005a6:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;
	uint8_t *pCmd = &cmd;
 80005a8:	f107 030f 	add.w	r3, r7, #15
 80005ac:	617b      	str	r3, [r7, #20]
	uint8_t *pReg = &reg;
 80005ae:	f107 030e 	add.w	r3, r7, #14
 80005b2:	613b      	str	r3, [r7, #16]

	csnLow(nrfStruct);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ffbf 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005be:	230a      	movs	r3, #10
 80005c0:	2201      	movs	r2, #1
 80005c2:	6979      	ldr	r1, [r7, #20]
 80005c4:	f002 f825 	bl	8002612 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 80005c8:	2132      	movs	r1, #50	; 0x32
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f7ff ff9c 	bl	8000508 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), pReg, sizeof(reg), SPI_TIMEOUT);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80005d4:	230a      	movs	r3, #10
 80005d6:	2201      	movs	r2, #1
 80005d8:	6939      	ldr	r1, [r7, #16]
 80005da:	f002 f94e 	bl	800287a <HAL_SPI_Receive>

	csnHigh(nrfStruct);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f7ff ffba 	bl	8000558 <csnHigh>
	return reg;
 80005e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80005e6:	4618      	mov	r0, r3
 80005e8:	3718      	adds	r7, #24
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <writeReg>:

void writeReg(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t val) {
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b084      	sub	sp, #16
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	4613      	mov	r3, r2
 80005fc:	70bb      	strb	r3, [r7, #2]
	uint8_t cmd = W_REGISTER | addr;
 80005fe:	78fb      	ldrb	r3, [r7, #3]
 8000600:	f043 0320 	orr.w	r3, r3, #32
 8000604:	b2db      	uxtb	r3, r3
 8000606:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000608:	f107 030b 	add.w	r3, r7, #11
 800060c:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ff92 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000618:	230a      	movs	r3, #10
 800061a:	2201      	movs	r2, #1
 800061c:	68f9      	ldr	r1, [r7, #12]
 800061e:	f001 fff8 	bl	8002612 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000622:	2132      	movs	r1, #50	; 0x32
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ff6f 	bl	8000508 <delayUs>
	HAL_SPI_Transmit((nrfStruct->nRFspi), &val, sizeof(val), SPI_TIMEOUT);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800062e:	1cb9      	adds	r1, r7, #2
 8000630:	230a      	movs	r3, #10
 8000632:	2201      	movs	r2, #1
 8000634:	f001 ffed 	bl	8002612 <HAL_SPI_Transmit>

	csnHigh(nrfStruct);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ff8d 	bl	8000558 <csnHigh>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <readRegExt>:

/* Extended read and write functions - R/W few registers */
void readRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
		size_t bufSize) {
 8000646:	b580      	push	{r7, lr}
 8000648:	b086      	sub	sp, #24
 800064a:	af00      	add	r7, sp, #0
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = R_REGISTER | addr;
 8000656:	7afb      	ldrb	r3, [r7, #11]
 8000658:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 800065a:	f107 0313 	add.w	r3, r7, #19
 800065e:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 8000660:	68f8      	ldr	r0, [r7, #12]
 8000662:	f7ff ff69 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800066a:	230a      	movs	r3, #10
 800066c:	2201      	movs	r2, #1
 800066e:	6979      	ldr	r1, [r7, #20]
 8000670:	f001 ffcf 	bl	8002612 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 8000674:	2132      	movs	r1, #50	; 0x32
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f7ff ff46 	bl	8000508 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b29a      	uxth	r2, r3
 8000684:	230a      	movs	r3, #10
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f002 f8f7 	bl	800287a <HAL_SPI_Receive>
			SPI_TIMEOUT);

	csnHigh(nrfStruct);
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f7ff ff63 	bl	8000558 <csnHigh>
}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <writeRegExt>:

void writeRegExt(nrfStruct_t *nrfStruct, uint8_t addr, uint8_t *buf,
		size_t bufSize) {
 800069a:	b580      	push	{r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	607a      	str	r2, [r7, #4]
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	460b      	mov	r3, r1
 80006a8:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = W_REGISTER | addr;
 80006aa:	7afb      	ldrb	r3, [r7, #11]
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	74fb      	strb	r3, [r7, #19]
	uint8_t *pCmd = &cmd;
 80006b4:	f107 0313 	add.w	r3, r7, #19
 80006b8:	617b      	str	r3, [r7, #20]

	csnLow(nrfStruct);
 80006ba:	68f8      	ldr	r0, [r7, #12]
 80006bc:	f7ff ff3c 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80006c4:	230a      	movs	r3, #10
 80006c6:	2201      	movs	r2, #1
 80006c8:	6979      	ldr	r1, [r7, #20]
 80006ca:	f001 ffa2 	bl	8002612 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 50);
 80006ce:	2132      	movs	r1, #50	; 0x32
 80006d0:	68f8      	ldr	r0, [r7, #12]
 80006d2:	f7ff ff19 	bl	8000508 <delayUs>
	HAL_SPI_Receive((nrfStruct->nRFspi), buf, bufSize,
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b29a      	uxth	r2, r3
 80006de:	230a      	movs	r3, #10
 80006e0:	6879      	ldr	r1, [r7, #4]
 80006e2:	f002 f8ca 	bl	800287a <HAL_SPI_Receive>
	SPI_TIMEOUT);

	csnHigh(nrfStruct);
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f7ff ff36 	bl	8000558 <csnHigh>
}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <flushTx>:

	csnHigh(nrfStruct);
	return OK_CODE;
}
/* Flush functions */
uint8_t flushTx(nrfStruct_t *nrfStruct) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FLUSH_TX;	//set command mask
 80006fc:	23e1      	movs	r3, #225	; 0xe1
 80006fe:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000700:	f107 030b 	add.w	r3, r7, #11
 8000704:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ff16 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000710:	230a      	movs	r3, #10
 8000712:	2201      	movs	r2, #1
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	f001 ff7c 	bl	8002612 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 10);
 800071a:	210a      	movs	r1, #10
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fef3 	bl	8000508 <delayUs>
	if (!readBit(nrfStruct, FIFO_STATUS, bit4)) {	//check FIFO status
 8000722:	2204      	movs	r2, #4
 8000724:	2117      	movs	r1, #23
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f870 	bl	800080c <readBit>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d10b      	bne.n	800074a <flushTx+0x56>
		csnHigh(nrfStruct);
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ff10 	bl	8000558 <csnHigh>
		nrfStruct->fifoStruct.txEmpty = 0;
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800073e:	f36f 1386 	bfc	r3, #6, #1
 8000742:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return ERR_CODE;
 8000746:	23ff      	movs	r3, #255	; 0xff
 8000748:	e00a      	b.n	8000760 <flushTx+0x6c>
	}
	csnHigh(nrfStruct);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff04 	bl	8000558 <csnHigh>
	nrfStruct->fifoStruct.txEmpty = 1;
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8000756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return OK_CODE;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <flushRx>:
uint8_t flushRx(nrfStruct_t *nrfStruct) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = FLUSH_RX;	//set command mask
 8000770:	23e0      	movs	r3, #224	; 0xe0
 8000772:	72fb      	strb	r3, [r7, #11]
	uint8_t *pCmd = &cmd;
 8000774:	f107 030b 	add.w	r3, r7, #11
 8000778:	60fb      	str	r3, [r7, #12]

	csnLow(nrfStruct);
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff fedc 	bl	8000538 <csnLow>

	HAL_SPI_Transmit((nrfStruct->nRFspi), pCmd, sizeof(cmd), SPI_TIMEOUT);//send command
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000784:	230a      	movs	r3, #10
 8000786:	2201      	movs	r2, #1
 8000788:	68f9      	ldr	r1, [r7, #12]
 800078a:	f001 ff42 	bl	8002612 <HAL_SPI_Transmit>
	delayUs(nrfStruct, 10);
 800078e:	210a      	movs	r1, #10
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff feb9 	bl	8000508 <delayUs>
	if (!readBit(nrfStruct, FIFO_STATUS, bit0)) {	//check FIFO status
 8000796:	2200      	movs	r2, #0
 8000798:	2117      	movs	r1, #23
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f836 	bl	800080c <readBit>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10b      	bne.n	80007be <flushRx+0x56>
		csnHigh(nrfStruct);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fed6 	bl	8000558 <csnHigh>
		nrfStruct->fifoStruct.rxEmpty = 0;
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80007b2:	f36f 03c3 	bfc	r3, #3, #1
 80007b6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return ERR_CODE;
 80007ba:	23ff      	movs	r3, #255	; 0xff
 80007bc:	e00a      	b.n	80007d4 <flushRx+0x6c>
	}
	csnHigh(nrfStruct);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff feca 	bl	8000558 <csnHigh>
	nrfStruct->fifoStruct.rxEmpty = 1;
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80007ca:	f043 0308 	orr.w	r3, r3, #8
 80007ce:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return OK_CODE;
 80007d2:	2301      	movs	r3, #1
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <pwrUp>:

}


/* Power control */
void pwrUp(nrfStruct_t *nrfStruct) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	uint8_t tmp = readReg(nrfStruct, CONFIG);
 80007e4:	2100      	movs	r1, #0
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fed6 	bl	8000598 <readReg>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73fb      	strb	r3, [r7, #15]
	tmp |= (1 << 1);
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, CONFIG, tmp);
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	461a      	mov	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fef5 	bl	80005ee <writeReg>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <readBit>:
	uint8_t tmp = readReg(nrfStruct, CONFIG);
	tmp &= (0 << 1);		//zmieniono OR na AND
	writeReg(nrfStruct, CONFIG, tmp);
}

uint8_t readBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]
	uint8_t reg = readReg(nrfStruct, addr);
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff feb9 	bl	8000598 <readReg>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]
	return ((reg >> bit) & 0x01);
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	78bb      	ldrb	r3, [r7, #2]
 800082e:	fa42 f303 	asr.w	r3, r2, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <resetBit>:

void resetBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	460b      	mov	r3, r1
 800084c:	70fb      	strb	r3, [r7, #3]
 800084e:	4613      	mov	r3, r2
 8000850:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = readReg(nrfStruct, addr);
 8000852:	78fb      	ldrb	r3, [r7, #3]
 8000854:	4619      	mov	r1, r3
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff fe9e 	bl	8000598 <readReg>
 800085c:	4603      	mov	r3, r0
 800085e:	73fb      	strb	r3, [r7, #15]
	tmp &= 0 << bit;		//zmieniono OR na AND
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, addr, tmp);
 8000864:	7bfa      	ldrb	r2, [r7, #15]
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	4619      	mov	r1, r3
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff febf 	bl	80005ee <writeReg>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <setBit>:

void setBit(nrfStruct_t *nrfStruct, uint8_t addr, bitNum_t bit) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
 8000884:	4613      	mov	r3, r2
 8000886:	70bb      	strb	r3, [r7, #2]
	uint8_t tmp = readReg(nrfStruct, addr);
 8000888:	78fb      	ldrb	r3, [r7, #3]
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff fe83 	bl	8000598 <readReg>
 8000892:	4603      	mov	r3, r0
 8000894:	73fb      	strb	r3, [r7, #15]
	tmp |= 1 << bit;
 8000896:	78bb      	ldrb	r3, [r7, #2]
 8000898:	2201      	movs	r2, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	b25a      	sxtb	r2, r3
 80008a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, addr, tmp);
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	4619      	mov	r1, r3
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fe9c 	bl	80005ee <writeReg>
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <nRF_Init>:


/* Main init function */
nrfStruct_t* nRF_Init(SPI_HandleTypeDef *HAL_SPIx, TIM_HandleTypeDef *HAL_TIMx,
		GPIO_TypeDef *HAL_GPIO_CSN, uint16_t HAL_GPIO_Pin_CSN,
		GPIO_TypeDef *HAL_GPIO_CE, uint16_t HAL_GPIO_Pin_CE) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af04      	add	r7, sp, #16
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	807b      	strh	r3, [r7, #2]
	/* Create main nRF structure	 */
	static nrfStruct_t nRFMainStruct;
	static nrfStruct_t *pnRFMainStruct = &nRFMainStruct;

	/* Init settigns struct */
	statusStrcut_Init(pnRFMainStruct);
 80008ce:	4b6a      	ldr	r3, [pc, #424]	; (8000a78 <nRF_Init+0x1b8>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fcea 	bl	80002ac <statusStrcut_Init>
	settingStruct_Init(pnRFMainStruct);
 80008d8:	4b67      	ldr	r3, [pc, #412]	; (8000a78 <nRF_Init+0x1b8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fd19 	bl	8000314 <settingStruct_Init>
	addressStruct_Init(pnRFMainStruct);
 80008e2:	4b65      	ldr	r3, [pc, #404]	; (8000a78 <nRF_Init+0x1b8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fd70 	bl	80003cc <addressStruct_Init>
	fifoStruct_Init(pnRFMainStruct);
 80008ec:	4b62      	ldr	r3, [pc, #392]	; (8000a78 <nRF_Init+0x1b8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fdb1 	bl	8000458 <fifoStruct_Init>
	hardware_Init(pnRFMainStruct, HAL_SPIx, HAL_TIMx, HAL_GPIO_CSN,
 80008f6:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <nRF_Init+0x1b8>)
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80008fc:	9302      	str	r3, [sp, #8]
 80008fe:	6a3b      	ldr	r3, [r7, #32]
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	887b      	ldrh	r3, [r7, #2]
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	68f9      	ldr	r1, [r7, #12]
 800090c:	f7ff fdde 	bl	80004cc <hardware_Init>
			HAL_GPIO_Pin_CSN, HAL_GPIO_CE, HAL_GPIO_Pin_CE);

//	pwrDown(pnRFMainStruct);
	/* Turn on modul */
	pwrUp(pnRFMainStruct);
 8000910:	4b59      	ldr	r3, [pc, #356]	; (8000a78 <nRF_Init+0x1b8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff61 	bl	80007dc <pwrUp>

	/* Set default settings */
	setBit(pnRFMainStruct, CONFIG, PRIM_RX);
 800091a:	4b57      	ldr	r3, [pc, #348]	; (8000a78 <nRF_Init+0x1b8>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff ffa8 	bl	8000878 <setBit>
	writeReg(pnRFMainStruct, EN_AA, (pnRFMainStruct->setStruct.pipeACK));
 8000928:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <nRF_Init+0x1b8>)
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	4b52      	ldr	r3, [pc, #328]	; (8000a78 <nRF_Init+0x1b8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	79db      	ldrb	r3, [r3, #7]
 8000932:	461a      	mov	r2, r3
 8000934:	2101      	movs	r1, #1
 8000936:	f7ff fe5a 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, EN_RXADDR, (pnRFMainStruct->setStruct.pipeEn));
 800093a:	4b4f      	ldr	r3, [pc, #316]	; (8000a78 <nRF_Init+0x1b8>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <nRF_Init+0x1b8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	799b      	ldrb	r3, [r3, #6]
 8000944:	461a      	mov	r2, r3
 8000946:	2102      	movs	r1, #2
 8000948:	f7ff fe51 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, SETUP_AW, DF_SETUP_AW);
 800094c:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <nRF_Init+0x1b8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2203      	movs	r2, #3
 8000952:	2103      	movs	r1, #3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe4a 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, SETUP_RETR, DF_SETUP_RETR);
 800095a:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <nRF_Init+0x1b8>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2203      	movs	r2, #3
 8000960:	2104      	movs	r1, #4
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fe43 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RF_CH, DF_RF_CH);
 8000968:	4b43      	ldr	r3, [pc, #268]	; (8000a78 <nRF_Init+0x1b8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2202      	movs	r2, #2
 800096e:	2105      	movs	r1, #5
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe3c 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RF_SETUP, DF_RF_SETUP);
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <nRF_Init+0x1b8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	220e      	movs	r2, #14
 800097c:	2106      	movs	r1, #6
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe35 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, STATUS, DF_STATUS);
 8000984:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <nRF_Init+0x1b8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	220e      	movs	r2, #14
 800098a:	2107      	movs	r1, #7
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe2e 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, DYNPD, (pnRFMainStruct->setStruct.pipeDPL));
 8000992:	4b39      	ldr	r3, [pc, #228]	; (8000a78 <nRF_Init+0x1b8>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <nRF_Init+0x1b8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	461a      	mov	r2, r3
 800099e:	211c      	movs	r1, #28
 80009a0:	f7ff fe25 	bl	80005ee <writeReg>

	uint8_t i;
	for (i = 0; i < 6; i++) {
 80009a4:	2300      	movs	r3, #0
 80009a6:	75fb      	strb	r3, [r7, #23]
 80009a8:	e00f      	b.n	80009ca <nRF_Init+0x10a>
		writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 80009aa:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <nRF_Init+0x1b8>)
 80009ac:	6818      	ldr	r0, [r3, #0]
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	3311      	adds	r3, #17
 80009b2:	b2d9      	uxtb	r1, r3
				(pnRFMainStruct->setStruct.pipePayLen[i]));
 80009b4:	4b30      	ldr	r3, [pc, #192]	; (8000a78 <nRF_Init+0x1b8>)
 80009b6:	681a      	ldr	r2, [r3, #0]
		writeReg(pnRFMainStruct, (RX_PW_P0 + i),
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	4413      	add	r3, r2
 80009bc:	7a5b      	ldrb	r3, [r3, #9]
 80009be:	461a      	mov	r2, r3
 80009c0:	f7ff fe15 	bl	80005ee <writeReg>
	for (i = 0; i < 6; i++) {
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	3301      	adds	r3, #1
 80009c8:	75fb      	strb	r3, [r7, #23]
 80009ca:	7dfb      	ldrb	r3, [r7, #23]
 80009cc:	2b05      	cmp	r3, #5
 80009ce:	d9ec      	bls.n	80009aa <nRF_Init+0xea>
	}
	writeReg(pnRFMainStruct, FEATURE, DF_FEATURE);
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <nRF_Init+0x1b8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	211d      	movs	r1, #29
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fe08 	bl	80005ee <writeReg>

	/* Set default address */
	writeRegExt(pnRFMainStruct, TX_ADDR, (pnRFMainStruct->addrStruct.txAddr),
 80009de:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <nRF_Init+0x1b8>)
 80009e0:	6818      	ldr	r0, [r3, #0]
 80009e2:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <nRF_Init+0x1b8>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f103 0211 	add.w	r2, r3, #17
 80009ea:	2305      	movs	r3, #5
 80009ec:	2110      	movs	r1, #16
 80009ee:	f7ff fe54 	bl	800069a <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.txAddr));
	writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <nRF_Init+0x1b8>)
 80009f4:	6818      	ldr	r0, [r3, #0]
			(pnRFMainStruct->addrStruct.rxAddr0),
 80009f6:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <nRF_Init+0x1b8>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f103 0216 	add.w	r2, r3, #22
	writeRegExt(pnRFMainStruct, RX_ADDR_P0,
 80009fe:	2305      	movs	r3, #5
 8000a00:	210a      	movs	r1, #10
 8000a02:	f7ff fe4a 	bl	800069a <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.rxAddr0));
	writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <nRF_Init+0x1b8>)
 8000a08:	6818      	ldr	r0, [r3, #0]
			(pnRFMainStruct->addrStruct.rxAddr1),
 8000a0a:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <nRF_Init+0x1b8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f103 021b 	add.w	r2, r3, #27
	writeRegExt(pnRFMainStruct, RX_ADDR_P1,
 8000a12:	2305      	movs	r3, #5
 8000a14:	210b      	movs	r1, #11
 8000a16:	f7ff fe40 	bl	800069a <writeRegExt>
			sizeof(pnRFMainStruct->addrStruct.rxAddr1));
	writeReg(pnRFMainStruct, RX_ADDR_P2, (pnRFMainStruct->addrStruct.rxAddr2));
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <nRF_Init+0x1b8>)
 8000a1c:	6818      	ldr	r0, [r3, #0]
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <nRF_Init+0x1b8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a26:	461a      	mov	r2, r3
 8000a28:	210c      	movs	r1, #12
 8000a2a:	f7ff fde0 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P3, (pnRFMainStruct->addrStruct.rxAddr3));
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <nRF_Init+0x1b8>)
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <nRF_Init+0x1b8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	210d      	movs	r1, #13
 8000a3e:	f7ff fdd6 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P4, (pnRFMainStruct->addrStruct.rxAddr4));
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <nRF_Init+0x1b8>)
 8000a44:	6818      	ldr	r0, [r3, #0]
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <nRF_Init+0x1b8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000a4e:	461a      	mov	r2, r3
 8000a50:	210e      	movs	r1, #14
 8000a52:	f7ff fdcc 	bl	80005ee <writeReg>
	writeReg(pnRFMainStruct, RX_ADDR_P5, (pnRFMainStruct->addrStruct.rxAddr5));
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <nRF_Init+0x1b8>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <nRF_Init+0x1b8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000a62:	461a      	mov	r2, r3
 8000a64:	210f      	movs	r1, #15
 8000a66:	f7ff fdc2 	bl	80005ee <writeReg>

	return pnRFMainStruct;
 8000a6a:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <nRF_Init+0x1b8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000000 	.word	0x20000000

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f000 fe77 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f8bf 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f7ff fb5f 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a8e:	f000 fcc5 	bl	800141c <MX_SPI1_Init>
  MX_TIM1_Init();
 8000a92:	f000 fddb 	bl	800164c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000a96:	4855      	ldr	r0, [pc, #340]	; (8000bec <main+0x170>)
 8000a98:	f002 fa9f 	bl	8002fda <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if  TEST_CONFIG
	/* 0. Create pointer and init structure. */
	nrfStruct_t *testStruct;						// create pointer to struct
	testStruct = nRF_Init(&hspi1, &htim1, CSN_GPIO_Port, CSN_Pin, CE_GPIO_Port,
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	4b53      	ldr	r3, [pc, #332]	; (8000bf0 <main+0x174>)
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2340      	movs	r3, #64	; 0x40
 8000aa6:	4a53      	ldr	r2, [pc, #332]	; (8000bf4 <main+0x178>)
 8000aa8:	4950      	ldr	r1, [pc, #320]	; (8000bec <main+0x170>)
 8000aaa:	4853      	ldr	r0, [pc, #332]	; (8000bf8 <main+0x17c>)
 8000aac:	f7ff ff08 	bl	80008c0 <nRF_Init>
 8000ab0:	6038      	str	r0, [r7, #0]
	CE_Pin);	// create struct
	regTmp = readReg(testStruct, CONFIG); 		// read value of CONFIG register
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	6838      	ldr	r0, [r7, #0]
 8000ab6:	f7ff fd6f 	bl	8000598 <readReg>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b4f      	ldr	r3, [pc, #316]	; (8000bfc <main+0x180>)
 8000ac0:	601a      	str	r2, [r3, #0]

	/* Check registers */
	uint8_t var;
	for (var = 0; var < 29; var++) {
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71fb      	strb	r3, [r7, #7]
 8000ac6:	e014      	b.n	8000af2 <main+0x76>
		if (var >= 0x0A || var <= 0x10)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	d802      	bhi.n	8000ad4 <main+0x58>
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b10      	cmp	r3, #16
 8000ad2:	d806      	bhi.n	8000ae2 <main+0x66>
			readRegExt(testStruct, var, readBuf, sizeof(readBuf));
 8000ad4:	79f9      	ldrb	r1, [r7, #7]
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	4a49      	ldr	r2, [pc, #292]	; (8000c00 <main+0x184>)
 8000ada:	6838      	ldr	r0, [r7, #0]
 8000adc:	f7ff fdb3 	bl	8000646 <readRegExt>
 8000ae0:	e004      	b.n	8000aec <main+0x70>
		else
			readReg(testStruct, var);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	6838      	ldr	r0, [r7, #0]
 8000ae8:	f7ff fd56 	bl	8000598 <readReg>
	for (var = 0; var < 29; var++) {
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	3301      	adds	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b1c      	cmp	r3, #28
 8000af6:	d9e7      	bls.n	8000ac8 <main+0x4c>
	}



	/* 1.1  Set role as RX */
	modeRX(testStruct);
 8000af8:	6838      	ldr	r0, [r7, #0]
 8000afa:	f000 f8d0 	bl	8000c9e <modeRX>
	/* 1.2 Enable CRC and set coding */
	enableCRC(testStruct);
 8000afe:	6838      	ldr	r0, [r7, #0]
 8000b00:	f000 f96a 	bl	8000dd8 <enableCRC>
	setCRC(testStruct, CRC_16_bits);
 8000b04:	2101      	movs	r1, #1
 8000b06:	6838      	ldr	r0, [r7, #0]
 8000b08:	f000 f978 	bl	8000dfc <setCRC>
	/* 1.3 Enable/disable interrupts */
	enableRXinterrupt(testStruct);
 8000b0c:	6838      	ldr	r0, [r7, #0]
 8000b0e:	f000 f903 	bl	8000d18 <enableRXinterrupt>
	enableTXinterrupt(testStruct);
 8000b12:	6838      	ldr	r0, [r7, #0]
 8000b14:	f000 f912 	bl	8000d3c <enableTXinterrupt>

	/* 2. Set ACK for RX pipe  */
	enableAutoAckPipe(testStruct, 0);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	6838      	ldr	r0, [r7, #0]
 8000b1c:	f000 f9a0 	bl	8000e60 <enableAutoAckPipe>
	/* 3. Set RX pipe */
	enableRxAddr(testStruct, 0);
 8000b20:	2100      	movs	r1, #0
 8000b22:	6838      	ldr	r0, [r7, #0]
 8000b24:	f000 f9c3 	bl	8000eae <enableRxAddr>
	/* 4. Set RX/TX address width */
	setAddrWidth(testStruct, longWidth);
 8000b28:	2103      	movs	r1, #3
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f000 f9e6 	bl	8000efc <setAddrWidth>
	/* 5. Set ARD and ARC */
	setAutoRetrCount(testStruct, 3);
 8000b30:	2103      	movs	r1, #3
 8000b32:	6838      	ldr	r0, [r7, #0]
 8000b34:	f000 f9f5 	bl	8000f22 <setAutoRetrCount>
	setAutoRetrDelay(testStruct, 1); //500us
 8000b38:	2101      	movs	r1, #1
 8000b3a:	6838      	ldr	r0, [r7, #0]
 8000b3c:	f000 fa18 	bl	8000f70 <setAutoRetrDelay>
	/* 6. Set RF channel */
	setChannel(testStruct, 64);
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	6838      	ldr	r0, [r7, #0]
 8000b44:	f000 fa45 	bl	8000fd2 <setChannel>
	/* 7. Set RF power and Data Rate */
	setRFpower(testStruct, RF_PWR_0dBm);
 8000b48:	2103      	movs	r1, #3
 8000b4a:	6838      	ldr	r0, [r7, #0]
 8000b4c:	f000 fa5a 	bl	8001004 <setRFpower>
	setDataRate(testStruct, RF_DataRate_250);
 8000b50:	2104      	movs	r1, #4
 8000b52:	6838      	ldr	r0, [r7, #0]
 8000b54:	f000 fa7b 	bl	800104e <setDataRate>
	/* 8 Set RX address */
	setReceivePipeAddress(testStruct, 0, TransmitAddress,
 8000b58:	2305      	movs	r3, #5
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <main+0x188>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	6838      	ldr	r0, [r7, #0]
 8000b60:	f000 fa9a 	bl	8001098 <setReceivePipeAddress>
			sizeof(TransmitAddress));
	/* 9. Set TX address */
	setTransmitPipeAddress(testStruct, TransmitAddress,
 8000b64:	2205      	movs	r2, #5
 8000b66:	4927      	ldr	r1, [pc, #156]	; (8000c04 <main+0x188>)
 8000b68:	6838      	ldr	r0, [r7, #0]
 8000b6a:	f000 fb29 	bl	80011c0 <setTransmitPipeAddress>
			sizeof(TransmitAddress));
#if TEST_STATIC_LENGTH
	setRxPayloadWidth(testStruct, 0, 32);
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	6838      	ldr	r0, [r7, #0]
 8000b74:	f000 fb5d 	bl	8001232 <setRxPayloadWidth>
#endif
#if TEST_DYNAMIC_LENGTH
	enableDynamicPayloadLength(testStruct);
 8000b78:	6838      	ldr	r0, [r7, #0]
 8000b7a:	f000 fc35 	bl	80013e8 <enableDynamicPayloadLength>
	enableDynamicPayloadLengthPipe(testStruct, 0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	6838      	ldr	r0, [r7, #0]
 8000b82:	f000 fc0a 	bl	800139a <enableDynamicPayloadLengthPipe>
#endif
#if TESTS_ACK_PAYLOAD
	enableAckPayload(testStruct);
 8000b86:	6838      	ldr	r0, [r7, #0]
 8000b88:	f000 fc3b 	bl	8001402 <enableAckPayload>
#endif

	/** Seconde check registers */
	for (var = 0; var < 29; var++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	e014      	b.n	8000bbc <main+0x140>
		if (var >= 0x0A || var <= 0x10)
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b09      	cmp	r3, #9
 8000b96:	d802      	bhi.n	8000b9e <main+0x122>
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	2b10      	cmp	r3, #16
 8000b9c:	d806      	bhi.n	8000bac <main+0x130>
			readRegExt(testStruct, var, readBuf, sizeof(readBuf));
 8000b9e:	79f9      	ldrb	r1, [r7, #7]
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <main+0x184>)
 8000ba4:	6838      	ldr	r0, [r7, #0]
 8000ba6:	f7ff fd4e 	bl	8000646 <readRegExt>
 8000baa:	e004      	b.n	8000bb6 <main+0x13a>
		else
			readReg(testStruct, var);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4619      	mov	r1, r3
 8000bb0:	6838      	ldr	r0, [r7, #0]
 8000bb2:	f7ff fcf1 	bl	8000598 <readReg>
	for (var = 0; var < 29; var++) {
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b1c      	cmp	r3, #28
 8000bc0:	d9e7      	bls.n	8000b92 <main+0x116>
#endif

	while (1) {
#if 1
		uint16_t i;
		for (i = 0; i < 29; i++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	e00c      	b.n	8000be2 <main+0x166>
			regTmp = readReg(testStruct, i);
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4619      	mov	r1, r3
 8000bce:	6838      	ldr	r0, [r7, #0]
 8000bd0:	f7ff fce2 	bl	8000598 <readReg>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <main+0x180>)
 8000bda:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 29; i++) {
 8000bdc:	88bb      	ldrh	r3, [r7, #4]
 8000bde:	3301      	adds	r3, #1
 8000be0:	80bb      	strh	r3, [r7, #4]
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	2b1c      	cmp	r3, #28
 8000be6:	d9ef      	bls.n	8000bc8 <main+0x14c>
	while (1) {
 8000be8:	e7eb      	b.n	8000bc2 <main+0x146>
 8000bea:	bf00      	nop
 8000bec:	200000f8 	.word	0x200000f8
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	200000a0 	.word	0x200000a0
 8000bfc:	20000074 	.word	0x20000074
 8000c00:	20000098 	.word	0x20000098
 8000c04:	20000004 	.word	0x20000004

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b090      	sub	sp, #64	; 0x40
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	2228      	movs	r2, #40	; 0x28
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fc1a 	bl	8003450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c2e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c46:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 f893 	bl	8001d7c <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c5c:	f000 f819 	bl	8000c92 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c60:	230f      	movs	r3, #15
 8000c62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c64:	2302      	movs	r3, #2
 8000c66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fafe 	bl	800227c <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c86:	f000 f804 	bl	8000c92 <Error_Handler>
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3740      	adds	r7, #64	; 0x40
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <modeRX>:
/* To turn off RX/TX state of module use mode Standby */
/**
 * @Brief	Switch radio module to Receiver (PRX) mode
 * @Retval	None
 */
void modeRX(nrfStruct_t *nrfStruct) {
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
	if (!readBit(nrfStruct, CONFIG, bit1)) {	//Check state of module
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2100      	movs	r1, #0
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff fdae 	bl	800080c <readBit>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d107      	bne.n	8000cc6 <modeRX+0x28>
		pwrUp(nrfStruct);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fd90 	bl	80007dc <pwrUp>
		delayUs(nrfStruct, 1500);	//wait 1.5ms fo nRF24L01+ stand up
 8000cbc:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fc21 	bl	8000508 <delayUs>
	}
	flushRx(nrfStruct);			//clear (flush) RX FIFO buffer
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fd4e 	bl	8000768 <flushRx>
	if (getRxStatusFIFO(nrfStruct) == RX_FIFO_EMPTY) {
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 fada 	bl	8001286 <getRxStatusFIFO>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b07      	cmp	r3, #7
 8000cd6:	d10a      	bne.n	8000cee <modeRX+0x50>
		flushTx(nrfStruct);		//clear (flush) TX FIFO buffer
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fd0b 	bl	80006f4 <flushTx>
		if (getTxStatusFIFO(nrfStruct) == TX_FIFO_MASK_EMPTY) {
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f000 fb34 	bl	800134c <getTxStatusFIFO>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d101      	bne.n	8000cee <modeRX+0x50>
			uint8_t tmp = 1;	//variable for test
 8000cea:	2301      	movs	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
		}
	}

	clearRX_DR(nrfStruct);	//clear interrupts flags
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f000 f836 	bl	8000d60 <clearRX_DR>
	clearTX_DS(nrfStruct);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f847 	bl	8000d88 <clearTX_DS>
	clearMAX_RT(nrfStruct);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f858 	bl	8000db0 <clearMAX_RT>

	//nRF in Standby-I
	ceHigh(nrfStruct); //set high on CE line
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff fc39 	bl	8000578 <ceHigh>
	setBit(nrfStruct, CONFIG, bit0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fdb4 	bl	8000878 <setBit>
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <enableRXinterrupt>:
	resetBit(nrfStruct, CONFIG, bit4);
	nrfStruct->setStruct.enableMaxRtIrq = 0;
}

void enableRXinterrupt(nrfStruct_t *nrfStruct)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit6);
 8000d20:	2206      	movs	r2, #6
 8000d22:	2100      	movs	r1, #0
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff fda7 	bl	8000878 <setBit>
	nrfStruct->setStruct.enableRxIrq = 1;
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	7bd3      	ldrb	r3, [r2, #15]
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	73d3      	strb	r3, [r2, #15]
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <enableTXinterrupt>:
void enableTXinterrupt(nrfStruct_t *nrfStruct)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit5);
 8000d44:	2205      	movs	r2, #5
 8000d46:	2100      	movs	r1, #0
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fd95 	bl	8000878 <setBit>
	nrfStruct->setStruct.enableTxIrq = 1;
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	7bd3      	ldrb	r3, [r2, #15]
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	73d3      	strb	r3, [r2, #15]
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <clearRX_DR>:
	setBit(nrfStruct, CONFIG, bit4);
	nrfStruct->setStruct.enableMaxRtIrq = 1;
}

void clearRX_DR(nrfStruct_t *nrfStruct)
{ //clear irt bits in Status Register
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit6);
 8000d68:	2206      	movs	r2, #6
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fd83 	bl	8000878 <setBit>
	nrfStruct->statusStruct.dataReadIrq = 0;
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000d78:	f36f 0300 	bfc	r3, #0, #1
 8000d7c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <clearTX_DS>:
void clearTX_DS(nrfStruct_t *nrfStruct)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit5);
 8000d90:	2205      	movs	r2, #5
 8000d92:	2107      	movs	r1, #7
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fd6f 	bl	8000878 <setBit>
	nrfStruct->statusStruct.dataSendIrq = 0;
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000da0:	f36f 0341 	bfc	r3, #1, #1
 8000da4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <clearMAX_RT>:
void clearMAX_RT(nrfStruct_t *nrfStruct)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, STATUS, bit4);
 8000db8:	2204      	movs	r2, #4
 8000dba:	2107      	movs	r1, #7
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fd5b 	bl	8000878 <setBit>
	nrfStruct->statusStruct.maxRetr = 0;
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8000dc8:	f36f 0382 	bfc	r3, #2, #1
 8000dcc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <enableCRC>:

/* CRC functions */
void enableCRC(nrfStruct_t *nrfStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, CONFIG, bit3);
 8000de0:	2203      	movs	r2, #3
 8000de2:	2100      	movs	r1, #0
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff fd47 	bl	8000878 <setBit>
	nrfStruct->setStruct.enableCRC = 1;
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	7bd3      	ldrb	r3, [r2, #15]
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	73d3      	strb	r3, [r2, #15]
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <setCRC>:
	resetBit(nrfStruct, CONFIG, bit3);
	nrfStruct->setStruct.enableCRC = 0;
}

void setCRC(nrfStruct_t *nrfStruct, widthCRC_t w)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
	if (w)
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00a      	beq.n	8000e24 <setCRC+0x28>
	{
		setBit(nrfStruct, CONFIG, bit2);
 8000e0e:	2202      	movs	r2, #2
 8000e10:	2100      	movs	r1, #0
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fd30 	bl	8000878 <setBit>
		nrfStruct->setStruct.codingCRC = 1;
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	7bd3      	ldrb	r3, [r2, #15]
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	73d3      	strb	r3, [r2, #15]
	else
	{
		resetBit(nrfStruct, CONFIG, bit2);
		nrfStruct->setStruct.codingCRC = 0;
	}
}
 8000e22:	e009      	b.n	8000e38 <setCRC+0x3c>
		resetBit(nrfStruct, CONFIG, bit2);
 8000e24:	2202      	movs	r2, #2
 8000e26:	2100      	movs	r1, #0
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fd0a 	bl	8000842 <resetBit>
		nrfStruct->setStruct.codingCRC = 0;
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	7bd3      	ldrb	r3, [r2, #15]
 8000e32:	f36f 0341 	bfc	r3, #1, #1
 8000e36:	73d3      	strb	r3, [r2, #15]
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <checkPipe>:

/* Auto ACK */
uint8_t checkPipe(uint8_t pipe)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	if (pipe >= 0 && pipe <= 5) //check correct pipe number
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d801      	bhi.n	8000e54 <checkPipe+0x14>
		return 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <checkPipe+0x16>
	return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <enableAutoAckPipe>:
uint8_t enableAutoAckPipe(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	70fb      	strb	r3, [r7, #3]
	if (checkPipe(pipe))
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ffe6 	bl	8000e40 <checkPipe>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d014      	beq.n	8000ea4 <enableAutoAckPipe+0x44>
	{
		setBit(nrfStruct, EN_AA, pipe);
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	2101      	movs	r1, #1
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff fcf9 	bl	8000878 <setBit>
		nrfStruct->setStruct.pipeACK |= (1 << pipe);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	79db      	ldrb	r3, [r3, #7]
 8000e8a:	b25a      	sxtb	r2, r3
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	2101      	movs	r1, #1
 8000e90:	fa01 f303 	lsl.w	r3, r1, r3
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	71da      	strb	r2, [r3, #7]
		return 1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e000      	b.n	8000ea6 <enableAutoAckPipe+0x46>
	}
	return 0;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <enableRxAddr>:
	return 0;
}

/* RX addresses */
uint8_t enableRxAddr(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	70fb      	strb	r3, [r7, #3]
	if (checkPipe(pipe))
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ffbf 	bl	8000e40 <checkPipe>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d014      	beq.n	8000ef2 <enableRxAddr+0x44>
	{
		setBit(nrfStruct, EN_RXADDR, pipe);
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	2102      	movs	r1, #2
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff fcd2 	bl	8000878 <setBit>
		nrfStruct->setStruct.pipeEn |= (1 << pipe);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	799b      	ldrb	r3, [r3, #6]
 8000ed8:	b25a      	sxtb	r2, r3
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	2101      	movs	r1, #1
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	b25b      	sxtb	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	719a      	strb	r2, [r3, #6]
		return 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <enableRxAddr+0x46>
	}
	return 0;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <setAddrWidth>:
	return 0;
}

/* Address Width */
void setAddrWidth(nrfStruct_t *nrfStruct, addressWidth_t width)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
	writeReg(nrfStruct, SETUP_AW, width);
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fb6d 	bl	80005ee <writeReg>
	nrfStruct->addrStruct.addrWidth = width;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	741a      	strb	r2, [r3, #16]
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <setAutoRetrCount>:

/* Setup retransmission */
uint8_t setAutoRetrCount(nrfStruct_t *nrfStruct, uint8_t count)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70fb      	strb	r3, [r7, #3]
	if (count >= 0x00 && count <= 0x0F)
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d818      	bhi.n	8000f66 <setAutoRetrCount+0x44>
	{					//check count val
		uint8_t tmp = readReg(nrfStruct, SETUP_RETR); 	//read reg. val
 8000f34:	2104      	movs	r1, #4
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fb2e 	bl	8000598 <readReg>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
		tmp = tmp & 0xF0;							// reset LSB and save MSB
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f023 030f 	bic.w	r3, r3, #15
 8000f46:	73fb      	strb	r3, [r7, #15]
		tmp |= count;									//add tmp and count
 8000f48:	7bfa      	ldrb	r2, [r7, #15]
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, SETUP_RETR, tmp);			//write to SETUP_RETR
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	461a      	mov	r2, r3
 8000f54:	2104      	movs	r1, #4
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff fb49 	bl	80005ee <writeReg>
		nrfStruct->setStruct.arc = count;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	715a      	strb	r2, [r3, #5]
		return OK_CODE;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <setAutoRetrCount+0x46>
	}
	return ERR_CODE;
 8000f66:	23ff      	movs	r3, #255	; 0xff
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <setAutoRetrDelay>:

uint8_t setAutoRetrDelay(nrfStruct_t *nrfStruct, uint8_t delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
	if (delay > 0x0F)
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	2b0f      	cmp	r3, #15
 8000f80:	d902      	bls.n	8000f88 <setAutoRetrDelay+0x18>
	{						//if delay in MSB format
		delay = delay >> 8; //shift to LSB format
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	121b      	asrs	r3, r3, #8
 8000f86:	70fb      	strb	r3, [r7, #3]
	}
	if (delay >= 0x00 && delay <= 0x0F)
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	2b0f      	cmp	r3, #15
 8000f8c:	d81c      	bhi.n	8000fc8 <setAutoRetrDelay+0x58>
	{
		uint8_t tmp = readReg(nrfStruct, SETUP_RETR);
 8000f8e:	2104      	movs	r1, #4
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fb01 	bl	8000598 <readReg>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
		tmp = tmp & 0x0F;	//save LSB, reset MSB
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	73fb      	strb	r3, [r7, #15]
		tmp |= (delay << 8); //add tmp and delay
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b25a      	sxtb	r2, r3
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, SETUP_RETR, tmp);
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff fb18 	bl	80005ee <writeReg>
		nrfStruct->setStruct.ard = delay;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	78fa      	ldrb	r2, [r7, #3]
 8000fc2:	711a      	strb	r2, [r3, #4]
		return OK_CODE;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <setAutoRetrDelay+0x5a>
	}
	return ERR_CODE;
 8000fc8:	23ff      	movs	r3, #255	; 0xff
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <setChannel>:

/* RF channel */
uint8_t setChannel(nrfStruct_t *nrfStruct, uint8_t channel)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
	if (channel >= 0 && channel <= 125)
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	2b7d      	cmp	r3, #125	; 0x7d
 8000fe2:	d80a      	bhi.n	8000ffa <setChannel+0x28>
	{
		writeReg(nrfStruct, RF_CH, channel); //Maximum channel limited to 125 by hardware
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2105      	movs	r1, #5
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff faff 	bl	80005ee <writeReg>
		nrfStruct->setStruct.channel = channel;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	705a      	strb	r2, [r3, #1]
		return OK_CODE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <setChannel+0x2a>
	}
	return ERR_CODE;
 8000ffa:	23ff      	movs	r3, #255	; 0xff
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <setRFpower>:
		return 0;
}


void setRFpower(nrfStruct_t *nrfStruct, powerRF_t power)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	/*
	if (power > RF_PWR_0dBm && power < RF_PWR_18dBm)
	 return ERR_CODE;*/
	uint8_t tmp = readReg(nrfStruct, RF_SETUP); //
 8001010:	2106      	movs	r1, #6
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fac0 	bl	8000598 <readReg>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0xF8;					  //0xF8 - 1111 1000B reset 3 LSB
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	f023 0307 	bic.w	r3, r3, #7
 8001022:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (power << 1);			  //combining tmp and shifted power
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	b25a      	sxtb	r2, r3
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4313      	orrs	r3, r2
 8001030:	b25b      	sxtb	r3, r3
 8001032:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, RF_SETUP, tmp);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	461a      	mov	r2, r3
 8001038:	2106      	movs	r1, #6
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fad7 	bl	80005ee <writeReg>
	nrfStruct->setStruct.powerRF = power;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	78fa      	ldrb	r2, [r7, #3]
 8001044:	70da      	strb	r2, [r3, #3]

}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <setDataRate>:

void setDataRate(nrfStruct_t *nrfStruct, dataRate_t rate)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = readReg(nrfStruct, RF_SETUP); 	//
 800105a:	2106      	movs	r1, #6
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff fa9b 	bl	8000598 <readReg>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
	tmp = tmp & 0x06;//0x06 = 0000 0110B - reset data rate's bits - Also this line reset PLL_LOCK and CONT_WAVE bits
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f003 0306 	and.w	r3, r3, #6
 800106c:	73fb      	strb	r3, [r7, #15]
	tmp = tmp | (rate << 3);			  //combining tmp and shifted data rate
 800106e:	78fb      	ldrb	r3, [r7, #3]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	b25a      	sxtb	r2, r3
 8001074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001078:	4313      	orrs	r3, r2
 800107a:	b25b      	sxtb	r3, r3
 800107c:	73fb      	strb	r3, [r7, #15]
	writeReg(nrfStruct, RF_SETUP, tmp);
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	461a      	mov	r2, r3
 8001082:	2106      	movs	r1, #6
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fab2 	bl	80005ee <writeReg>
	nrfStruct->setStruct.dataRate = rate;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	709a      	strb	r2, [r3, #2]
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <setReceivePipeAddress>:
 * @Note	Remember that addresses registers for pipes from 2 to 5 are 1 byte only.
 * 			Also registers for pipe 0 and 1 can have size of from 3 to 5 bytes.
 */
uint8_t setReceivePipeAddress(nrfStruct_t *nrfStruct, uint8_t pipe,
		uint8_t *addrBuf, size_t addrBufSize)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	460b      	mov	r3, r1
 80010a6:	72fb      	strb	r3, [r7, #11]
	if (!checkPipe(pipe)) { //if checkPipe return 0 - end fun. by return 0.
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fec8 	bl	8000e40 <checkPipe>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <setReceivePipeAddress+0x22>
		return ERR_CODE;
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	e07e      	b.n	80011b8 <setReceivePipeAddress+0x120>
	}
	size_t bufSize = 0x05;
 80010ba:	2305      	movs	r3, #5
 80010bc:	617b      	str	r3, [r7, #20]
	if (pipe == 0 || pipe == 1) {	//if pipe 0 or 1 check bufer width
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <setReceivePipeAddress+0x32>
 80010c4:	7afb      	ldrb	r3, [r7, #11]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d13e      	bne.n	8001148 <setReceivePipeAddress+0xb0>
		switch (addrBufSize) {	//check addrBufSize
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d006      	beq.n	80010de <setReceivePipeAddress+0x46>
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	d007      	beq.n	80010e4 <setReceivePipeAddress+0x4c>
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d108      	bne.n	80010ea <setReceivePipeAddress+0x52>
		case 3:
			bufSize = 0x03;
 80010d8:	2303      	movs	r3, #3
 80010da:	617b      	str	r3, [r7, #20]
			break;
 80010dc:	e007      	b.n	80010ee <setReceivePipeAddress+0x56>
		case 4:
			bufSize = 0x04;
 80010de:	2304      	movs	r3, #4
 80010e0:	617b      	str	r3, [r7, #20]
			break;
 80010e2:	e004      	b.n	80010ee <setReceivePipeAddress+0x56>
		case 5:
			bufSize = 0x05;
 80010e4:	2305      	movs	r3, #5
 80010e6:	617b      	str	r3, [r7, #20]
			break;
 80010e8:	e001      	b.n	80010ee <setReceivePipeAddress+0x56>
		default:
			return ERR_CODE;
 80010ea:	23ff      	movs	r3, #255	; 0xff
 80010ec:	e064      	b.n	80011b8 <setReceivePipeAddress+0x120>
			break;
		}
		if (pipe == 0) {	//check pipe and write addr to struct
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d112      	bne.n	800111a <setReceivePipeAddress+0x82>
			uint8_t i;
			for (i = 0; i < addrBufSize; i++) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	74fb      	strb	r3, [r7, #19]
 80010f8:	e00b      	b.n	8001112 <setReceivePipeAddress+0x7a>
				nrfStruct->addrStruct.rxAddr0[i] = addrBuf[i];
 80010fa:	7cfb      	ldrb	r3, [r7, #19]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	441a      	add	r2, r3
 8001100:	7cfb      	ldrb	r3, [r7, #19]
 8001102:	7811      	ldrb	r1, [r2, #0]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	460a      	mov	r2, r1
 800110a:	759a      	strb	r2, [r3, #22]
			for (i = 0; i < addrBufSize; i++) {
 800110c:	7cfb      	ldrb	r3, [r7, #19]
 800110e:	3301      	adds	r3, #1
 8001110:	74fb      	strb	r3, [r7, #19]
 8001112:	7cfb      	ldrb	r3, [r7, #19]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d8ef      	bhi.n	80010fa <setReceivePipeAddress+0x62>
			}
		}
		if (pipe == 1) {
 800111a:	7afb      	ldrb	r3, [r7, #11]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d141      	bne.n	80011a4 <setReceivePipeAddress+0x10c>
			uint8_t i;
			for (i = 0; i < addrBufSize; i++) {
 8001120:	2300      	movs	r3, #0
 8001122:	74bb      	strb	r3, [r7, #18]
 8001124:	e00b      	b.n	800113e <setReceivePipeAddress+0xa6>
				nrfStruct->addrStruct.rxAddr1[i] = addrBuf[i];
 8001126:	7cbb      	ldrb	r3, [r7, #18]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	441a      	add	r2, r3
 800112c:	7cbb      	ldrb	r3, [r7, #18]
 800112e:	7811      	ldrb	r1, [r2, #0]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	460a      	mov	r2, r1
 8001136:	76da      	strb	r2, [r3, #27]
			for (i = 0; i < addrBufSize; i++) {
 8001138:	7cbb      	ldrb	r3, [r7, #18]
 800113a:	3301      	adds	r3, #1
 800113c:	74bb      	strb	r3, [r7, #18]
 800113e:	7cbb      	ldrb	r3, [r7, #18]
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	429a      	cmp	r2, r3
 8001144:	d8ef      	bhi.n	8001126 <setReceivePipeAddress+0x8e>
		if (pipe == 1) {
 8001146:	e02d      	b.n	80011a4 <setReceivePipeAddress+0x10c>
			}
		}
	} else {
		if (addrBufSize == 1)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <setReceivePipeAddress+0xba>
			bufSize = 0x01;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
		switch (pipe) {	//check pipe and write addr to struct
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	3b02      	subs	r3, #2
 8001156:	2b03      	cmp	r3, #3
 8001158:	d822      	bhi.n	80011a0 <setReceivePipeAddress+0x108>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <setReceivePipeAddress+0xc8>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	08001171 	.word	0x08001171
 8001164:	0800117d 	.word	0x0800117d
 8001168:	08001189 	.word	0x08001189
 800116c:	08001195 	.word	0x08001195
		case 2:
			nrfStruct->addrStruct.rxAddr2 = *addrBuf;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f883 2020 	strb.w	r2, [r3, #32]
			break;
 800117a:	e013      	b.n	80011a4 <setReceivePipeAddress+0x10c>
		case 3:
			nrfStruct->addrStruct.rxAddr3 = *addrBuf;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			break;
 8001186:	e00d      	b.n	80011a4 <setReceivePipeAddress+0x10c>
		case 4:
			nrfStruct->addrStruct.rxAddr4 = *addrBuf;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			break;
 8001192:	e007      	b.n	80011a4 <setReceivePipeAddress+0x10c>
		case 5:
			nrfStruct->addrStruct.rxAddr5 = *addrBuf;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			break;
 800119e:	e001      	b.n	80011a4 <setReceivePipeAddress+0x10c>
		default:
			return ERR_CODE;
 80011a0:	23ff      	movs	r3, #255	; 0xff
 80011a2:	e009      	b.n	80011b8 <setReceivePipeAddress+0x120>
			break;
		}
	}
	uint8_t addr = RX_ADDR_P0 + pipe; //if pipe = 0 -> write Receive address pipe 0
 80011a4:	7afb      	ldrb	r3, [r7, #11]
 80011a6:	330a      	adds	r3, #10
 80011a8:	747b      	strb	r3, [r7, #17]
	writeRegExt(nrfStruct, addr, addrBuf, bufSize);
 80011aa:	7c79      	ldrb	r1, [r7, #17]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f7ff fa72 	bl	800069a <writeRegExt>

	return OK_CODE;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <setTransmitPipeAddress>:

/* Transmit address data pipe */
uint8_t setTransmitPipeAddress(nrfStruct_t *nrfStruct, uint8_t *addrBuf,
		addressWidth_t addrBufSize)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	4613      	mov	r3, r2
 80011cc:	71fb      	strb	r3, [r7, #7]
	size_t bufSize = 0x05;
 80011ce:	2305      	movs	r3, #5
 80011d0:	617b      	str	r3, [r7, #20]
	switch (addrBufSize) {	//check addrBufSize
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d006      	beq.n	80011e6 <setTransmitPipeAddress+0x26>
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d007      	beq.n	80011ec <setTransmitPipeAddress+0x2c>
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d108      	bne.n	80011f2 <setTransmitPipeAddress+0x32>
	case shortWidth:
		bufSize = 0x03;
 80011e0:	2303      	movs	r3, #3
 80011e2:	617b      	str	r3, [r7, #20]
		break;
 80011e4:	e007      	b.n	80011f6 <setTransmitPipeAddress+0x36>
	case mediumWidth:
		bufSize = 0x04;
 80011e6:	2304      	movs	r3, #4
 80011e8:	617b      	str	r3, [r7, #20]
		break;
 80011ea:	e004      	b.n	80011f6 <setTransmitPipeAddress+0x36>
	case longWidth:
		bufSize = 0x05;
 80011ec:	2305      	movs	r3, #5
 80011ee:	617b      	str	r3, [r7, #20]
		break;
 80011f0:	e001      	b.n	80011f6 <setTransmitPipeAddress+0x36>
	default:
		return ERR_CODE;
 80011f2:	23ff      	movs	r3, #255	; 0xff
 80011f4:	e019      	b.n	800122a <setTransmitPipeAddress+0x6a>
		break;
	}
	uint8_t i;
	for (i = 0; i < addrBufSize; i++) {	//write to struct
 80011f6:	2300      	movs	r3, #0
 80011f8:	74fb      	strb	r3, [r7, #19]
 80011fa:	e00b      	b.n	8001214 <setTransmitPipeAddress+0x54>
		nrfStruct->addrStruct.txAddr[i] = addrBuf[i];
 80011fc:	7cfb      	ldrb	r3, [r7, #19]
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	441a      	add	r2, r3
 8001202:	7cfb      	ldrb	r3, [r7, #19]
 8001204:	7811      	ldrb	r1, [r2, #0]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	460a      	mov	r2, r1
 800120c:	745a      	strb	r2, [r3, #17]
	for (i = 0; i < addrBufSize; i++) {	//write to struct
 800120e:	7cfb      	ldrb	r3, [r7, #19]
 8001210:	3301      	adds	r3, #1
 8001212:	74fb      	strb	r3, [r7, #19]
 8001214:	7cfa      	ldrb	r2, [r7, #19]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3ef      	bcc.n	80011fc <setTransmitPipeAddress+0x3c>
	}
	writeRegExt(nrfStruct, TX_ADDR, addrBuf, bufSize);
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	2110      	movs	r1, #16
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff fa39 	bl	800069a <writeRegExt>
	return OK_CODE;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <setRxPayloadWidth>:
	}
	return ERR_CODE;
}

uint8_t setRxPayloadWidth(nrfStruct_t *nrfStruct, uint8_t pipe, uint8_t width)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	70fb      	strb	r3, [r7, #3]
 800123e:	4613      	mov	r3, r2
 8001240:	70bb      	strb	r3, [r7, #2]
	if (checkPipe(pipe))
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fdfb 	bl	8000e40 <checkPipe>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d015      	beq.n	800127c <setRxPayloadWidth+0x4a>
	{
		if (width < 1 && width > 32) { //check width correct value
 8001250:	78bb      	ldrb	r3, [r7, #2]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d104      	bne.n	8001260 <setRxPayloadWidth+0x2e>
 8001256:	78bb      	ldrb	r3, [r7, #2]
 8001258:	2b20      	cmp	r3, #32
 800125a:	d901      	bls.n	8001260 <setRxPayloadWidth+0x2e>
			return ERR_CODE;
 800125c:	23ff      	movs	r3, #255	; 0xff
 800125e:	e00e      	b.n	800127e <setRxPayloadWidth+0x4c>
		}
		uint8_t addr = RX_PW_P0 + pipe;
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	3311      	adds	r3, #17
 8001264:	73fb      	strb	r3, [r7, #15]
		writeReg(nrfStruct, addr, width);
 8001266:	78ba      	ldrb	r2, [r7, #2]
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff f9be 	bl	80005ee <writeReg>
		nrfStruct->addrStruct.addrWidth = width;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	78ba      	ldrb	r2, [r7, #2]
 8001276:	741a      	strb	r2, [r3, #16]
		return OK_CODE;
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <setRxPayloadWidth+0x4c>
	}
	return ERR_CODE;
 800127c:	23ff      	movs	r3, #255	; 0xff
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <getRxStatusFIFO>:
/* FIFO status */
/**
 * @Brief	Return status of RX FIFO buffer by check bits in FIFO Status Register 
 * */
uint8_t getRxStatusFIFO(nrfStruct_t *nrfStruct)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	uint8_t tmp = readReg(nrfStruct, FIFO_STATUS);
 800128e:	2117      	movs	r1, #23
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff f981 	bl	8000598 <readReg>
 8001296:	4603      	mov	r3, r0
 8001298:	73fb      	strb	r3, [r7, #15]
	if ((tmp & 0x03) == RX_FIFO_MASK_EMPTY)
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d116      	bne.n	80012d2 <getRxStatusFIFO+0x4c>
	{
		nrfStruct->fifoStruct.rxEmpty = 1;
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80012aa:	f043 0308 	orr.w	r3, r3, #8
 80012ae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxFull = 0;
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80012b8:	f36f 0382 	bfc	r3, #2, #1
 80012bc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxRead = 0;
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80012c6:	f36f 0341 	bfc	r3, #1, #1
 80012ca:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return RX_FIFO_MASK_EMPTY; //RX FIFO register buffer is empty
 80012ce:	2301      	movs	r3, #1
 80012d0:	e038      	b.n	8001344 <getRxStatusFIFO+0xbe>
	}
	if ((tmp & 0x03) == RX_FIFO_MASK_FULL)
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d116      	bne.n	800130a <getRxStatusFIFO+0x84>
	{
		nrfStruct->fifoStruct.rxEmpty = 0;
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80012e2:	f36f 03c3 	bfc	r3, #3, #1
 80012e6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxFull = 1;
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxRead = 1;
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return RX_FIFO_MASK_FULL; ////RX FIFO register buffer is full
 8001306:	2302      	movs	r3, #2
 8001308:	e01c      	b.n	8001344 <getRxStatusFIFO+0xbe>
	}
	if ((tmp & 0x03) == RX_FIFO_MASK_DATA)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b00      	cmp	r3, #0
 8001312:	d116      	bne.n	8001342 <getRxStatusFIFO+0xbc>
	{
		nrfStruct->fifoStruct.rxEmpty = 0;
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 800131a:	f36f 03c3 	bfc	r3, #3, #1
 800131e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxFull = 0;
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001328:	f36f 0382 	bfc	r3, #2, #1
 800132c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		nrfStruct->fifoStruct.rxRead = 1;
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
		return RX_FIFO_MASK_DATA; //RX FIFO register buffer has some data but isn't full
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <getRxStatusFIFO+0xbe>
	}
	return ERR_CODE;
 8001342:	23ff      	movs	r3, #255	; 0xff
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <getTxStatusFIFO>:
/**
 * @Brief	Return status of TX FIFO buffer by check bits in FIFO Status Register 
 * */
uint8_t getTxStatusFIFO(nrfStruct_t *nrfStruct)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	uint8_t tmp = readReg(nrfStruct, FIFO_STATUS);
 8001354:	2117      	movs	r1, #23
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff f91e 	bl	8000598 <readReg>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]
	tmp = tmp >> 4;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	73fb      	strb	r3, [r7, #15]
	if ((tmp & 0x03) == TX_FIFO_MASK_EMPTY)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <getTxStatusFIFO+0x28>
	{
		return TX_FIFO_MASK_EMPTY;
 8001370:	2301      	movs	r3, #1
 8001372:	e00e      	b.n	8001392 <getTxStatusFIFO+0x46>
	}
	if ((tmp & 0x03) == TX_FIFO_MASK_FULL)
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d101      	bne.n	8001382 <getTxStatusFIFO+0x36>
	{
		return TX_FIFO_MASK_FULL;
 800137e:	2302      	movs	r3, #2
 8001380:	e007      	b.n	8001392 <getTxStatusFIFO+0x46>
	}
	if ((tmp & 0x03) == TX_FIFO_MASK_DATA)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <getTxStatusFIFO+0x44>
	{
		return TX_FIFO_MASK_DATA;
 800138c:	2300      	movs	r3, #0
 800138e:	e000      	b.n	8001392 <getTxStatusFIFO+0x46>
	}
	return ERR_CODE;
 8001390:	23ff      	movs	r3, #255	; 0xff
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <enableDynamicPayloadLengthPipe>:
	return TX_REUSE_UNUSED;
}

/* Dynamic Payload Lenggth */
uint8_t enableDynamicPayloadLengthPipe(nrfStruct_t *nrfStruct, uint8_t pipe)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	70fb      	strb	r3, [r7, #3]
	if (!checkPipe(pipe))
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fd49 	bl	8000e40 <checkPipe>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <enableDynamicPayloadLengthPipe+0x1e>
	{
		return ERR_CODE;
 80013b4:	23ff      	movs	r3, #255	; 0xff
 80013b6:	e013      	b.n	80013e0 <enableDynamicPayloadLengthPipe+0x46>
	}
	setBit(nrfStruct, DYNPD, pipe);
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	461a      	mov	r2, r3
 80013bc:	211c      	movs	r1, #28
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fa5a 	bl	8000878 <setBit>
	nrfStruct->setStruct.pipeDPL |= (1 << pipe);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7a1b      	ldrb	r3, [r3, #8]
 80013c8:	b25a      	sxtb	r2, r3
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	2101      	movs	r1, #1
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	721a      	strb	r2, [r3, #8]
	return OK_CODE;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <enableDynamicPayloadLength>:
	nrfStruct->setStruct.pipeDPL |= (0 << pipe);
	return OK_CODE;
}
/* Feature */
void enableDynamicPayloadLength(nrfStruct_t *nrfStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, FEATURE, EN_DPL);
 80013f0:	2202      	movs	r2, #2
 80013f2:	211d      	movs	r1, #29
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff fa3f 	bl	8000878 <setBit>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <enableAckPayload>:
{
	resetBit(nrfStruct, FEATURE, EN_DPL);
}

void enableAckPayload(nrfStruct_t *nrfStruct)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	setBit(nrfStruct, FEATURE, EN_ACK_PAY);
 800140a:	2201      	movs	r2, #1
 800140c:	211d      	movs	r1, #29
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fa32 	bl	8000878 <setBit>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_SPI1_Init+0x64>)
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <MX_SPI1_Init+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_SPI1_Init+0x64>)
 8001428:	f44f 7282 	mov.w	r2, #260	; 0x104
 800142c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_SPI1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_SPI1_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_SPI1_Init+0x64>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_SPI1_Init+0x64>)
 8001442:	2200      	movs	r2, #0
 8001444:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_SPI1_Init+0x64>)
 8001448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SPI1_Init+0x64>)
 8001450:	2218      	movs	r2, #24
 8001452:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001454:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <MX_SPI1_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SPI1_Init+0x64>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <MX_SPI1_Init+0x64>)
 8001462:	2200      	movs	r2, #0
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SPI1_Init+0x64>)
 8001468:	220a      	movs	r2, #10
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146c:	4804      	ldr	r0, [pc, #16]	; (8001480 <MX_SPI1_Init+0x64>)
 800146e:	f001 f86f 	bl	8002550 <HAL_SPI_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001478:	f7ff fc0b 	bl	8000c92 <Error_Handler>
  }

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200000a0 	.word	0x200000a0
 8001484:	40013000 	.word	0x40013000

08001488 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a1b      	ldr	r2, [pc, #108]	; (8001510 <HAL_SPI_MspInit+0x88>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d12f      	bne.n	8001508 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_SPI_MspInit+0x8c>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_SPI_MspInit+0x8c>)
 80014ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_SPI_MspInit+0x8c>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <HAL_SPI_MspInit+0x8c>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_SPI_MspInit+0x8c>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_SPI_MspInit+0x8c>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80014d8:	23a0      	movs	r3, #160	; 0xa0
 80014da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4619      	mov	r1, r3
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <HAL_SPI_MspInit+0x90>)
 80014ec:	f000 fab2 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014f0:	2340      	movs	r3, #64	; 0x40
 80014f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_SPI_MspInit+0x90>)
 8001504:	f000 faa6 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40013000 	.word	0x40013000
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_MspInit+0x5c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_MspInit+0x5c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6193      	str	r3, [r2, #24]
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_MspInit+0x5c>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x5c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_MspInit+0x5c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_MspInit+0x5c>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_MspInit+0x60>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_MspInit+0x60>)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <HardFault_Handler+0x4>

08001592 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <MemManage_Handler+0x4>

08001598 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <BusFault_Handler+0x4>

0800159e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <UsageFault_Handler+0x4>

080015a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015cc:	f000 f918 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015dc:	f000 fbac 	bl	8001d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <SystemInit+0x5c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <SystemInit+0x5c>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <SystemInit+0x5c>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4911      	ldr	r1, [pc, #68]	; (8001640 <SystemInit+0x5c>)
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <SystemInit+0x60>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <SystemInit+0x5c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0e      	ldr	r2, [pc, #56]	; (8001640 <SystemInit+0x5c>)
 8001606:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800160a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <SystemInit+0x5c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SystemInit+0x5c>)
 8001616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <SystemInit+0x5c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <SystemInit+0x5c>)
 8001622:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001626:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SystemInit+0x5c>)
 800162a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800162e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SystemInit+0x64>)
 8001632:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001636:	609a      	str	r2, [r3, #8]
#endif 
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000
 8001644:	f8ff0000 	.word	0xf8ff0000
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	463b      	mov	r3, r7
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001668:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_TIM1_Init+0x98>)
 800166a:	4a1f      	ldr	r2, [pc, #124]	; (80016e8 <MX_TIM1_Init+0x9c>)
 800166c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_TIM1_Init+0x98>)
 8001670:	2247      	movs	r2, #71	; 0x47
 8001672:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_TIM1_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFE;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_TIM1_Init+0x98>)
 800167c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001680:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_TIM1_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_TIM1_Init+0x98>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_TIM1_Init+0x98>)
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001694:	4813      	ldr	r0, [pc, #76]	; (80016e4 <MX_TIM1_Init+0x98>)
 8001696:	f001 fc75 	bl	8002f84 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016a0:	f7ff faf7 	bl	8000c92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <MX_TIM1_Init+0x98>)
 80016b2:	f001 fcb5 	bl	8003020 <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016bc:	f7ff fae9 	bl	8000c92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_TIM1_Init+0x98>)
 80016ce:	f001 fe57 	bl	8003380 <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016d8:	f7ff fadb 	bl	8000c92 <Error_Handler>
  }

}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200000f8 	.word	0x200000f8
 80016e8:	40012c00 	.word	0x40012c00

080016ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_TIM_Base_MspInit+0x34>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10b      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_TIM_Base_MspInit+0x38>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_TIM_Base_MspInit+0x38>)
 8001704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001708:	6193      	str	r3, [r2, #24]
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_TIM_Base_MspInit+0x38>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	40012c00 	.word	0x40012c00
 8001724:	40021000 	.word	0x40021000

08001728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001728:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800172a:	e003      	b.n	8001734 <LoopCopyDataInit>

0800172c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800172e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001730:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001732:	3104      	adds	r1, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001734:	480a      	ldr	r0, [pc, #40]	; (8001760 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001738:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800173a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800173c:	d3f6      	bcc.n	800172c <CopyDataInit>
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001740:	e002      	b.n	8001748 <LoopFillZerobss>

08001742 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001744:	f842 3b04 	str.w	r3, [r2], #4

08001748 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800174a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800174c:	d3f9      	bcc.n	8001742 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800174e:	f7ff ff49 	bl	80015e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f001 fe59 	bl	8003408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001756:	f7ff f991 	bl	8000a7c <main>
  bx lr
 800175a:	4770      	bx	lr
  ldr r3, =_sidata
 800175c:	080034a4 	.word	0x080034a4
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001764:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8001768:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 800176c:	2000013c 	.word	0x2000013c

08001770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC1_2_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_Init+0x28>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_Init+0x28>)
 800177e:	f043 0310 	orr.w	r3, r3, #16
 8001782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 f923 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fec4 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f93b 	bl	8001a3a <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 f903 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	20000014 	.word	0x20000014
 80017fc:	20000010 	.word	0x20000010

08001800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_IncTick+0x1c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_IncTick+0x20>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_IncTick+0x20>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000014 	.word	0x20000014
 8001820:	20000138 	.word	0x20000138

08001824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b02      	ldr	r3, [pc, #8]	; (8001834 <HAL_GetTick+0x10>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	20000138 	.word	0x20000138

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4906      	ldr	r1, [pc, #24]	; (80018d0 <__NVIC_EnableIRQ+0x34>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f7ff ff90 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff2d 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff42 	bl	8001880 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff90 	bl	8001928 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5f 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff35 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa2 	bl	800198c <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b08b      	sub	sp, #44	; 0x2c
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a66:	e127      	b.n	8001cb8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	f040 8116 	bne.w	8001cb2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d034      	beq.n	8001af8 <HAL_GPIO_Init+0xa4>
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d80d      	bhi.n	8001aae <HAL_GPIO_Init+0x5a>
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d02b      	beq.n	8001aee <HAL_GPIO_Init+0x9a>
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d804      	bhi.n	8001aa4 <HAL_GPIO_Init+0x50>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d031      	beq.n	8001b02 <HAL_GPIO_Init+0xae>
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d01c      	beq.n	8001adc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aa2:	e048      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	d043      	beq.n	8001b30 <HAL_GPIO_Init+0xdc>
 8001aa8:	2b11      	cmp	r3, #17
 8001aaa:	d01b      	beq.n	8001ae4 <HAL_GPIO_Init+0x90>
          break;
 8001aac:	e043      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001aae:	4a89      	ldr	r2, [pc, #548]	; (8001cd4 <HAL_GPIO_Init+0x280>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d026      	beq.n	8001b02 <HAL_GPIO_Init+0xae>
 8001ab4:	4a87      	ldr	r2, [pc, #540]	; (8001cd4 <HAL_GPIO_Init+0x280>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d806      	bhi.n	8001ac8 <HAL_GPIO_Init+0x74>
 8001aba:	4a87      	ldr	r2, [pc, #540]	; (8001cd8 <HAL_GPIO_Init+0x284>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d020      	beq.n	8001b02 <HAL_GPIO_Init+0xae>
 8001ac0:	4a86      	ldr	r2, [pc, #536]	; (8001cdc <HAL_GPIO_Init+0x288>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01d      	beq.n	8001b02 <HAL_GPIO_Init+0xae>
          break;
 8001ac6:	e036      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ac8:	4a85      	ldr	r2, [pc, #532]	; (8001ce0 <HAL_GPIO_Init+0x28c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0xae>
 8001ace:	4a85      	ldr	r2, [pc, #532]	; (8001ce4 <HAL_GPIO_Init+0x290>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d016      	beq.n	8001b02 <HAL_GPIO_Init+0xae>
 8001ad4:	4a84      	ldr	r2, [pc, #528]	; (8001ce8 <HAL_GPIO_Init+0x294>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0xae>
          break;
 8001ada:	e02c      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	623b      	str	r3, [r7, #32]
          break;
 8001ae2:	e028      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e023      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	3308      	adds	r3, #8
 8001af4:	623b      	str	r3, [r7, #32]
          break;
 8001af6:	e01e      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	330c      	adds	r3, #12
 8001afe:	623b      	str	r3, [r7, #32]
          break;
 8001b00:	e019      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	623b      	str	r3, [r7, #32]
          break;
 8001b0e:	e012      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d105      	bne.n	8001b24 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	611a      	str	r2, [r3, #16]
          break;
 8001b22:	e008      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b24:	2308      	movs	r3, #8
 8001b26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	615a      	str	r2, [r3, #20]
          break;
 8001b2e:	e002      	b.n	8001b36 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
          break;
 8001b34:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2bff      	cmp	r3, #255	; 0xff
 8001b3a:	d801      	bhi.n	8001b40 <HAL_GPIO_Init+0xec>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	e001      	b.n	8001b44 <HAL_GPIO_Init+0xf0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3304      	adds	r3, #4
 8001b44:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2bff      	cmp	r3, #255	; 0xff
 8001b4a:	d802      	bhi.n	8001b52 <HAL_GPIO_Init+0xfe>
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_Init+0x104>
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	3b08      	subs	r3, #8
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	210f      	movs	r1, #15
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	6a39      	ldr	r1, [r7, #32]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 8096 	beq.w	8001cb2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b86:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_GPIO_Init+0x298>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a58      	ldr	r2, [pc, #352]	; (8001cec <HAL_GPIO_Init+0x298>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b56      	ldr	r3, [pc, #344]	; (8001cec <HAL_GPIO_Init+0x298>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b9e:	4a54      	ldr	r2, [pc, #336]	; (8001cf0 <HAL_GPIO_Init+0x29c>)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	089b      	lsrs	r3, r3, #2
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001baa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	; (8001cf4 <HAL_GPIO_Init+0x2a0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x19e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4a      	ldr	r2, [pc, #296]	; (8001cf8 <HAL_GPIO_Init+0x2a4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x19a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a49      	ldr	r2, [pc, #292]	; (8001cfc <HAL_GPIO_Init+0x2a8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x196>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a48      	ldr	r2, [pc, #288]	; (8001d00 <HAL_GPIO_Init+0x2ac>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x192>
 8001be2:	2303      	movs	r3, #3
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x1a0>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x1a0>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x1a0>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x1a0>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c04:	493a      	ldr	r1, [pc, #232]	; (8001cf0 <HAL_GPIO_Init+0x29c>)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c1e:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4938      	ldr	r1, [pc, #224]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
 8001c2a:	e006      	b.n	8001c3a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	4933      	ldr	r1, [pc, #204]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c46:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	492e      	ldr	r1, [pc, #184]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
 8001c52:	e006      	b.n	8001c62 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4929      	ldr	r1, [pc, #164]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	4924      	ldr	r1, [pc, #144]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	491f      	ldr	r1, [pc, #124]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	491a      	ldr	r1, [pc, #104]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4915      	ldr	r1, [pc, #84]	; (8001d04 <HAL_GPIO_Init+0x2b0>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f47f aed0 	bne.w	8001a68 <HAL_GPIO_Init+0x14>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	372c      	adds	r7, #44	; 0x2c
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	10210000 	.word	0x10210000
 8001cd8:	10110000 	.word	0x10110000
 8001cdc:	10120000 	.word	0x10120000
 8001ce0:	10310000 	.word	0x10310000
 8001ce4:	10320000 	.word	0x10320000
 8001ce8:	10220000 	.word	0x10220000
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	40010c00 	.word	0x40010c00
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40011400 	.word	0x40011400
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d24:	e003      	b.n	8001d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d26:	887b      	ldrh	r3, [r7, #2]
 8001d28:	041a      	lsls	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f806 	bl	8001d68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e26c      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8087 	beq.w	8001eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d9c:	4b92      	ldr	r3, [pc, #584]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d00c      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001da8:	4b8f      	ldr	r3, [pc, #572]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d112      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
 8001db4:	4b8c      	ldr	r3, [pc, #560]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc0:	d10b      	bne.n	8001dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d06c      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d168      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e246      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x76>
 8001de4:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e02e      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x98>
 8001dfa:	4b7b      	ldr	r3, [pc, #492]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7a      	ldr	r2, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b78      	ldr	r3, [pc, #480]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a77      	ldr	r2, [pc, #476]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e01d      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0xbc>
 8001e1e:	4b72      	ldr	r3, [pc, #456]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a71      	ldr	r2, [pc, #452]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6e      	ldr	r2, [pc, #440]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0xd4>
 8001e38:	4b6b      	ldr	r3, [pc, #428]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b68      	ldr	r3, [pc, #416]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a67      	ldr	r2, [pc, #412]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7ff fce4 	bl	8001824 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fce0 	bl	8001824 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1fa      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0xe4>
 8001e7e:	e014      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fcd0 	bl	8001824 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fccc 	bl	8001824 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1e6      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9a:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x10c>
 8001ea6:	e000      	b.n	8001eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d063      	beq.n	8001f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb6:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00b      	beq.n	8001eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ec2:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d11c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
 8001ece:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eda:	4b43      	ldr	r3, [pc, #268]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d001      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e1ba      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4939      	ldr	r1, [pc, #228]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	e03a      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d020      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f10:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7ff fc85 	bl	8001824 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fc81 	bl	8001824 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e19b      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_RCC_OscConfig+0x270>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fc64 	bl	8001824 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f60:	f7ff fc60 	bl	8001824 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e17a      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f72:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d03a      	beq.n	8002000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d019      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f92:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f98:	f7ff fc44 	bl	8001824 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fc40 	bl	8001824 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e15a      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f000 faa8 	bl	8002514 <RCC_Delay>
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fc2a 	bl	8001824 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd2:	e00f      	b.n	8001ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fc26 	bl	8001824 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d908      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e140      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	42420000 	.word	0x42420000
 8001ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff4:	4b9e      	ldr	r3, [pc, #632]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e9      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 80a6 	beq.w	800215a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002012:	4b97      	ldr	r3, [pc, #604]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b94      	ldr	r3, [pc, #592]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a93      	ldr	r2, [pc, #588]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	61d3      	str	r3, [r2, #28]
 800202a:	4b91      	ldr	r3, [pc, #580]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a8a      	ldr	r2, [pc, #552]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7ff fbe7 	bl	8001824 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7ff fbe3 	bl	8001824 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	; 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e0fd      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b81      	ldr	r3, [pc, #516]	; (8002274 <HAL_RCC_OscConfig+0x4f8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x312>
 8002080:	4b7b      	ldr	r3, [pc, #492]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a7a      	ldr	r2, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e02d      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x334>
 8002096:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4a75      	ldr	r2, [pc, #468]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	6213      	str	r3, [r2, #32]
 80020a2:	4b73      	ldr	r3, [pc, #460]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4a72      	ldr	r2, [pc, #456]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f023 0304 	bic.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	e01c      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	d10c      	bne.n	80020d2 <HAL_RCC_OscConfig+0x356>
 80020b8:	4b6d      	ldr	r3, [pc, #436]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a6c      	ldr	r2, [pc, #432]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6213      	str	r3, [r2, #32]
 80020c4:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	4a69      	ldr	r2, [pc, #420]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6213      	str	r3, [r2, #32]
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x36e>
 80020d2:	4b67      	ldr	r3, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4a66      	ldr	r2, [pc, #408]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	4b64      	ldr	r3, [pc, #400]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4a63      	ldr	r2, [pc, #396]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d015      	beq.n	800211e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7ff fb97 	bl	8001824 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7ff fb93 	bl	8001824 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0ab      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b57      	ldr	r3, [pc, #348]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ee      	beq.n	80020fa <HAL_RCC_OscConfig+0x37e>
 800211c:	e014      	b.n	8002148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211e:	f7ff fb81 	bl	8001824 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff fb7d 	bl	8001824 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e095      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213c:	4b4c      	ldr	r3, [pc, #304]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b48      	ldr	r3, [pc, #288]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	4a47      	ldr	r2, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8081 	beq.w	8002266 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002164:	4b42      	ldr	r3, [pc, #264]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 030c 	and.w	r3, r3, #12
 800216c:	2b08      	cmp	r3, #8
 800216e:	d061      	beq.n	8002234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d146      	bne.n	8002206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217e:	f7ff fb51 	bl	8001824 <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002186:	f7ff fb4d 	bl	8001824 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e067      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f0      	bne.n	8002186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d108      	bne.n	80021c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	492d      	ldr	r1, [pc, #180]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a19      	ldr	r1, [r3, #32]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	430b      	orrs	r3, r1
 80021d2:	4927      	ldr	r1, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7ff fb21 	bl	8001824 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e6:	f7ff fb1d 	bl	8001824 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e037      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f8:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x46a>
 8002204:	e02f      	b.n	8002266 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <HAL_RCC_OscConfig+0x4fc>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fb0a 	bl	8001824 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff fb06 	bl	8001824 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e020      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x498>
 8002232:	e018      	b.n	8002266 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e013      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	429a      	cmp	r2, r3
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d001      	beq.n	8002266 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
 8002278:	42420060 	.word	0x42420060

0800227c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d0      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4965      	ldr	r1, [pc, #404]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a58      	ldr	r2, [pc, #352]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d040      	beq.n	800239c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d115      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e073      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4936      	ldr	r1, [pc, #216]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7ff fa5a 	bl	8001824 <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7ff fa56 	bl	8001824 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e053      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d210      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4601      	mov	r1, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1c8>)
 800241c:	5cd3      	ldrb	r3, [r2, r3]
 800241e:	fa21 f303 	lsr.w	r3, r1, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1cc>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1d0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f9b8 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40022000 	.word	0x40022000
 8002440:	40021000 	.word	0x40021000
 8002444:	0800348c 	.word	0x0800348c
 8002448:	2000000c 	.word	0x2000000c
 800244c:	20000010 	.word	0x20000010

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b490      	push	{r4, r7}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002458:	1d3c      	adds	r4, r7, #4
 800245a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800245c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002460:	4b28      	ldr	r3, [pc, #160]	; (8002504 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	2300      	movs	r3, #0
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d002      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 800248a:	2b08      	cmp	r3, #8
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0x46>
 800248e:	e02d      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002492:	623b      	str	r3, [r7, #32]
      break;
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	0c9b      	lsrs	r3, r3, #18
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024a2:	4413      	add	r3, r2
 80024a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	0c5b      	lsrs	r3, r3, #17
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024c2:	4413      	add	r3, r2
 80024c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ce:	fb02 f203 	mul.w	r2, r2, r3
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	e004      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024e0:	fb02 f303 	mul.w	r3, r2, r3
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	623b      	str	r3, [r7, #32]
      break;
 80024ea:	e002      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ee:	623b      	str	r3, [r7, #32]
      break;
 80024f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3728      	adds	r7, #40	; 0x28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc90      	pop	{r4, r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	08003478 	.word	0x08003478
 8002504:	08003488 	.word	0x08003488
 8002508:	40021000 	.word	0x40021000
 800250c:	007a1200 	.word	0x007a1200
 8002510:	003d0900 	.word	0x003d0900

08002514 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800251c:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <RCC_Delay+0x34>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0a      	ldr	r2, [pc, #40]	; (800254c <RCC_Delay+0x38>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0a5b      	lsrs	r3, r3, #9
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002530:	bf00      	nop
  }
  while (Delay --);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1e5a      	subs	r2, r3, #1
 8002536:	60fa      	str	r2, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1f9      	bne.n	8002530 <RCC_Delay+0x1c>
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	2000000c 	.word	0x2000000c
 800254c:	10624dd3 	.word	0x10624dd3

08002550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e053      	b.n	800260a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7fe ff83 	bl	8001488 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002598:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	ea42 0103 	orr.w	r1, r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	0c1a      	lsrs	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f002 0204 	and.w	r2, r2, #4
 80025e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b088      	sub	sp, #32
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_SPI_Transmit+0x22>
 8002630:	2302      	movs	r3, #2
 8002632:	e11e      	b.n	8002872 <HAL_SPI_Transmit+0x260>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800263c:	f7ff f8f2 	bl	8001824 <HAL_GetTick>
 8002640:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d002      	beq.n	8002658 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002652:	2302      	movs	r3, #2
 8002654:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002656:	e103      	b.n	8002860 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_SPI_Transmit+0x52>
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002668:	e0fa      	b.n	8002860 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b0:	d107      	bne.n	80026c2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b40      	cmp	r3, #64	; 0x40
 80026ce:	d007      	beq.n	80026e0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e8:	d14b      	bne.n	8002782 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_SPI_Transmit+0xe6>
 80026f2:	8afb      	ldrh	r3, [r7, #22]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d13e      	bne.n	8002776 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	1c9a      	adds	r2, r3, #2
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800271c:	e02b      	b.n	8002776 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b02      	cmp	r3, #2
 800272a:	d112      	bne.n	8002752 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	881a      	ldrh	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	1c9a      	adds	r2, r3, #2
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002750:	e011      	b.n	8002776 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002752:	f7ff f867 	bl	8001824 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d803      	bhi.n	800276a <HAL_SPI_Transmit+0x158>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d102      	bne.n	8002770 <HAL_SPI_Transmit+0x15e>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002774:	e074      	b.n	8002860 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ce      	bne.n	800271e <HAL_SPI_Transmit+0x10c>
 8002780:	e04c      	b.n	800281c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_SPI_Transmit+0x17e>
 800278a:	8afb      	ldrh	r3, [r7, #22]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d140      	bne.n	8002812 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	7812      	ldrb	r2, [r2, #0]
 800279c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027b6:	e02c      	b.n	8002812 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d113      	bne.n	80027ee <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80027ec:	e011      	b.n	8002812 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ee:	f7ff f819 	bl	8001824 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d803      	bhi.n	8002806 <HAL_SPI_Transmit+0x1f4>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d102      	bne.n	800280c <HAL_SPI_Transmit+0x1fa>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002810:	e026      	b.n	8002860 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1cd      	bne.n	80027b8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	6839      	ldr	r1, [r7, #0]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fb91 	bl	8002f48 <SPI_EndRxTxTransaction>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e000      	b.n	8002860 <HAL_SPI_Transmit+0x24e>
  }

error:
 800285e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002870:	7ffb      	ldrb	r3, [r7, #31]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3720      	adds	r7, #32
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b088      	sub	sp, #32
 800287e:	af02      	add	r7, sp, #8
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002896:	d112      	bne.n	80028be <HAL_SPI_Receive+0x44>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10e      	bne.n	80028be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2204      	movs	r2, #4
 80028a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80028a8:	88fa      	ldrh	r2, [r7, #6]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	4613      	mov	r3, r2
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f8e9 	bl	8002a8c <HAL_SPI_TransmitReceive>
 80028ba:	4603      	mov	r3, r0
 80028bc:	e0e2      	b.n	8002a84 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_SPI_Receive+0x52>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0db      	b.n	8002a84 <HAL_SPI_Receive+0x20a>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028d4:	f7fe ffa6 	bl	8001824 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80028e6:	2302      	movs	r3, #2
 80028e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028ea:	e0c2      	b.n	8002a72 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_Receive+0x7e>
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80028fc:	e0b9      	b.n	8002a72 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2204      	movs	r2, #4
 8002902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	88fa      	ldrh	r2, [r7, #6]
 8002916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002944:	d107      	bne.n	8002956 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002954:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d007      	beq.n	8002974 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002972:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d162      	bne.n	8002a42 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800297c:	e02e      	b.n	80029dc <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d115      	bne.n	80029b8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f103 020c 	add.w	r2, r3, #12
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002998:	7812      	ldrb	r2, [r2, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029b6:	e011      	b.n	80029dc <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b8:	f7fe ff34 	bl	8001824 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d803      	bhi.n	80029d0 <HAL_SPI_Receive+0x156>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d102      	bne.n	80029d6 <HAL_SPI_Receive+0x15c>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80029da:	e04a      	b.n	8002a72 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1cb      	bne.n	800297e <HAL_SPI_Receive+0x104>
 80029e6:	e031      	b.n	8002a4c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d113      	bne.n	8002a1e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	b292      	uxth	r2, r2
 8002a02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	1c9a      	adds	r2, r3, #2
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a1c:	e011      	b.n	8002a42 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a1e:	f7fe ff01 	bl	8001824 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d803      	bhi.n	8002a36 <HAL_SPI_Receive+0x1bc>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d102      	bne.n	8002a3c <HAL_SPI_Receive+0x1c2>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a40:	e017      	b.n	8002a72 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1cd      	bne.n	80029e8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fa27 	bl	8002ea4 <SPI_EndRxTransaction>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
 8002a6e:	e000      	b.n	8002a72 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002a70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08c      	sub	sp, #48	; 0x30
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_SPI_TransmitReceive+0x26>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e18a      	b.n	8002dc8 <HAL_SPI_TransmitReceive+0x33c>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aba:	f7fe feb3 	bl	8001824 <HAL_GetTick>
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d00f      	beq.n	8002afc <HAL_SPI_TransmitReceive+0x70>
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae2:	d107      	bne.n	8002af4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <HAL_SPI_TransmitReceive+0x68>
 8002aec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d003      	beq.n	8002afc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
 8002af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002afa:	e15b      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x82>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <HAL_SPI_TransmitReceive+0x82>
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002b14:	e14e      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d003      	beq.n	8002b2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2205      	movs	r2, #5
 8002b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	887a      	ldrh	r2, [r7, #2]
 8002b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	887a      	ldrh	r2, [r7, #2]
 8002b52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d007      	beq.n	8002b7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b86:	d178      	bne.n	8002c7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_SPI_TransmitReceive+0x10a>
 8002b90:	8b7b      	ldrh	r3, [r7, #26]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d166      	bne.n	8002c64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bba:	e053      	b.n	8002c64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d11b      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0x176>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d016      	beq.n	8002c02 <HAL_SPI_TransmitReceive+0x176>
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d113      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	881a      	ldrh	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	1c9a      	adds	r2, r3, #2
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d119      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x1b8>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d014      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	b292      	uxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	1c9a      	adds	r2, r3, #2
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c40:	2301      	movs	r3, #1
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c44:	f7fe fdee 	bl	8001824 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d807      	bhi.n	8002c64 <HAL_SPI_TransmitReceive+0x1d8>
 8002c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d003      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c62:	e0a7      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1a6      	bne.n	8002bbc <HAL_SPI_TransmitReceive+0x130>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1a1      	bne.n	8002bbc <HAL_SPI_TransmitReceive+0x130>
 8002c78:	e07c      	b.n	8002d74 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_SPI_TransmitReceive+0x1fc>
 8002c82:	8b7b      	ldrh	r3, [r7, #26]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d16b      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	7812      	ldrb	r2, [r2, #0]
 8002c94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cae:	e057      	b.n	8002d60 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d11c      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x26c>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d017      	beq.n	8002cf8 <HAL_SPI_TransmitReceive+0x26c>
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d114      	bne.n	8002cf8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	7812      	ldrb	r2, [r2, #0]
 8002cda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d119      	bne.n	8002d3a <HAL_SPI_TransmitReceive+0x2ae>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d014      	beq.n	8002d3a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d36:	2301      	movs	r3, #1
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d3a:	f7fe fd73 	bl	8001824 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d803      	bhi.n	8002d52 <HAL_SPI_TransmitReceive+0x2c6>
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d102      	bne.n	8002d58 <HAL_SPI_TransmitReceive+0x2cc>
 8002d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002d5e:	e029      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1a2      	bne.n	8002cb0 <HAL_SPI_TransmitReceive+0x224>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d19d      	bne.n	8002cb0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f8e5 	bl	8002f48 <SPI_EndRxTxTransaction>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d90:	e010      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	e000      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002db2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dc4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3730      	adds	r7, #48	; 0x30
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002de0:	e04c      	b.n	8002e7c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d048      	beq.n	8002e7c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002dea:	f7fe fd1b 	bl	8001824 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d902      	bls.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d13d      	bne.n	8002e7c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e18:	d111      	bne.n	8002e3e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e22:	d004      	beq.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2c:	d107      	bne.n	8002e3e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e46:	d10f      	bne.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e00f      	b.n	8002e9c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4013      	ands	r3, r2
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d1a3      	bne.n	8002de2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb8:	d111      	bne.n	8002ede <SPI_EndRxTransaction+0x3a>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec2:	d004      	beq.n	8002ece <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d107      	bne.n	8002ede <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002edc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee6:	d117      	bne.n	8002f18 <SPI_EndRxTransaction+0x74>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef0:	d112      	bne.n	8002f18 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2101      	movs	r1, #1
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff ff67 	bl	8002dd0 <SPI_WaitFlagStateUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01a      	beq.n	8002f3e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e013      	b.n	8002f40 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff ff54 	bl	8002dd0 <SPI_WaitFlagStateUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f043 0220 	orr.w	r2, r3, #32
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e000      	b.n	8002f40 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff36 	bl	8002dd0 <SPI_WaitFlagStateUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e000      	b.n	8002f7c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e01d      	b.n	8002fd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fb9e 	bl	80016ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f000 f8e4 	bl	8003190 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b06      	cmp	r3, #6
 8002ffa:	d007      	beq.n	800300c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIM_ConfigClockSource+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e0a6      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x166>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800305e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d067      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0x120>
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d80b      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x6c>
 8003074:	2b10      	cmp	r3, #16
 8003076:	d073      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
 8003078:	2b10      	cmp	r3, #16
 800307a:	d802      	bhi.n	8003082 <HAL_TIM_ConfigClockSource+0x62>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d06f      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003080:	e078      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003082:	2b20      	cmp	r3, #32
 8003084:	d06c      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	d06a      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800308a:	e073      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800308c:	2b70      	cmp	r3, #112	; 0x70
 800308e:	d00d      	beq.n	80030ac <HAL_TIM_ConfigClockSource+0x8c>
 8003090:	2b70      	cmp	r3, #112	; 0x70
 8003092:	d804      	bhi.n	800309e <HAL_TIM_ConfigClockSource+0x7e>
 8003094:	2b50      	cmp	r3, #80	; 0x50
 8003096:	d033      	beq.n	8003100 <HAL_TIM_ConfigClockSource+0xe0>
 8003098:	2b60      	cmp	r3, #96	; 0x60
 800309a:	d041      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800309c:	e06a      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d066      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x152>
 80030a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a8:	d017      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030aa:	e063      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f000 f941 	bl	8003342 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	609a      	str	r2, [r3, #8]
      break;
 80030d8:	e04c      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f000 f92a 	bl	8003342 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030fc:	609a      	str	r2, [r3, #8]
      break;
 80030fe:	e039      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	461a      	mov	r2, r3
 800310e:	f000 f8a1 	bl	8003254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2150      	movs	r1, #80	; 0x50
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f8f8 	bl	800330e <TIM_ITRx_SetConfig>
      break;
 800311e:	e029      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 f8bf 	bl	80032b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2160      	movs	r1, #96	; 0x60
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f8e8 	bl	800330e <TIM_ITRx_SetConfig>
      break;
 800313e:	e019      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	461a      	mov	r2, r3
 800314e:	f000 f881 	bl	8003254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f8d8 	bl	800330e <TIM_ITRx_SetConfig>
      break;
 800315e:	e009      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f000 f8cf 	bl	800330e <TIM_ITRx_SetConfig>
      break;
 8003170:	e000      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a29      	ldr	r2, [pc, #164]	; (8003248 <TIM_Base_SetConfig+0xb8>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00b      	beq.n	80031c0 <TIM_Base_SetConfig+0x30>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d007      	beq.n	80031c0 <TIM_Base_SetConfig+0x30>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a26      	ldr	r2, [pc, #152]	; (800324c <TIM_Base_SetConfig+0xbc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d003      	beq.n	80031c0 <TIM_Base_SetConfig+0x30>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a25      	ldr	r2, [pc, #148]	; (8003250 <TIM_Base_SetConfig+0xc0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d108      	bne.n	80031d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <TIM_Base_SetConfig+0xb8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00b      	beq.n	80031f2 <TIM_Base_SetConfig+0x62>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e0:	d007      	beq.n	80031f2 <TIM_Base_SetConfig+0x62>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a19      	ldr	r2, [pc, #100]	; (800324c <TIM_Base_SetConfig+0xbc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_Base_SetConfig+0x62>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a18      	ldr	r2, [pc, #96]	; (8003250 <TIM_Base_SetConfig+0xc0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d108      	bne.n	8003204 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a07      	ldr	r2, [pc, #28]	; (8003248 <TIM_Base_SetConfig+0xb8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d103      	bne.n	8003238 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	615a      	str	r2, [r3, #20]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800

08003254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f023 0201 	bic.w	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800327e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f023 030a 	bic.w	r3, r3, #10
 8003290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr

080032b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 0210 	bic.w	r2, r3, #16
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	031b      	lsls	r3, r3, #12
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	621a      	str	r2, [r3, #32]
}
 8003304:	bf00      	nop
 8003306:	371c      	adds	r7, #28
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	f043 0307 	orr.w	r3, r3, #7
 8003330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800335c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	021a      	lsls	r2, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	431a      	orrs	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4313      	orrs	r3, r2
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	609a      	str	r2, [r3, #8]
}
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr

08003380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003394:	2302      	movs	r3, #2
 8003396:	e032      	b.n	80033fe <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033d0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr

08003408 <__libc_init_array>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	2500      	movs	r5, #0
 800340c:	4e0c      	ldr	r6, [pc, #48]	; (8003440 <__libc_init_array+0x38>)
 800340e:	4c0d      	ldr	r4, [pc, #52]	; (8003444 <__libc_init_array+0x3c>)
 8003410:	1ba4      	subs	r4, r4, r6
 8003412:	10a4      	asrs	r4, r4, #2
 8003414:	42a5      	cmp	r5, r4
 8003416:	d109      	bne.n	800342c <__libc_init_array+0x24>
 8003418:	f000 f822 	bl	8003460 <_init>
 800341c:	2500      	movs	r5, #0
 800341e:	4e0a      	ldr	r6, [pc, #40]	; (8003448 <__libc_init_array+0x40>)
 8003420:	4c0a      	ldr	r4, [pc, #40]	; (800344c <__libc_init_array+0x44>)
 8003422:	1ba4      	subs	r4, r4, r6
 8003424:	10a4      	asrs	r4, r4, #2
 8003426:	42a5      	cmp	r5, r4
 8003428:	d105      	bne.n	8003436 <__libc_init_array+0x2e>
 800342a:	bd70      	pop	{r4, r5, r6, pc}
 800342c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003430:	4798      	blx	r3
 8003432:	3501      	adds	r5, #1
 8003434:	e7ee      	b.n	8003414 <__libc_init_array+0xc>
 8003436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800343a:	4798      	blx	r3
 800343c:	3501      	adds	r5, #1
 800343e:	e7f2      	b.n	8003426 <__libc_init_array+0x1e>
 8003440:	0800349c 	.word	0x0800349c
 8003444:	0800349c 	.word	0x0800349c
 8003448:	0800349c 	.word	0x0800349c
 800344c:	080034a0 	.word	0x080034a0

08003450 <memset>:
 8003450:	4603      	mov	r3, r0
 8003452:	4402      	add	r2, r0
 8003454:	4293      	cmp	r3, r2
 8003456:	d100      	bne.n	800345a <memset+0xa>
 8003458:	4770      	bx	lr
 800345a:	f803 1b01 	strb.w	r1, [r3], #1
 800345e:	e7f9      	b.n	8003454 <memset+0x4>

08003460 <_init>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	bf00      	nop
 8003464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003466:	bc08      	pop	{r3}
 8003468:	469e      	mov	lr, r3
 800346a:	4770      	bx	lr

0800346c <_fini>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr
